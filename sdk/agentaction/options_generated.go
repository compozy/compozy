// Code generated by optionsgen. DO NOT EDIT.

package agentaction

import (
	agent "github.com/compozy/compozy/engine/agent"
	attachment "github.com/compozy/compozy/engine/attachment"
	core "github.com/compozy/compozy/engine/core"
	schema "github.com/compozy/compozy/engine/schema"
	tool "github.com/compozy/compozy/engine/tool"
)

type Option func(*agent.ActionConfig)

// WithID sets the ID field
//
// Unique identifier for the action within the agent's scope.
// Used to invoke specific actions programmatically.
// - **Examples:** `"analyze-code"`, `"generate-summary"`, `"validate-data"`
func WithID(id string) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.ID = id
	}
}

// WithPrompt sets the Prompt field
//
// Detailed instructions for the agent when executing this action.
// Should clearly define the expected behavior, output format, and any constraints.
// **Best practices:**
// - Be specific about the desired outcome
// - Include examples if complex formatting is required
// - Define clear success criteria
// - Specify any limitations or boundaries
func WithPrompt(prompt string) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.Prompt = prompt
	}
}

// WithInputSchema sets the InputSchema field
//
// JSON Schema defining the expected input parameters for this action.
// Enables validation and type checking of inputs before execution.
// If `nil`, the action accepts any input format without validation.
// **Schema format:** JSON Schema Draft 7
func WithInputSchema(inputSchema *schema.Schema) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.InputSchema = inputSchema
	}
}

// WithOutputSchema sets the OutputSchema field
//
// JSON Schema defining the expected output format from this action.
// Used for validating agent responses and ensuring consistent output structure.
// If `nil`, no output validation is performed.
// **Schema format:** JSON Schema Draft 7
func WithOutputSchema(outputSchema *schema.Schema) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.OutputSchema = outputSchema
	}
}

// WithWith sets the With field
//
// Default parameters to provide to the action.
// These are merged with runtime parameters, with runtime values taking precedence.
// **Use cases:**
// - Setting default configuration options
// - Providing constant context values
// - Pre-filling common parameters
func WithWith(with *core.Input) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.With = with
	}
}

// WithAttachments sets the Attachments field
//
// Attachments at action scope
func WithAttachments(attachments attachment.Attachments) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.Attachments = attachments
	}
}

// WithTools sets the Tools field
//
// Tools scoped to this action; override agent-level tool availability when provided.
func WithTools(tools []tool.Config) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.Tools = tools
	}
}

// WithOnSuccess sets the OnSuccess field
//
// OnSuccess defines the transition executed when the action completes successfully.
func WithOnSuccess(onSuccess *core.SuccessTransition) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.OnSuccess = onSuccess
	}
}

// WithOnError sets the OnError field
//
// OnError defines the transition executed when the action encounters an error.
func WithOnError(onError *core.ErrorTransition) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.OnError = onError
	}
}

// WithRetryPolicy sets the RetryPolicy field
//
// RetryPolicy configures automatic retries for the action when execution fails.
func WithRetryPolicy(retryPolicy *core.RetryPolicyConfig) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.RetryPolicy = retryPolicy
	}
}

// WithTimeout sets the Timeout field
//
// Timeout specifies the maximum duration allowed for the action execution.
func WithTimeout(timeout string) Option {
	return func(cfg *agent.ActionConfig) {
		cfg.Timeout = timeout
	}
}
