// Code generated by optionsgen. DO NOT EDIT.

package tool

import (
	core "github.com/compozy/compozy/engine/core"
	schema "github.com/compozy/compozy/engine/schema"
	tool "github.com/compozy/compozy/engine/tool"
)

type Option func(*tool.Config)

// WithResource sets the Resource field
//
// Resource identifier for the autoloader system (must be `"tool"`).
// This field enables automatic discovery and registration of tool configurations.
func WithResource(resource string) Option {
	return func(cfg *tool.Config) {
		cfg.Resource = resource
	}
}

// WithID sets the ID field
//
// Unique identifier for the tool within the project scope.
// Used for referencing the tool in agent configurations, workflows, and function calls.
// Must be unique across all tools in the project.
// - **Examples:** `"file-reader"`, `"api-client"`, `"data-processor"`
// - **Naming:** Use kebab-case for consistency with other Compozy identifiers
func WithID(id string) Option {
	return func(cfg *tool.Config) {
		cfg.ID = id
	}
}

// WithName sets the Name field
//
// Name provides a concise, human-readable label for the tool shown in UIs and logs.
// Unlike the identifier, the name may include spaces and capitalization to improve readability.
// When omitted, UIs should fall back to using the identifier.
func WithName(name string) Option {
	return func(cfg *tool.Config) {
		cfg.Name = name
	}
}

// WithDescription sets the Description field
//
// Human-readable description of the tool's functionality and purpose.
// This description is used by AI agents to understand when and how to use the tool.
// Should clearly explain capabilities, limitations, and expected use cases.
// - **Best practices:** Be specific about what the tool does and its constraints
// - **Example:** `"Read and parse various file formats including JSON, YAML, and CSV with size limits"`
func WithDescription(description string) Option {
	return func(cfg *tool.Config) {
		cfg.Description = description
	}
}

// WithRuntime sets the Runtime field
//
// Runtime selects the execution environment for custom tool implementations.
// Supported runtimes include `"bun"`, `"node"`, and `"deno"` for JavaScript/TypeScript execution.
// When empty, the project runtime defaults are applied.
func WithRuntime(runtime string) Option {
	return func(cfg *tool.Config) {
		cfg.Runtime = runtime
	}
}

// WithImplementation sets the Implementation field
//
// Implementation defines how the tool executes within the Compozy engine.
// Supported values are:
// - `"runtime"`: executes via an external runtime such as Bun (default)
// - `"native"`: executes via an in-process Go handler registered at runtime
// When unset, the implementation defaults to `"runtime"` unless the runtime is explicitly `"go"`.
func WithImplementation(implementation string) Option {
	return func(cfg *tool.Config) {
		cfg.Implementation = implementation
	}
}

// WithCode sets the Code field
//
// Code contains inline source executed by the selected runtime when the tool runs.
// Builders may supply either inline JavaScript/TypeScript code or references resolved at runtime.
func WithCode(code string) Option {
	return func(cfg *tool.Config) {
		cfg.Code = code
	}
}

// WithTimeout sets the Timeout field
//
// Maximum execution time for the tool in Go duration format.
// If not specified, uses the global tool timeout from project configuration.
// This timeout applies to the entire tool execution lifecycle.
// - **Examples:** `"30s"`, `"5m"`, `"1h"`, `"500ms"`
// - **Constraints:** Must be positive; zero or negative values cause validation errors
// - **Default fallback:** Uses project-level tool timeout when empty
func WithTimeout(timeout string) Option {
	return func(cfg *tool.Config) {
		cfg.Timeout = timeout
	}
}

// WithInputSchema sets the InputSchema field
//
// JSON schema defining the expected input parameters for the tool.
// Used for validation before execution and to generate LLM function call definitions.
// Must follow JSON Schema Draft 7 specification for compatibility.
// - **When nil:** Tool accepts any input format (no validation performed)
// - **Use cases:** Parameter validation, type safety, auto-generated documentation
// - **Integration:** Automatically converts to LLM function parameters
func WithInputSchema(inputSchema *schema.Schema) Option {
	return func(cfg *tool.Config) {
		cfg.InputSchema = inputSchema
	}
}

// WithOutputSchema sets the OutputSchema field
//
// JSON schema defining the expected output format from the tool.
// Used for validation after execution and documentation purposes.
// Must follow JSON Schema Draft 7 specification for compatibility.
// - **When nil:** No output validation is performed
// - **Use cases:** Response validation, type safety, workflow data flow verification
// - **Best practice:** Define output schema for tools used in critical workflows
func WithOutputSchema(outputSchema *schema.Schema) Option {
	return func(cfg *tool.Config) {
		cfg.OutputSchema = outputSchema
	}
}

// WithWith sets the With field
//
// Default input parameters merged with runtime parameters provided by agents.
// Provides a way to set tool defaults while allowing runtime customization.
// - **Merge strategy:** Runtime parameters override defaults (shallow merge)
// - **Use cases:** Default API URLs, fallback configurations, preset options
// - **Security note:** Avoid storing secrets here; use environment variables instead
func WithWith(with *core.Input) Option {
	return func(cfg *tool.Config) {
		cfg.With = with
	}
}

// WithConfig sets the Config field
//
// Configuration parameters passed to the tool separately from input data.
// Provides static configuration that tools can use for initialization and behavior control.
// Unlike input parameters, config is not meant to change between tool invocations.
// - **Use cases:** API base URLs, retry policies, timeout settings, feature flags
// - **Separation:** Keeps configuration separate from runtime input data
// - **Override:** Can be overridden at workflow or agent level
// - **Example:**
// ```yaml
// config:
// base_url: "https://api.example.com"
// timeout: 30
// retry_count: 3
// headers:
// User-Agent: "Compozy/1.0"
// ```
func WithConfig(config *core.Input) Option {
	return func(cfg *tool.Config) {
		cfg.Config = config
	}
}

// WithEnv sets the Env field
//
// Environment variables available during tool execution.
// Variables are isolated to the tool's execution context for security.
// Used for configuration, API keys, and runtime settings.
// - **Security:** Variables are only accessible within the tool's execution
// - **Template support:** Values can use template expressions for dynamic configuration
// - **Example:**
// ```yaml
// env:
// API_KEY: "{{ .env.SECRET_API_KEY }}"
// BASE_URL: "https://api.example.com"
// DEBUG: "{{ .project.debug | default(false) }}"
// ```
func WithEnv(env *core.EnvMap) Option {
	return func(cfg *tool.Config) {
		cfg.Env = env
	}
}
