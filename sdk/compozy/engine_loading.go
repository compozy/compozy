// Code generated by compozygen. DO NOT EDIT.
package compozy

import (
	"fmt"
	engineagent "github.com/compozy/compozy/engine/agent"
	enginecore "github.com/compozy/compozy/engine/core"
	engineknowledge "github.com/compozy/compozy/engine/knowledge"
	enginemcp "github.com/compozy/compozy/engine/mcp"
	enginememory "github.com/compozy/compozy/engine/memory"
	engineproject "github.com/compozy/compozy/engine/project"
	projectschedule "github.com/compozy/compozy/engine/project/schedule"
	engineschema "github.com/compozy/compozy/engine/schema"
	enginetool "github.com/compozy/compozy/engine/tool"
	enginewebhook "github.com/compozy/compozy/engine/webhook"
	engineworkflow "github.com/compozy/compozy/engine/workflow"
)

// LoadProject loads a project configuration from disk.
func (e *Engine) LoadProject(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*engineproject.Config](e, path)
	if err != nil {
		return fmt.Errorf("load project config: %w", err)
	}
	if err := e.registerProject(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadProjectsFromDir loads projects configurations from a directory.
func (e *Engine) LoadProjectsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadProject)
}

// LoadWorkflow loads a workflow configuration from disk.
func (e *Engine) LoadWorkflow(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*engineworkflow.Config](e, path)
	if err != nil {
		return fmt.Errorf("load workflow config: %w", err)
	}
	if err := e.registerWorkflow(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadWorkflowsFromDir loads workflows configurations from a directory.
func (e *Engine) LoadWorkflowsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadWorkflow)
}

// LoadAgent loads a agent configuration from disk.
func (e *Engine) LoadAgent(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*engineagent.Config](e, path)
	if err != nil {
		return fmt.Errorf("load agent config: %w", err)
	}
	if err := e.registerAgent(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadAgentsFromDir loads agents configurations from a directory.
func (e *Engine) LoadAgentsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadAgent)
}

// LoadTool loads a tool configuration from disk.
func (e *Engine) LoadTool(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*enginetool.Config](e, path)
	if err != nil {
		return fmt.Errorf("load tool config: %w", err)
	}
	if err := e.registerTool(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadToolsFromDir loads tools configurations from a directory.
func (e *Engine) LoadToolsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadTool)
}

// LoadKnowledge loads a knowledge base configuration from disk.
func (e *Engine) LoadKnowledge(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*engineknowledge.BaseConfig](e, path)
	if err != nil {
		return fmt.Errorf("load knowledge config: %w", err)
	}
	if err := e.registerKnowledge(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadKnowledgeBasesFromDir loads knowledges configurations from a directory.
func (e *Engine) LoadKnowledgeBasesFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadKnowledge)
}

// LoadMemory loads a memory configuration from disk.
func (e *Engine) LoadMemory(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*enginememory.Config](e, path)
	if err != nil {
		return fmt.Errorf("load memory config: %w", err)
	}
	if err := e.registerMemory(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadMemoriesFromDir loads memorys configurations from a directory.
func (e *Engine) LoadMemoriesFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadMemory)
}

// LoadMCP loads a mcp configuration from disk.
func (e *Engine) LoadMCP(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*enginemcp.Config](e, path)
	if err != nil {
		return fmt.Errorf("load mcp config: %w", err)
	}
	if err := e.registerMCP(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadMCPsFromDir loads mcps configurations from a directory.
func (e *Engine) LoadMCPsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadMCP)
}

// LoadSchema loads a schema configuration from disk.
func (e *Engine) LoadSchema(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*engineschema.Schema](e, path)
	if err != nil {
		return fmt.Errorf("load schema config: %w", err)
	}
	if err := e.registerSchema(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadSchemasFromDir loads schemas configurations from a directory.
func (e *Engine) LoadSchemasFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadSchema)
}

// LoadModel loads a model configuration from disk.
func (e *Engine) LoadModel(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*enginecore.ProviderConfig](e, path)
	if err != nil {
		return fmt.Errorf("load model config: %w", err)
	}
	if err := e.registerModel(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadModelsFromDir loads models configurations from a directory.
func (e *Engine) LoadModelsFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadModel)
}

// LoadSchedule loads a schedule configuration from disk.
func (e *Engine) LoadSchedule(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*projectschedule.Config](e, path)
	if err != nil {
		return fmt.Errorf("load schedule config: %w", err)
	}
	if err := e.registerSchedule(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadSchedulesFromDir loads schedules configurations from a directory.
func (e *Engine) LoadSchedulesFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadSchedule)
}

// LoadWebhook loads a webhook configuration from disk.
func (e *Engine) LoadWebhook(path string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	cfg, abs, err := loadYAML[*enginewebhook.Config](e, path)
	if err != nil {
		return fmt.Errorf("load webhook config: %w", err)
	}
	if err := e.registerWebhook(cfg, registrationSourceYAML); err != nil {
		return fmt.Errorf("%s: %w", abs, err)
	}
	return nil
}

// LoadWebhooksFromDir loads webhooks configurations from a directory.
func (e *Engine) LoadWebhooksFromDir(dir string) error {
	if e == nil {
		return fmt.Errorf("engine is nil")
	}
	return e.loadFromDir(dir, e.LoadWebhook)
}
