// Code generated by compozygen. DO NOT EDIT.
package compozy

import (
	engineagent "github.com/compozy/compozy/engine/agent"
	enginecore "github.com/compozy/compozy/engine/core"
	engineknowledge "github.com/compozy/compozy/engine/knowledge"
	enginemcp "github.com/compozy/compozy/engine/mcp"
	enginememory "github.com/compozy/compozy/engine/memory"
	engineproject "github.com/compozy/compozy/engine/project"
	projectschedule "github.com/compozy/compozy/engine/project/schedule"
	engineschema "github.com/compozy/compozy/engine/schema"
	enginetool "github.com/compozy/compozy/engine/tool"
	enginewebhook "github.com/compozy/compozy/engine/webhook"
	engineworkflow "github.com/compozy/compozy/engine/workflow"
)

// WithProject registers a project configuration for the engine.
func WithProject(cfg *engineproject.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.project = cfg
	}
}

// WithWorkflow registers a workflow configuration for the engine.
func WithWorkflow(cfg *engineworkflow.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.workflows = append(c.workflows, cfg)
	}
}

// WithAgent registers a agent configuration for the engine.
func WithAgent(cfg *engineagent.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.agents = append(c.agents, cfg)
	}
}

// WithTool registers a tool configuration for the engine.
func WithTool(cfg *enginetool.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.tools = append(c.tools, cfg)
	}
}

// WithKnowledge registers a knowledge base configuration for the engine.
func WithKnowledge(cfg *engineknowledge.BaseConfig) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.knowledgeBases = append(c.knowledgeBases, cfg)
	}
}

// WithMemory registers a memory configuration for the engine.
func WithMemory(cfg *enginememory.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.memories = append(c.memories, cfg)
	}
}

// WithMCP registers a mcp configuration for the engine.
func WithMCP(cfg *enginemcp.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.mcps = append(c.mcps, cfg)
	}
}

// WithSchema registers a schema configuration for the engine.
func WithSchema(cfg *engineschema.Schema) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.schemas = append(c.schemas, cfg)
	}
}

// WithModel registers a model configuration for the engine.
func WithModel(cfg *enginecore.ProviderConfig) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.models = append(c.models, cfg)
	}
}

// WithSchedule registers a schedule configuration for the engine.
func WithSchedule(cfg *projectschedule.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.schedules = append(c.schedules, cfg)
	}
}

// WithWebhook registers a webhook configuration for the engine.
func WithWebhook(cfg *enginewebhook.Config) Option {
	return func(c *config) {
		if c == nil || cfg == nil {
			return
		}
		c.webhooks = append(c.webhooks, cfg)
	}
}
