// Code generated by optionsgen. DO NOT EDIT.

package schedule

import schedule "github.com/compozy/compozy/engine/project/schedule"

type Option func(*schedule.Config)

// WithID sets the ID field
//
// ID uniquely identifies the schedule within the project.
func WithID(id string) Option {
	return func(cfg *schedule.Config) {
		cfg.ID = id
	}
}

// WithWorkflowID sets the WorkflowID field
//
// WorkflowID references the workflow that should be executed when the schedule fires.
func WithWorkflowID(workflowID string) Option {
	return func(cfg *schedule.Config) {
		cfg.WorkflowID = workflowID
	}
}

// WithCron sets the Cron field
//
// Cron is the cron expression that determines when the schedule triggers.
func WithCron(cron string) Option {
	return func(cfg *schedule.Config) {
		cfg.Cron = cron
	}
}

// WithTimezone sets the Timezone field
//
// Timezone provides the IANA timezone name used when evaluating the cron expression.
func WithTimezone(timezone string) Option {
	return func(cfg *schedule.Config) {
		cfg.Timezone = timezone
	}
}

// WithInput sets the Input field
//
// Input contains default input values that are supplied to the workflow when triggered.
func WithInput(input map[string]any) Option {
	return func(cfg *schedule.Config) {
		cfg.Input = input
	}
}

// WithRetry sets the Retry field
//
// Retry configures retry behavior for failed scheduled executions.
func WithRetry(retry *schedule.RetryPolicy) Option {
	return func(cfg *schedule.Config) {
		cfg.Retry = retry
	}
}

// WithEnabled sets the Enabled field
//
// Enabled toggles whether the schedule is active.
func WithEnabled(enabled *bool) Option {
	return func(cfg *schedule.Config) {
		cfg.Enabled = enabled
	}
}

// WithDescription sets the Description field
//
// Description explains the schedule purpose for operators.
func WithDescription(description string) Option {
	return func(cfg *schedule.Config) {
		cfg.Description = description
	}
}
