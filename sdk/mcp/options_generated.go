// Code generated by optionsgen. DO NOT EDIT.

package mcp

import (
	"time"

	mcp "github.com/compozy/compozy/engine/mcp"
	mcpproxy "github.com/compozy/compozy/pkg/mcp-proxy"
)

type Option func(*mcp.Config)

// WithResource sets the Resource field
//
// Resource reference for the MCP server (optional)
// If not specified, defaults to the value of ID.
// Used for resource identification and referencing in Compozy's resource system.
func WithResource(resource string) Option {
	return func(cfg *mcp.Config) {
		cfg.Resource = resource
	}
}

// WithID sets the ID field
//
// ID is the **unique identifier** for this MCP server configuration.
// This identifier is used throughout the system to reference this specific MCP server.
// Choose descriptive IDs that reflect the server's purpose.
// - **Examples**:
// - `filesystem` - for file system operations
// - `postgres-db` - for PostgreSQL database access
// - `github-api` - for GitHub integration
// - `python-runtime` - for Python code execution
func WithID(id string) Option {
	return func(cfg *mcp.Config) {
		cfg.ID = id
	}
}

// WithURL sets the URL field
//
// URL is the **endpoint for remote MCP servers**.
// Required for HTTP-based transports (SSE, streamable-http).
// Must be a valid HTTP or HTTPS URL pointing to an MCP-compatible endpoint.
// **Format**: `http[s]://host[:port]/path`
// - **Examples**:
// ```yaml
// url: "http://localhost:3000/mcp"
// url: "https://api.example.com/v1/mcp"
// url: "http://mcp-proxy:6001/filesystem"
// ```
// **Note**: Mutually exclusive with `command` - use either URL or Command, not both.
func WithURL(url string) Option {
	return func(cfg *mcp.Config) {
		cfg.URL = url
	}
}

// WithCommand sets the Command field
//
// Command is the **executable command** to spawn a local MCP server process.
// Used for stdio transport to run MCP servers as child processes.
// Supports both direct executables and complex commands with arguments.
// - **Examples**:
// ```yaml
// # Simple executable
// command: "mcp-server-filesystem"
// # Command with arguments
// command: "python /app/mcp_server.py --mode production"
// # Docker container
// command: "docker run --rm -i mcp/postgres:latest"
// ```
// **Security Note**: Commands are parsed using shell lexing for safety.
// Avoid user-provided input in commands.
func WithCommand(command string) Option {
	return func(cfg *mcp.Config) {
		cfg.Command = command
	}
}

// WithArgs sets the Args field
//
// Args supplies additional arguments passed to the command when spawning local MCP processes.
// Only used when `command` is provided (stdio transport). Ignored when `url` is configured.
// Runtime validation enforces that `command` and `url` are mutually exclusive.
// Use this to provide flags or subcommands while keeping Command focused on the executable.
// Example:
// command: "uvx"
// args: ["mcp-server-fetch", "--port", "9000"]
func WithArgs(args []string) Option {
	return func(cfg *mcp.Config) {
		cfg.Args = args
	}
}

// WithHeaders sets the Headers field
//
// Headers contains HTTP headers to include when connecting to remote MCP servers (SSE/HTTP).
// Useful for passing Authorization tokens, custom auth headers, or version negotiation.
// Example:
// headers:
// Authorization: "Bearer {{ .env.GITHUB_MCP_OAUTH_TOKEN }}"
func WithHeaders(headers map[string]string) Option {
	return func(cfg *mcp.Config) {
		cfg.Headers = headers
	}
}

// WithEnv sets the Env field
//
// Env contains **environment variables** to pass to the MCP server process.
// Only used when `command` is specified for spawning local processes.
// Useful for passing configuration, secrets, or runtime parameters.
// - **Examples**:
// ```yaml
// env:
// DATABASE_URL: "postgres://user:pass@localhost/db"
// API_KEY: "{{ .env.GITHUB_TOKEN }}"
// LOG_LEVEL: "debug"
// WORKSPACE_DIR: "/data/workspace"
// ```
// **Template Support**: Values can use Go template syntax to reference
// environment variables from the host system.
func WithEnv(env map[string]string) Option {
	return func(cfg *mcp.Config) {
		cfg.Env = env
	}
}

// WithProto sets the Proto field
//
// Proto specifies the **MCP protocol version** to use.
// Different protocol versions may support different features, message formats,
// or capabilities. Always use the version compatible with your MCP server.
// **Format**: `YYYY-MM-DD` (e.g., "2025-03-26")
// **Default**: `DefaultProtocolVersion` ("2025-03-26")
// **Version History**:
// - `2025-03-26` - Latest version with streaming support
// - `2024-12-01` - Initial protocol release
func WithProto(proto string) Option {
	return func(cfg *mcp.Config) {
		cfg.Proto = proto
	}
}

// WithTransport sets the Transport field
//
// Transport defines the **communication transport mechanism**.
// Choose the transport based on your MCP server's capabilities and deployment model.
// **Supported Values**:
// | Transport | Description | Use Case |
// |-----------|-------------|----------|
// | `sse` | Server-Sent Events | HTTP servers with real-time streaming |
// | `streamable-http` | HTTP with streaming | Large responses, file transfers |
// | `stdio` | Standard I/O | Local processes, Docker containers |
// **Default**: `sse`
// - **Examples**:
// ```yaml
// # Remote server with SSE
// transport: sse
// # Local process with stdio
// transport: stdio
// # HTTP server with large file support
// transport: streamable-http
// ```
func WithTransport(transport mcpproxy.TransportType) Option {
	return func(cfg *mcp.Config) {
		cfg.Transport = transport
	}
}

// WithStartTimeout sets the StartTimeout field
//
// StartTimeout is the **maximum time to wait** for the MCP server to start.
// Only applicable when using `command` to spawn local processes.
// Helps detect and handle startup failures gracefully.
// **Format**: Go duration string (e.g., "30s", "1m", "500ms")
// **Default**: No timeout (waits indefinitely)
// - **Examples**:
// ```yaml
// start_timeout: 30s   # Wait up to 30 seconds
// start_timeout: 2m    # Wait up to 2 minutes
// start_timeout: 500ms # Wait up to 500 milliseconds
// ```
// **Recommendation**: Set to at least 10-30s for Docker-based servers.
func WithStartTimeout(startTimeout time.Duration) Option {
	return func(cfg *mcp.Config) {
		cfg.StartTimeout = startTimeout
	}
}

// WithMaxSessions sets the MaxSessions field
//
// MaxSessions defines the **maximum number of concurrent sessions** allowed.
// Helps manage resource usage and prevent server overload.
// Each agent connection typically creates one session.
// **Values**:
// - `0`: Unlimited sessions (default)
// - Positive number: Maximum concurrent sessions
// - **Examples**:
// ```yaml
// max_sessions: 10  # Allow up to 10 concurrent connections
// max_sessions: 1   # Single session only (useful for stateful servers)
// max_sessions: 0   # Unlimited sessions
// ```
func WithMaxSessions(maxSessions int) Option {
	return func(cfg *mcp.Config) {
		cfg.MaxSessions = maxSessions
	}
}
