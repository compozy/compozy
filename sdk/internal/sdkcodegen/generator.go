package sdkcodegen

import (
	"bytes"
	"context"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

const (
	packageName       = "compozy"
	generatedPreamble = "// Code generated by compozygen. DO NOT EDIT.\n"
)

// Generate produces every Compozy SDK helper file under dstDir.
func Generate(ctx context.Context, dstDir string) error {
	if ctx == nil {
		return fmt.Errorf("context is required")
	}
	if err := ensureContext(ctx); err != nil {
		return err
	}
	if strings.TrimSpace(dstDir) == "" {
		return fmt.Errorf("destination directory is required")
	}
	files := []struct {
		Name string
		File *jen.File
		Err  error
	}{
		{
			Name: "options_generated.go",
			File: buildOptionsFile(),
		},
		{
			Name: "engine_registration.go",
			File: buildRegistrationFile(),
		},
		{
			Name: "engine_loading.go",
			File: buildLoadingFile(),
		},
		{
			Name: "engine_execution.go",
			File: buildExecutionFile(),
		},
	}
	for _, item := range files {
		if err := ensureContext(ctx); err != nil {
			return err
		}
		if item.File == nil {
			return fmt.Errorf("failed to build %s", item.Name)
		}
		if err := writeFormattedFile(filepath.Join(dstDir, item.Name), item.File); err != nil {
			return err
		}
	}
	return nil
}

func ensureContext(ctx context.Context) error {
	select {
	case <-ctx.Done():
		return fmt.Errorf("generation canceled: %w", ctx.Err())
	default:
		return nil
	}
}

func writeFormattedFile(path string, file *jen.File) error {
	var buf bytes.Buffer
	if _, err := buf.WriteString(generatedPreamble); err != nil {
		return fmt.Errorf("write header: %w", err)
	}
	if err := file.Render(&buf); err != nil {
		return fmt.Errorf("render jennifer file: %w", err)
	}
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("format generated source: %w", err)
	}
	if err := os.WriteFile(path, formatted, 0o600); err != nil {
		return fmt.Errorf("write %s: %w", path, err)
	}
	return nil
}
