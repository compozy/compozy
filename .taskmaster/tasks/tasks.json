{
    "tasks": [
        {
            "id": 1,
            "title": "Database Schema and Migration Setup",
            "description": "Create database schema for multi-tenant entities including organizations, users, and api_keys tables with proper indexes and foreign key relationships",
            "details": "Create PostgreSQL migrations for:\n1. organizations table (id UUID, name string unique, temporal_namespace string unique, status enum, created_at/updated_at)\n2. users table (id UUID, org_id UUID FK, email string, role enum, status enum, timestamps)\n3. api_keys table (id UUID, user_id UUID FK, org_id UUID FK, key_hash string, name string, expires_at nullable, rate_limit_per_hour int, created_at/last_used_at, status enum)\n4. Add org_id foreign keys to existing tables: workflows, tasks, schedules, workflow_states, task_states\n5. Create composite indexes: (org_id, created_at) on all major tables\n6. Ensure email uniqueness within organization scope using partial unique indexes\n\nUse pgx driver with proper connection pooling configuration.",
            "testStrategy": "Create integration tests verifying schema creation, foreign key constraints, and index performance. Test migration rollback scenarios and validate unique constraints work correctly within organization scope.",
            "priority": "high",
            "dependencies": [],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 2,
            "title": "Core Domain Entities and Types",
            "description": "Implement core domain entities for Organization, User, and APIKey with proper validation and business logic",
            "details": "Create domain entities in engine/core:\n1. Organization struct with ID, Name, TemporalNamespace, Status (active/suspended), timestamps\n2. User struct with ID, OrgID, Email, Role (admin/manager/customer), Status, timestamps\n3. APIKey struct with ID, UserID, OrgID, Hash, Name, ExpiresAt, RateLimitPerHour, timestamps, Status\n4. Role enum with proper permission mapping\n5. OrganizationStatus enum with state transitions\n6. Validation methods for email format, organization name uniqueness\n7. Business logic for namespace generation: 'compozy-{org-slug}'\n8. ID generation using core.NewID() for consistency\n\nImplement proper JSON marshaling/unmarshaling with struct tags.",
            "testStrategy": "Unit tests for entity validation, business logic methods, JSON serialization/deserialization, and enum value validation. Test edge cases for namespace generation and email validation.",
            "priority": "high",
            "dependencies": [1],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 3,
            "title": "Repository Layer Implementation",
            "description": "Implement repository interfaces and PostgreSQL implementations for Organization, User, and APIKey entities with organization-scoped queries",
            "details": "Create repository layer in engine/infra/store:\n1. OrgRepository interface with CRUD operations, FindByName, UpdateStatus methods\n2. UserRepository interface with organization-scoped queries, FindByEmail, UpdateRole methods\n3. APIKeyRepository interface with FindByPrefix, ValidateKey, organization-scoped listing\n4. PostgreSQL implementations using pgx with prepared statements\n5. All queries must include org_id filtering where applicable\n6. Transaction support using store.TransactionManager\n7. Proper error handling with domain-specific errors\n8. Connection pooling with organization-aware patterns\n\nImplement repository pattern with interfaces for testability.",
            "testStrategy": "Integration tests with test database, verify organization isolation, test transaction rollback scenarios, validate query performance with indexes, and test concurrent access patterns.",
            "priority": "high",
            "dependencies": [2],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 4,
            "title": "API Key Security Service",
            "description": "Implement secure API key generation, hashing, and validation service using Argon2 with constant-time comparison",
            "details": "Create APIKeyService in engine/infra/auth:\n1. Generate 32-character random API keys with 'cmpz_' prefix\n2. Implement Argon2 hashing with salt generation for secure storage\n3. Constant-time comparison using subtle.ConstantTimeCompare to prevent timing attacks\n4. Key validation with organization and user context retrieval\n5. Support for key expiration checking\n6. Rate limiting configuration per API key\n7. Audit logging for key generation, validation attempts, and security events\n8. Key prefix extraction for efficient database lookups\n\nUse golang.org/x/crypto/argon2 with secure parameters: time=1, memory=64*1024, threads=4, keyLen=32.",
            "testStrategy": "Security-focused testing including timing attack resistance, hash collision testing, key generation entropy validation, and penetration testing for authentication bypass attempts.",
            "priority": "high",
            "dependencies": [3],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 5,
            "title": "Organization Management Service",
            "description": "Implement organization lifecycle management service with Temporal namespace provisioning and transaction handling",
            "details": "Create OrganizationService in engine/infra/auth:\n1. CreateOrganization with atomic database + Temporal namespace creation\n2. Temporal namespace provisioning with retry logic and exponential backoff\n3. Organization status management (provisioning -> active -> suspended)\n4. Transaction handling for multi-step operations\n5. Namespace naming: 'org-{org-slug}-{short-uuid}' format\n6. Error handling with proper rollback on Temporal failures\n7. Organization validation and uniqueness checking\n8. Integration with Temporal client for namespace management\n\nImplement retry.Do with 3 attempts, exponential backoff starting at 500ms, max delay 5s.",
            "testStrategy": "Test organization creation flow, Temporal namespace provisioning failures and rollback, concurrent organization creation, and namespace naming collision handling.",
            "priority": "high",
            "dependencies": [4],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 6,
            "title": "User Management Service",
            "description": "Implement user lifecycle management with role-based permissions and organization-scoped operations",
            "details": "Create UserService in engine/infra/auth:\n1. User CRUD operations with organization context\n2. Role management (admin/manager/customer) with permission validation\n3. Email uniqueness validation within organization scope\n4. User status management (active/suspended)\n5. Role-based permission checking for operations\n6. User-organization association validation\n7. Bulk user operations for organization management\n8. User activity tracking and audit logging\n\nImplement permission matrix: admin (global), manager (org-wide), customer (read/execute only).",
            "testStrategy": "Test role-based access control, email uniqueness within organizations, user status transitions, and permission validation for different user roles.",
            "priority": "medium",
            "dependencies": [5],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 7,
            "title": "Authentication and Authorization Middleware",
            "description": "Implement Gin middleware for API key authentication, organization context injection, and rate limiting",
            "details": "Create middleware in engine/infra/auth:\n1. AuthMiddleware for Bearer token extraction and API key validation\n2. OrgContextMiddleware for organization context injection into request context\n3. RateLimitMiddleware using in-memory rate limiter with golang.org/x/time/rate\n4. Proper error responses following project standard format\n5. Context propagation with apiKey, user, organization, and userRole\n6. Rate limiting per API key with configurable limits (100 req/sec, burst 20)\n7. Security headers and audit logging\n8. Graceful error handling with appropriate HTTP status codes\n\nUse sync.RWMutex for thread-safe rate limiter map with cleanup goroutine.",
            "testStrategy": "Test authentication flows, rate limiting enforcement, context propagation, concurrent request handling, and security edge cases like malformed tokens.",
            "priority": "high",
            "dependencies": [6],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 8,
            "title": "Multi-Tenant Data Access Layer",
            "description": "Implement organization-scoped data access patterns and update existing repositories for multi-tenant support",
            "details": "Update existing repositories in engine/infra/store:\n1. Add org_id filtering to all existing queries (workflows, tasks, schedules)\n2. Create OrganizationContext helper for automatic query filtering\n3. Update WorkflowRepository, TaskRepository, ScheduleRepository with organization scope\n4. Implement middleware integration for automatic organization context injection\n5. Prevent cross-organization data access at repository level\n6. Update all CRUD operations to include org_id\n7. Optimize queries with proper index usage\n8. Error handling that doesn't leak cross-organization information\n\nEnsure all queries use composite indexes (org_id, created_at) for performance.",
            "testStrategy": "Verify complete data isolation between organizations, test query performance with organization filtering, validate no cross-organization data leakage, and test concurrent multi-tenant access.",
            "priority": "high",
            "dependencies": [7],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 9,
            "title": "Temporal Namespace Integration",
            "description": "Implement Temporal namespace isolation with organization-aware workflow routing and dispatcher updates",
            "details": "Update Temporal integration in engine/workflow:\n1. Modify TemporalDispatcher to route workflows based on organization context\n2. Update workflow execution to use organization-specific namespaces\n3. Implement namespace-aware signal handling\n4. Update scheduler to execute workflows in correct namespaces\n5. Maintain organization context throughout workflow execution\n6. Update worker configuration for multi-namespace support\n7. Implement namespace provisioning automation\n8. Error handling for namespace-related failures\n\nUse Temporal client with namespace switching based on organization context from middleware.",
            "testStrategy": "Test workflow execution in correct namespaces, verify signal isolation between organizations, test scheduler namespace routing, and validate worker multi-namespace handling.",
            "priority": "high",
            "dependencies": [8],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 10,
            "title": "REST API Endpoints",
            "description": "Implement comprehensive REST API endpoints for organization, user, and API key management with proper validation and error handling",
            "details": "Create API handlers in engine/api:\n1. Organization endpoints: POST/GET/PUT/DELETE /api/v0/organizations\n2. User endpoints: POST/GET/PUT/DELETE /api/v0/organizations/{org_id}/users\n3. API key endpoints: POST/GET/PUT/DELETE /api/v0/users/{user_id}/api-keys\n4. Proper request validation using github.com/go-playground/validator/v10\n5. Consistent response format: {\"data\": {...}, \"message\": \"...\"}\n6. Role-based access control for each endpoint\n7. Pagination support for list endpoints\n8. Proper HTTP status codes and error responses\n\nImplement Gin router with middleware chain: auth -> rate limit -> org context -> handler.",
            "testStrategy": "API integration tests covering all CRUD operations, role-based access validation, request/response format validation, error handling, and pagination functionality.",
            "priority": "medium",
            "dependencies": [9],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 11,
            "title": "CLI Command Implementation",
            "description": "Implement comprehensive CLI commands for organization, user, and API key management with intuitive workflows",
            "details": "Create CLI commands using cobra:\n1. Organization commands: create, list, show, update, delete\n2. User commands: add, list, show, update, remove with org and role flags\n3. API key commands: create, list, show, update, revoke with user association\n4. Proper flag validation and help text\n5. Configuration file support for API endpoint and authentication\n6. Output formatting (table, JSON) with --output flag\n7. Interactive prompts for destructive operations\n8. Progress indicators for long-running operations\n\nCommands: 'compozy org create', 'compozy user add', 'compozy apikey create' with intuitive flag structure.",
            "testStrategy": "CLI integration tests, command flag validation, output format testing, interactive prompt testing, and end-to-end workflow validation.",
            "priority": "medium",
            "dependencies": [10],
            "status": "pending",
            "subtasks": []
        },
        {
            "id": 12,
            "title": "Security Audit and Performance Optimization",
            "description": "Conduct comprehensive security audit, implement performance optimizations, and validate multi-tenant isolation",
            "details": "Security and performance validation:\n1. Security audit focusing on cross-organization data leakage prevention\n2. Penetration testing for authentication bypass attempts\n3. Performance benchmarking with organization-filtered queries\n4. Database query optimization and index usage analysis\n5. Rate limiting effectiveness testing under load\n6. API key security validation (timing attacks, entropy)\n7. Audit logging implementation for security events\n8. Load testing with multiple organizations and concurrent users\n\nTarget metrics: <50ms auth latency, <200ms API response time, 0 cross-org data leakage.",
            "testStrategy": "Automated security testing, performance benchmarking, load testing with realistic multi-tenant scenarios, and comprehensive audit trail validation.",
            "priority": "high",
            "dependencies": [11],
            "status": "pending",
            "subtasks": []
        }
    ],
    "metadata": {
        "created": "2025-06-20T03:13:35.779Z",
        "updated": "2025-06-20T03:18:28.746Z",
        "description": "Tasks for multitenant context"
    }
}
