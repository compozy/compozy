{
  "tasks": [
    {
      "id": 1,
      "title": "Update Database Migration Files",
      "description": "Migration files have been successfully updated to implement parent-child task relationships by adding parent_state_id column, foreign key constraints, performance indexes, and removing the parallel_state column",
      "status": "completed",
      "dependencies": [],
      "priority": "high",
      "details": "✅ **Successfully Completed Migration Updates:**\n\n1. **Added parent_state_id column**: `parent_state_id text` - allows NULL for root tasks\n2. **Added foreign key constraint**: `CONSTRAINT fk_parent_task FOREIGN KEY (parent_state_id) REFERENCES task_states (task_exec_id) ON DELETE CASCADE` - ensures referential integrity\n3. **Added performance index**: `CREATE INDEX idx_task_states_parent_id ON task_states (parent_state_id)` - optimizes parent-child queries\n4. **Removed parallel_state column**: Completely eliminated the JSONB column and related indexes\n5. **Updated check constraint**: Simplified execution type validation to remove parallel_state references\n6. **Added hierarchical indexes**: `idx_task_states_parent_status` for efficient parent-child status queries\n\n✅ **Key Improvements Implemented:**\n- Self-referencing foreign key enables proper parent-child relationships\n- CASCADE delete ensures child tasks are cleaned up when parent is deleted\n- Optimized indexes for hierarchical queries and status aggregation\n- Simplified constraint logic removes JSONB complexity\n\n✅ **Migration Safety Features:**\n- Proper rollback procedures included in Down section\n- All indexes properly dropped during rollback\n- Foreign key constraints ensure data integrity\n\nThe migration is now ready for deployment and fully supports the new parent-child task architecture as specified in the PRD.",
      "testStrategy": "✅ Migration testing completed successfully:\n- Verified schema changes with \\d task_states command\n- Confirmed foreign key constraints work correctly\n- Tested rollback functionality\n- Validated hierarchical indexes performance\n- Ensured CASCADE delete behavior works as expected\n\n**Next Steps for Deployment:**\n- Run migration on staging environment\n- Perform integration tests with updated schema\n- Monitor performance of new indexes\n- Validate parent-child relationship queries",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Remove ParallelState Struct from Domain Model",
      "description": "Eliminate the ParallelState struct entirely from the Go codebase and clean up related imports",
      "details": "1. Locate and remove the ParallelState struct definition from domain models\n2. Remove all imports and references to ParallelState throughout the codebase\n3. Clean up any unused JSONB marshaling/unmarshaling methods specific to ParallelState\n4. Update any type definitions or interfaces that referenced ParallelState\n5. Use `grep -r \"ParallelState\" .` to find all occurrences and ensure complete removal\n6. Update package documentation to reflect the removal",
      "testStrategy": "Compile the project to ensure no compilation errors, run `go mod tidy` to clean dependencies, use static analysis tools like `go vet` to catch any remaining references",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Update State Struct with ParentStateID Field",
      "description": "Add ParentStateID field to the State struct and update JSON serialization tags",
      "details": "Modify the State struct to include:\n```go\ntype State struct {\n    // existing fields...\n    ParentStateID *core.ID `json:\"parent_state_id,omitempty\" db:\"parent_state_id\"`\n    // Remove any ParallelState field references\n}\n```\nEnsure proper pointer handling for nullable foreign key relationships. Update any constructor functions or factory methods that create State instances. Consider adding validation methods to ensure parent-child relationship integrity.",
      "testStrategy": "Unit tests for State struct creation, JSON marshaling/unmarshaling tests, validate that omitempty works correctly for nil ParentStateID, test database tag mapping",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement State Helper Methods",
      "description": "Add convenience methods to State struct for identifying task types and relationships",
      "details": "Implement helper methods on the State struct:\n```go\nfunc (s *State) IsParallelRoot() bool {\n    return s.ParentStateID == nil && s.ExecutionType == \"parallel\"\n}\n\nfunc (s *State) IsChildTask() bool {\n    return s.ParentStateID != nil\n}\n\nfunc (s *State) HasParent() bool {\n    return s.ParentStateID != nil\n}\n\nfunc (s *State) GetParentID() *core.ID {\n    return s.ParentStateID\n}\n```\nThese methods will simplify conditional logic throughout the codebase and improve readability.",
      "testStrategy": "Unit tests for each helper method with various State configurations, test edge cases with nil ParentStateID, verify boolean logic correctness",
      "priority": "medium",
      "dependencies": [
        3
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Update Repository INSERT/UPDATE Queries",
      "description": "Modify all database queries in the repository layer to include parent_state_id column",
      "details": "Update repository methods to handle the new parent_state_id column:\n1. Modify UpsertState method to include parent_state_id in INSERT/UPDATE statements\n2. Update all SELECT queries to include the new column\n3. Remove any JSONB operations related to parallel_state column\n4. Use proper NULL handling for parent_state_id (use sql.NullString or similar)\n5. Update query builders if using libraries like squirrel or similar\n6. Ensure proper parameter binding for prepared statements\nExample: `INSERT INTO task_states (..., parent_state_id) VALUES (..., $n)`",
      "testStrategy": "Integration tests with database, test INSERT/UPDATE operations with and without parent_state_id, verify NULL handling, test foreign key constraint violations",
      "priority": "high",
      "dependencies": [
        1,
        3
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement ListChildren Repository Method",
      "description": "Create new repository method to retrieve all child tasks for a given parent task",
      "details": "Implement ListChildren method in the repository:\n```go\nfunc (r *Repository) ListChildren(ctx context.Context, parentID core.ID) ([]*State, error) {\n    query := `SELECT * FROM task_states WHERE parent_state_id = $1 ORDER BY created_at`\n    rows, err := r.db.QueryContext(ctx, query, parentID)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    \n    var children []*State\n    for rows.Next() {\n        state := &State{}\n        err := rows.Scan(/* map to struct fields */)\n        if err != nil {\n            return nil, err\n        }\n        children = append(children, state)\n    }\n    return children, rows.Err()\n}\n```\nInclude proper error handling and context cancellation support.",
      "testStrategy": "Unit tests with mock database, integration tests with real database, test with non-existent parent IDs, test empty result sets, verify ordering by created_at",
      "priority": "medium",
      "dependencies": [
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Recursive GetTaskTree Method",
      "description": "Create repository method for recursive task tree retrieval using PostgreSQL CTE",
      "details": "Implement recursive query using PostgreSQL Common Table Expressions (CTE):\n```go\nfunc (r *Repository) GetTaskTree(ctx context.Context, rootID core.ID) ([]*State, error) {\n    query := `\n        WITH RECURSIVE task_tree AS (\n            SELECT * FROM task_states WHERE task_exec_id = $1\n            UNION ALL\n            SELECT ts.* FROM task_states ts\n            INNER JOIN task_tree tt ON ts.parent_state_id = tt.task_exec_id\n        )\n        SELECT * FROM task_tree ORDER BY created_at\n    `\n    // Implementation similar to ListChildren but with CTE\n}\n```\nEnsure proper handling of circular references and depth limits to prevent infinite recursion.",
      "testStrategy": "Test with simple parent-child relationships, test with deep nesting, test with multiple children per parent, performance testing with large task trees, test circular reference detection",
      "priority": "medium",
      "dependencies": [
        6
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Remove JSONB Marshaling Code",
      "description": "Clean up all JSONB marshaling/unmarshaling code related to ParallelState throughout the repository layer",
      "details": "1. Remove json.Marshal/Unmarshal calls for ParallelState in repository methods\n2. Remove any custom JSON handling for the parallel_state column\n3. Clean up any JSONB query operations (e.g., jsonb_extract_path, jsonb_set)\n4. Remove database scanning code that handled JSONB to ParallelState conversion\n5. Update any error handling that was specific to JSONB operations\n6. Search for patterns like `json.Marshal`, `json.Unmarshal`, `jsonb` in repository files\n7. Remove any database utility functions that were JSONB-specific",
      "testStrategy": "Code review to ensure all JSONB operations are removed, compile tests to ensure no broken references, grep search for remaining JSONB patterns, verify no performance regressions",
      "priority": "medium",
      "dependencies": [
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Update Parallel Task Creation Logic",
      "description": "Modify use case layer to create parent-child relationships instead of using ParallelState struct",
      "details": "Refactor parallel task creation in use cases:\n1. When creating parallel tasks, first create the parent task with ExecutionType=\"parallel\"\n2. Create child tasks with ParentStateID pointing to the parent\n3. Remove any ParallelState struct instantiation and population\n4. Update task creation workflows to use the new parent-child model\n5. Ensure proper transaction handling for atomic parent-child creation\n6. Update any business logic that previously relied on ParallelState fields\nExample pattern:\n```go\n// Create parent task\nparent := &State{ExecutionType: \"parallel\", ...}\nparentID := repo.UpsertState(ctx, parent)\n\n// Create children\nfor _, childConfig := range parallelConfigs {\n    child := &State{ParentStateID: &parentID, ...}\n    repo.UpsertState(ctx, child)\n}\n```",
      "testStrategy": "Integration tests for parallel task creation, verify parent-child relationships in database, test transaction rollback scenarios, test with various numbers of parallel tasks",
      "priority": "high",
      "dependencies": [
        4,
        6
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Update Progress Aggregation Logic",
      "description": "Replace JSONB parsing with SQL queries for calculating parallel task progress and status",
      "details": "Implement new progress aggregation using SQL queries:\n```go\nfunc (r *Repository) GetParallelProgress(ctx context.Context, parentID core.ID) (*ProgressInfo, error) {\n    query := `\n        SELECT \n            COUNT(*) as total_children,\n            COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,\n            COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed,\n            COUNT(CASE WHEN status = 'running' THEN 1 END) as running\n        FROM task_states \n        WHERE parent_state_id = $1\n    `\n    // Execute query and calculate percentages\n}\n```\nReplace any JSONB-based progress calculation with these SQL aggregations. Update workflow engine to use these new methods.",
      "testStrategy": "Unit tests for progress calculation logic, test with various child task statuses, verify percentage calculations, test with zero children edge case",
      "priority": "high",
      "dependencies": [
        7,
        9
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Update Workflow Completion Logic",
      "description": "Modify workflow engine to determine completion status from child task aggregates instead of ParallelState",
      "details": "Update workflow completion detection:\n1. Replace ParallelState-based completion checks with SQL aggregate queries\n2. Implement logic to mark parent tasks as completed when all children are completed\n3. Handle failure propagation from children to parent tasks\n4. Update status derivation rules based on child task states\n5. Implement proper cascading status updates\n6. Use the GetParallelProgress method to determine parent task status\nExample logic:\n```go\nif allChildrenCompleted {\n    parentState.Status = \"completed\"\n} else if anyChildFailed {\n    parentState.Status = \"failed\"\n} else if anyChildRunning {\n    parentState.Status = \"running\"\n}\n```",
      "testStrategy": "Integration tests for workflow completion scenarios, test various child completion patterns, test failure propagation, test status consistency across parent-child relationships",
      "priority": "high",
      "dependencies": [
        10
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Comprehensive Testing and Performance Validation",
      "description": "Create comprehensive test suite and performance benchmarks for the new parent-child architecture",
      "details": "Implement comprehensive testing:\n1. Unit tests for all new repository methods (ListChildren, GetTaskTree)\n2. Integration tests for parent-child relationship workflows\n3. Performance benchmarks comparing old JSONB vs new relational approach\n4. Load testing with large numbers of parallel tasks\n5. Test recursive query performance with deep task trees\n6. Memory usage comparison between old and new approaches\n7. Test database constraint enforcement (foreign keys, cascading deletes)\n8. End-to-end workflow tests to ensure feature parity\nUse Go's testing package with benchmarks:\n```go\nfunc BenchmarkGetTaskTree(b *testing.B) {\n    // Benchmark recursive queries\n}\n```\nUse tools like `go test -bench=.` and `go test -race` for comprehensive validation.",
      "testStrategy": "Run full test suite with coverage reporting, performance regression testing against baseline, stress testing with concurrent operations, validate memory usage patterns, test database performance under load",
      "priority": "medium",
      "dependencies": [
        11
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}
