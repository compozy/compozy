# Compozy Task State Architecture Refactor PRD

## Project Overview
Compozy is a CLI tool for building and managing AI agent workflows using YAML, similar to Kubernetes or GitHub Actions for AI workflows. This PRD covers a critical database architecture refactor to improve task state management.

## Problem Statement
The current task state management relies on a `parallel_state jsonb` column with a bulky `ParallelState` struct. This approach has several limitations:
- Complex JSON marshaling/parsing for parallel execution
- Difficult SQL introspection and querying
- Limited nesting capabilities
- Performance issues with JSONB operations

## Solution Overview
Migrate from the `parallel_state` JSONB column to a self-referencing `parent_state_id` design where all tasks (parallel roots and children) are stored uniformly in the `task_states` table.

## Technical Requirements

### Database Schema Changes
- Add `parent_state_id` column to `task_states` table
- Create foreign key constraint to self-reference `task_exec_id`
- Add index for performance optimization
- Drop the existing `parallel_state` column
- Add check constraints for execution type consistency
- Update existing migration files directly (dev mode)

### Go Domain Model Updates
- Remove `ParallelState` struct entirely
- Add `ParentStateID` field to `State` struct
- Implement convenience helper methods for state identification
- Update JSON serialization/deserialization

### Repository Layer Changes
- Update all INSERT/UPDATE queries to include `parent_state_id`
- Remove JSONB marshaling/unmarshaling code
- Implement new helper queries for parent-child relationships
- Add recursive query support for task trees
- Create `ListChildren` functionality

### Use Case and Workflow Engine Updates
- Modify parallel task creation logic
- Update progress aggregation to use SQL queries instead of JSONB parsing
- Implement new status derivation from child task aggregates
- Update workflow completion logic

### Testing Requirements
- Unit tests for new repository methods
- Integration tests for parent-child relationships
- Performance testing for recursive queries

## Technical Specifications

### Database Migration
- Add `parent_state_id   text      NULL`
- Add CONSTRAINT fk_parent_task
      FOREIGN KEY (parent_state_id)
      REFERENCES task_states (task_exec_id)
      ON DELETE CASCADE

### Go Struct Changes
```go
type State struct {
    // existing fields...
    ParentStateID *core.ID `json:"parent_state_id,omitempty" db:"parent_state_id"`
    // Remove ParallelState field
}
```

### New Repository Methods
- `ListChildren(ctx, parentID)` - Get all child tasks
- `GetTaskTree(ctx, rootID)` - Recursive task tree retrieval
- Updated `UpsertState` to handle parent relationships

## Success Criteria
- All existing parallel task functionality preserved
- Improved query performance for task aggregations
- Simplified codebase with removal of JSONB complexity

## Implementation Strategy
1. Update existing database migration files
2. Update Go domain models and structs
3. Refactor repository layer
4. Update use cases and workflow engine
5. Add comprehensive tests

## Dependencies
- Local development database setup
- Testing environment setup

## Risk Mitigation
- Comprehensive unit and integration testing
- Performance testing for recursive queries
