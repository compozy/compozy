{
  "$defs": {
    "ClearConfig": {
      "additionalProperties": false,
      "description": "ClearConfig controls memory clearing behavior",
      "properties": {
        "backup": {
          "description": "Backup data before clearing\nImplementation-dependent, may not be available for all backends",
          "type": "boolean"
        },
        "confirm": {
          "description": "Confirm must be true to execute clear operation\nRequired safety check to prevent accidental data loss",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EnvMap": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "ErrorTransition": {
      "additionalProperties": false,
      "description": "ErrorTransition defines error handling behavior when a task fails.",
      "properties": {
        "next": {
          "description": "ID of the error handler task\n\n- **Example**: \"handle-error\", \"retry-with-fallback\"",
          "type": "string"
        },
        "with": {
          "$ref": "#/$defs/Input",
          "description": "Error context passed to the handler\nIncludes error details: { \"error\": \"{{ .error }}\", \"attempt\": \"{{ .retryCount }}\" }"
        }
      },
      "type": "object"
    },
    "FlushConfig": {
      "additionalProperties": false,
      "description": "FlushConfig controls memory flushing behavior",
      "properties": {
        "dry_run": {
          "description": "DryRun simulates flush without actually removing data\nUseful for testing what would be removed",
          "type": "boolean"
        },
        "force": {
          "description": "Force flush even if below threshold\nBypasses normal threshold checks",
          "type": "boolean"
        },
        "max_keys": {
          "description": "Maximum number of keys to flush in one operation\nDefault: 100",
          "type": "integer"
        },
        "strategy": {
          "description": "Strategy for selecting keys to flush\nOptions: \"simple_fifo\" (oldest first), \"lru\" (least recently used)\nDefault: \"simple_fifo\"",
          "type": "string"
        },
        "threshold": {
          "description": "Threshold (0-1) for triggering flush based on memory usage\n- **Example**: 0.8 means flush when 80% full",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GlobalOpts": {
      "additionalProperties": false,
      "description": "GlobalOpts contains workflow execution options that can be configured at multiple levels.",
      "properties": {
        "heartbeat_timeout": {
          "description": "Interval for task heartbeat signals\nUsed for long-running tasks to indicate progress\n\n- **Example**: \"10s\", \"30s\", \"1m\"",
          "type": "string"
        },
        "on_error": {
          "$ref": "#/$defs/ErrorTransition",
          "description": "Error handler configuration\nDefines what happens when a task fails after all retries"
        },
        "retry_policy": {
          "$ref": "#/$defs/RetryPolicyConfig",
          "description": "Retry configuration for transient failures\nAutomatically retries failed tasks with exponential backoff"
        },
        "schedule_to_close_timeout": {
          "description": "Total timeout from scheduling to completion\nDefault: \"6m\"\n\n- **Example**: \"1m\", \"15m\", \"2h\"",
          "type": "string"
        },
        "schedule_to_start_timeout": {
          "description": "Maximum time to wait for a task to start executing\nDefault: \"1m\"\n\n- **Example**: \"30s\", \"5m\", \"1h\"",
          "type": "string"
        },
        "start_to_close_timeout": {
          "description": "Maximum time for task execution once started\nDefault: \"5m\"\n\n- **Example**: \"30s\", \"10m\", \"1h\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HealthConfig": {
      "additionalProperties": false,
      "description": "HealthConfig controls health check behavior",
      "properties": {
        "check_connectivity": {
          "description": "CheckConnectivity verifies connection to memory backend\nTests actual read/write operations",
          "type": "boolean"
        },
        "include_stats": {
          "description": "IncludeStats adds memory statistics to health check results\nProvides additional diagnostic information",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Input": {
      "type": "object"
    },
    "PathCWD": {
      "additionalProperties": false,
      "properties": {
        "path": {
          "description": "Path holds the absolute working directory.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RetryPolicyConfig": {
      "additionalProperties": false,
      "description": "RetryPolicyConfig defines automatic retry behavior for failed tasks.",
      "properties": {
        "backoff_coefficient": {
          "description": "Multiplier for exponential backoff\n- **Default:** `2.0` (doubles each time)\n- **Example:** `1.5`, `2.0`, `3.0`",
          "type": "number"
        },
        "initial_interval": {
          "description": "Initial delay before first retry\n- **Default:** `\"1s\"`\n- **Example:** `\"500ms\"`, `\"2s\"`, `\"1m\"`",
          "type": "string"
        },
        "maximum_attempts": {
          "description": "Maximum retry attempts\n- **Default:** `3`\n- **Example:** `5` for critical operations",
          "type": "integer"
        },
        "maximum_interval": {
          "description": "Maximum delay between retries\n- **Default:** `\"1m\"`\n- **Example:** `\"30s\"`, `\"5m\"`, `\"1h\"`",
          "type": "string"
        },
        "non_retryable_error_types": {
          "description": "Error types that should not trigger retries\n- **Example:** `[\"ValidationError\", \"AuthenticationError\"]`",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Schema": {
      "type": "object"
    },
    "SignalConfig": {
      "additionalProperties": false,
      "description": "SignalConfig defines the signal to be sent",
      "properties": {
        "id": {
          "description": "ID is the unique identifier for the signal\nWait tasks with matching wait_for values will receive this signal\n- **Example**: \"user-approved\", \"payment-completed\", \"data-ready\"",
          "type": "string"
        },
        "payload": {
          "description": "Payload contains data to send with the signal\nThis data is available to the receiving wait task for processing\nCan be any JSON-serializable data structure\n- **Example**: { \"user_id\": \"123\", \"status\": \"approved\", \"timestamp\": \"2024-01-01T00:00:00Z\" }",
          "type": "object"
        }
      },
      "type": "object"
    },
    "StatsConfig": {
      "additionalProperties": false,
      "description": "StatsConfig controls statistics gathering",
      "properties": {
        "group_by": {
          "description": "GroupBy field for aggregating statistics\n- **Example**: \"user\", \"session\", \"workflow\"\nGroups stats by the specified field in stored data",
          "type": "string"
        },
        "include_content": {
          "description": "IncludeContent includes actual memory content in stats\nWARNING: May return large amounts of data",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SuccessTransition": {
      "additionalProperties": false,
      "description": "SuccessTransition defines the next task to execute after successful completion.",
      "properties": {
        "next": {
          "description": "ID of the next task to execute\n- **Example:** `\"process-results\"`, `\"send-notification\"`",
          "type": "string"
        },
        "with": {
          "$ref": "#/$defs/Input",
          "description": "Input parameters to pass to the next task\n- **Supports:** Template expressions like `{ \"data\": \"{{ .output.result }}\" }`"
        }
      },
      "type": "object"
    }
  },
  "$id": "https://schemas.compozy.dev/task.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "description": "Config is the main task configuration structure in Compozy.",
  "properties": {
    "action": {
      "description": "Action identifier that describes what this task does\nUsed for logging and debugging purposes\n- **Example**: \"process-user-data\", \"send-notification\"",
      "type": "string"
    },
    "agent": {
      "$ref": "agent.json",
      "description": "Agent configuration for AI-powered task execution\nOnly used when the task needs to interact with an LLM agent\nMutually exclusive with Tool field\n$ref: schema://agents"
    },
    "batch": {
      "description": "Batch size for processing items in groups (0 = no batching)\nUseful for rate limiting or managing resource usage\n- **Example**: 10 means process 10 items at a time",
      "type": "integer"
    },
    "batch_size": {
      "description": "BatchSize for operations that process multiple keys\nControls how many keys are processed in each batch\nDefault: 100, Maximum: 10,000",
      "type": "integer"
    },
    "clear_config": {
      "$ref": "#/$defs/ClearConfig",
      "description": "Configuration for clear operations\nOnly used when operation is \"clear\""
    },
    "condition": {
      "description": "CEL expression for conditional task execution or routing decisions\nTask only executes if condition evaluates to true\n- **Example**: \"input.status == 'approved' \u0026\u0026 input.amount \u003e 1000\"",
      "type": "string"
    },
    "config": {
      "$ref": "#/$defs/GlobalOpts",
      "description": "Global configuration options inherited from parent contexts\nIncludes provider settings, API keys, and other global parameters"
    },
    "env": {
      "$ref": "#/$defs/EnvMap",
      "description": "Environment variables available during task execution\nCan override or extend workflow-level environment variables\n- **Example**: { \"API_KEY\": \"{{ .env.SECRET_KEY }}\" }"
    },
    "file_path": {
      "description": "Absolute file path where this task configuration was loaded from\nSet automatically during configuration loading",
      "type": "string"
    },
    "filter": {
      "description": "Filter is an optional CEL expression to filter items before processing\nEach item is available as 'item' in the expression\n- **Example**: \"item.status != 'inactive'\" or \"item.age \u003e 18\"",
      "type": "string"
    },
    "final": {
      "description": "Marks this task as a terminal node in the workflow\nNo subsequent tasks will execute after a final task",
      "type": "boolean"
    },
    "flush_config": {
      "$ref": "#/$defs/FlushConfig",
      "description": "Configuration for flush operations\nOnly used when operation is \"flush\""
    },
    "health_config": {
      "$ref": "#/$defs/HealthConfig",
      "description": "Configuration for health check operations\nOnly used when operation is \"health\""
    },
    "id": {
      "description": "Unique identifier for the task instance within a workflow\nMust be unique within the workflow scope",
      "type": "string"
    },
    "index_var": {
      "description": "IndexVar is the variable name for the current index (default: \"index\")\nAvailable in task templates as {{ .index }} or custom name\nZero-based index of the current item",
      "type": "string"
    },
    "input": {
      "$ref": "#/$defs/Schema",
      "description": "Schema definition for validating task input parameters\nFollows JSON Schema specification for type validation\nFormat:\n  type: object\n  properties:\n    user_id: { type: string, description: \"User identifier\" }\n  required: [\"user_id\"]"
    },
    "item_var": {
      "description": "ItemVar is the variable name for the current item (default: \"item\")\nAvailable in task templates as {{ .item }} or custom name\n- **Example**: Set to \"user\" to access as {{ .user }} in templates",
      "type": "string"
    },
    "items": {
      "description": "Items is a template expression that evaluates to an array\nThe expression should resolve to a list of items to iterate over\n- **Example**: \"{{ .workflow.input.users }}\" or \"{{ range(1, 10) }}\"",
      "type": "string"
    },
    "key_template": {
      "description": "KeyTemplate is a template expression for the memory key\nSupports template variables for dynamic key generation\n- **Example**: \"user:{{ .workflow.input.user_id }}:profile\"",
      "type": "string"
    },
    "max_keys": {
      "description": "MaxKeys limits the number of keys processed\nSafety limit to prevent runaway operations\nDefault: 1,000, Maximum: 50,000",
      "type": "integer"
    },
    "max_workers": {
      "description": "MaxWorkers limits the number of concurrent task executions\n0 means no limit (all tasks run concurrently)\n- **Example**: 5 means at most 5 tasks run at the same time",
      "type": "integer"
    },
    "memory_ref": {
      "description": "MemoryRef identifies which memory store to use\nReferences a memory configuration defined at the project level\n- **Example**: \"user-sessions\", \"workflow-state\", \"cache\"",
      "type": "string"
    },
    "mode": {
      "description": "Mode determines if items are processed in parallel or sequentially\nDefaults to \"parallel\"\nOptions: parallel, sequential",
      "type": "string"
    },
    "on_error": {
      "$ref": "#/$defs/ErrorTransition",
      "description": "Error handling configuration\nDefines fallback behavior when task execution fails\nCan specify error task ID or retry configuration"
    },
    "on_success": {
      "$ref": "#/$defs/SuccessTransition",
      "description": "Task execution control\nDefines what happens after successful task completion\nCan specify next task ID or conditional routing"
    },
    "on_timeout": {
      "description": "OnTimeout specifies the next task to execute if the wait times out\nUses the timeout value from BaseConfig\nIf not specified, the task fails on timeout",
      "type": "string"
    },
    "operation": {
      "description": "Operation type to perform on memory\nRequired field that determines the action to take",
      "type": "string"
    },
    "output": {
      "$ref": "#/$defs/Schema",
      "description": "Schema definition for validating task output data\nEnsures task results conform to expected structure\nUses same format as InputSchema"
    },
    "outputs": {
      "$ref": "#/$defs/Input",
      "description": "Output mappings that define what data this task exposes to subsequent tasks\nUses template expressions to transform task results\n- **Example**: { \"processed_data\": \"{{ .task.output.result }}\" }"
    },
    "payload": {
      "description": "Payload data for write/append operations\nCan be any JSON-serializable data structure\nRequired for write and append operations"
    },
    "processor": {
      "$ref": "#/$defs/Config",
      "description": "Processor is an optional task configuration to process received signals\nAllows custom handling of signal data before continuing\nThe processor receives the signal payload as input\n$ref: inline:#"
    },
    "resource": {
      "description": "Resource reference for the task\nFormat: \"compozy:task:\u003cname\u003e\" (e.g., \"compozy:task:process-data\")",
      "type": "string"
    },
    "retries": {
      "description": "Number of retry attempts for failed task executions\nDefault: 0 (no retries)",
      "type": "integer"
    },
    "routes": {
      "description": "Routes maps condition values to task IDs or inline task configurations\nThe condition field in BaseConfig is evaluated, and its result is used\nas the key to select the appropriate route\nValues can be:\n  - Task ID (string): References an existing task\n  - Inline task config (object): Defines task configuration directly\n- **Example**:\n  routes:\n    approved: \"process-payment\"  # Task ID reference\n    rejected:                    # Inline task config\n      type: basic\n      agent: { id: rejection-handler }\n    pending: \"wait-for-approval\"",
      "type": "object"
    },
    "signal": {
      "$ref": "#/$defs/SignalConfig",
      "description": "Signal configuration containing the signal ID and payload"
    },
    "sleep": {
      "description": "Sleep duration after task completion\nFormat: \"5s\", \"1m\", \"500ms\", \"1h30m\"\nUseful for rate limiting or giving external systems time to process",
      "type": "string"
    },
    "stats_config": {
      "$ref": "#/$defs/StatsConfig",
      "description": "Configuration for statistics operations\nOnly used when operation is \"stats\""
    },
    "strategy": {
      "description": "Strategy determines how the parallel execution handles task completion\nDefaults to \"wait_all\" if not specified\nOptions: wait_all, fail_fast, best_effort, race",
      "type": "string"
    },
    "task": {
      "$ref": "#/$defs/Config",
      "description": "Task template for collection tasks\nThis configuration is replicated for each item in the collection\nThe item and index are available as template variables\n$ref: inline:#"
    },
    "tasks": {
      "description": "Tasks array for parallel, composite, and collection tasks\nContains the list of sub-tasks to execute\nFor parallel: tasks run concurrently\nFor composite: tasks run sequentially\nFor collection: not used (use Task field instead)\n$ref: inline:#",
      "items": {
        "$ref": "#/$defs/Config"
      },
      "type": "array"
    },
    "timeout": {
      "description": "Maximum execution time for parallel or composite tasks\nFormat: \"30s\", \"5m\", \"1h\"\nTask will be canceled if it exceeds this duration",
      "type": "string"
    },
    "tool": {
      "$ref": "tool.json",
      "description": "Tool configuration for executing specific tool operations\nUsed when the task needs to execute a predefined tool\nMutually exclusive with Agent field\n$ref: schema://tools"
    },
    "type": {
      "description": "Type of task that determines execution behavior\nIf not specified, defaults to \"basic\"",
      "type": "string"
    },
    "wait_for": {
      "description": "WaitFor specifies the signal ID to wait for\nThe task will pause until a signal with this ID is received\nMust match the ID used in a SignalTask\n- **Example**: \"user-approved\", \"payment-completed\"",
      "type": "string"
    },
    "with": {
      "$ref": "#/$defs/Input",
      "description": "Input parameters passed to the task at execution time\nCan include references to workflow inputs, previous task outputs, etc.\n- **Example**: { \"user_id\": \"{{ .workflow.input.user_id }}\" }"
    }
  },
  "type": "object",
  "yamlCompatible": true
}