{
  "$defs": {
    "LLMRateLimitConfig": {
      "additionalProperties": false,
      "description": "LLMRateLimitConfig defines shared throttling settings for provider calls.",
      "properties": {
        "default_concurrency": {
          "description": "DefaultConcurrency limits concurrent requests per provider when overrides are absent.\nZero defers to registry defaults; values beyond provider quotas are discouraged.",
          "type": "integer"
        },
        "default_queue_size": {
          "description": "DefaultQueueSize bounds queued work waiting for a concurrency slot.\nZero disables queuing and causes immediate rejection when the pool is saturated.",
          "type": "integer"
        },
        "default_requests_per_minute": {
          "description": "DefaultRequestsPerMinute throttles average request throughput when per-provider overrides\nare not supplied. Zero disables request-rate shaping.",
          "type": "integer"
        },
        "default_tokens_per_minute": {
          "description": "DefaultTokensPerMinute constrains total tokens consumed per minute when overrides are absent.\nZero disables token-based shaping.",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "per_provider_limits": {
          "additionalProperties": {
            "$ref": "#/$defs/ProviderRateLimitConfig"
          },
          "description": "PerProviderLimits customizes concurrency and queue depth for specific providers.\nKeys should match provider names (e.g., \"openai\", \"groq\").",
          "type": "object"
        }
      },
      "type": "object"
    },
    "ProviderRateLimitConfig": {
      "additionalProperties": false,
      "description": "ProviderRateLimitConfig describes concurrency limits for a single provider.",
      "properties": {
        "concurrency": {
          "type": "integer"
        },
        "queue_size": {
          "type": "integer"
        },
        "requests_per_minute": {
          "description": "RequestsPerMinute limits average throughput; zero disables the limiter.",
          "type": "integer"
        },
        "tokens_per_minute": {
          "description": "TokensPerMinute constrains the total tokens consumed per minute; zero disables shaping.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ToolCallCapsConfig": {
      "additionalProperties": false,
      "description": "ToolCallCapsConfig captures default and per-tool invocation caps.",
      "properties": {
        "default": {
          "type": "integer"
        },
        "overrides": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "$id": "config-llm.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "description": "LLMConfig contains LLM service configuration.",
  "properties": {
    "allowed_mcp_names": {
      "description": "AllowedMCPNames restricts which MCP servers/tools are considered eligible\nfor advertisement and invocation. When empty, all discovered MCP tools\nare eligible.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "context_compaction_cooldown": {
      "description": "ContextCompactionCooldown specifies how many loop iterations to wait between compaction attempts.",
      "type": "integer"
    },
    "context_compaction_threshold": {
      "description": "ContextCompactionThreshold expresses the context usage ratio (0-1) that triggers compaction.",
      "type": "number"
    },
    "context_warning_thresholds": {
      "description": "ContextWarningThresholds defines usage ratios (0-1) that trigger telemetry warnings.",
      "items": {
        "type": "number"
      },
      "type": "array"
    },
    "default_frequency_penalty": {
      "description": "DefaultFrequencyPenalty sets the default penalty for token frequency.\nPositive values reduce repetition. Range: -2.0 to 2.0.\nDefault: 0.0",
      "type": "number"
    },
    "default_presence_penalty": {
      "description": "DefaultPresencePenalty sets the default penalty for token presence.\nPositive values encourage talking about new topics. Range: -2.0 to 2.0.\nDefault: 0.0",
      "type": "number"
    },
    "default_seed": {
      "description": "DefaultSeed sets the default seed for reproducible outputs.\nValue of 0 means non-deterministic (no seed).\nDefault: 0",
      "type": "integer"
    },
    "default_top_p": {
      "description": "DefaultTopP sets the default nucleus sampling threshold for all LLM requests.\nValue of 0 means use the provider's default. Range: 0.0 to 1.0.\nDefault: 0.0",
      "type": "number"
    },
    "denied_mcp_names": {
      "description": "DeniedMCPNames excludes MCP servers/tools from advertisement and invocation.\nEntries take precedence over the allow list.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "enable_context_compaction": {
      "description": "EnableContextCompaction toggles summary-based compaction when context usage nears limits.",
      "type": "boolean"
    },
    "enable_dynamic_prompt_state": {
      "description": "EnableDynamicPromptState toggles inclusion of orchestrator loop state inside the system prompt.",
      "type": "boolean"
    },
    "enable_loop_restarts": {
      "description": "EnableLoopRestarts toggles whether the orchestrator may restart the loop when no progress is detected.",
      "type": "boolean"
    },
    "enable_progress_tracking": {
      "description": "EnableProgressTracking toggles loop progress tracking to detect stalled\nconversations or repeated tool usage without advancement.\nDefault: false",
      "type": "boolean"
    },
    "fail_on_mcp_registration_error": {
      "description": "FailOnMCPRegistrationError enforces fail-fast behavior when registering\nMCP configurations sourced from agents/projects. When true, MCP\nregistration failures cause service initialization to error.",
      "type": "boolean"
    },
    "finalize_output_retries": {
      "description": "FinalizeOutputRetryAttempts overrides the number of retries allowed when final structured output is invalid.",
      "type": "integer"
    },
    "max_concurrent_tools": {
      "description": "MaxConcurrentTools limits the number of tools that can execute in parallel.\n\nControls resource usage and prevents overwhelming downstream services.\nHigher values improve throughput, lower values reduce resource contention.\nDefault: 10",
      "type": "integer"
    },
    "max_consecutive_successes": {
      "description": "MaxConsecutiveSuccesses controls how many consecutive successful tool calls\nwithout progress are tolerated before the orchestrator halts the loop.\nDefault: 3 (orchestrator default)",
      "type": "integer"
    },
    "max_loop_restarts": {
      "description": "MaxLoopRestarts caps how many restarts are attempted per loop execution.",
      "type": "integer"
    },
    "max_sequential_tool_errors": {
      "description": "MaxSequentialToolErrors caps how many sequential tool execution/content errors\nare tolerated for the same tool before aborting the task. Set to 0 to use\nthe orchestrator's built-in default.\nDefault: 10 (registry default)",
      "type": "integer"
    },
    "max_tool_iterations": {
      "description": "MaxToolIterations caps the maximum number of tool-iteration loops per request.\n\nThis acts as a global default and can be overridden by model-specific configuration\nin project files. Set to 0 to use the orchestrator's built-in default.\nDefault: 100 (registry default)",
      "type": "integer"
    },
    "mcp_client_timeout": {
      "description": "MCPClientTimeout sets the HTTP client timeout for MCP proxy communication.",
      "type": "integer"
    },
    "mcp_header_template_strict": {
      "description": "MCPHeaderTemplateStrict enables strict template validation for MCP HTTP headers.\nWhen true, allows only simple lookups (no pipelines/function calls/inclusions).\nDefault: false",
      "type": "boolean"
    },
    "mcp_readiness_poll_interval": {
      "description": "MCPReadinessPollInterval sets how often to poll the proxy for MCP connection status.\nDefault: 200ms",
      "type": "integer"
    },
    "mcp_readiness_timeout": {
      "description": "MCPReadinessTimeout bounds how long to wait for MCP clients to connect during setup.\nDefault: 60s",
      "type": "integer"
    },
    "no_progress_threshold": {
      "description": "NoProgressThreshold configures how many loop iterations without progress are\ntolerated before the orchestrator considers the interaction stalled.\nDefault: 3 (orchestrator default)",
      "type": "integer"
    },
    "provider_timeout": {
      "description": "ProviderTimeout sets the maximum duration allowed for a single provider invocation.\n\nApplies to each GenerateContent call (including retries) to keep the orchestrator responsive.\nDefault: 5m",
      "type": "integer"
    },
    "proxy_url": {
      "description": "ProxyURL specifies the MCP proxy server endpoint.\n\nThe proxy handles:\n  - MCP server connections\n  - Tool discovery and routing\n  - Protocol translation\nDefault: \"\" (empty; supply MCP proxy URL explicitly or derive from MCPProxy.BaseURL)",
      "type": "string"
    },
    "rate_limiting": {
      "$ref": "#/$defs/LLMRateLimitConfig",
      "description": "RateLimiting configures concurrency throttles and provider queues.\n\nThe limiter guards upstream APIs from bursty traffic and honors Retry-After headers.\nDefaults ensure conservative limits that can be tuned per provider."
    },
    "register_mcps": {
      "description": "RegisterMCPs contains additional MCP configurations to be registered\nwith the MCP proxy at runtime. Represented as a generic slice to avoid\nimport cycles with engine packages.",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "restart_stall_threshold": {
      "description": "RestartStallThreshold controls how many stalled iterations trigger a loop restart.",
      "type": "integer"
    },
    "retry_attempts": {
      "description": "RetryAttempts configures the number of retry attempts for LLM operations.\n\nControls how many times the orchestrator will retry failed LLM requests\nbefore giving up. Higher values improve reliability but may increase latency.\nDefault: 3",
      "type": "integer"
    },
    "retry_backoff_base": {
      "description": "RetryBackoffBase sets the base delay for exponential backoff retry strategy.\n\nThe actual delay will be calculated as base * (2 ^ attempt) with optional jitter.\nLower values retry faster, higher values reduce server load.\nDefault: 100ms",
      "type": "integer"
    },
    "retry_backoff_max": {
      "description": "RetryBackoffMax limits the maximum delay between retry attempts.\n\nPrevents exponential backoff from creating extremely long delays.\nShould be set based on user tolerance for response time.\nDefault: 10s",
      "type": "integer"
    },
    "retry_jitter": {
      "description": "RetryJitter enables random jitter in retry delays to avoid thundering herd.\n\nWhen enabled, adds randomness to retry delays to prevent all clients\nfrom retrying simultaneously. Improves system stability under load.\nDefault: true",
      "type": "boolean"
    },
    "retry_jitter_percent": {
      "description": "RetryJitterPercent controls jitter strength when retry_jitter is enabled.",
      "type": "integer"
    },
    "structured_output_retries": {
      "description": "StructuredOutputRetryAttempts controls how many validation retries are attempted before failing.\n\nWhen set to 0, the orchestrator default (2) is used.",
      "type": "integer"
    },
    "tool_call_caps": {
      "$ref": "#/$defs/ToolCallCapsConfig",
      "description": "ToolCallCaps configures per-tool invocation caps enforced during orchestration."
    }
  },
  "title": "LLM Configuration",
  "type": "object",
  "yamlCompatible": true
}
