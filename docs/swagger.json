{
    "swagger": "2.0",
    "info": {
        "description": "Compozy is a workflow orchestration engine for AI agents, tasks, and tools",
        "title": "Compozy API",
        "termsOfService": "https://github.com/compozy/compozy",
        "contact": {
            "name": "Compozy Support",
            "url": "https://github.com/compozy/compozy",
            "email": "support@compozy.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/compozy/compozy/blob/main/LICENSE"
        },
        "version": "1.0"
    },
    "basePath": "/api/v0",
    "paths": {
        "/admin/mcps": {
            "get": {
                "description": "Get a list of all configured Model Context Protocol servers",
                "produces": ["application/json"],
                "tags": ["MCP Management"],
                "summary": "List all MCP definitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of MCPs with their status",
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.ListMCPsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new Model Context Protocol server configuration",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["MCP Management"],
                "summary": "Add a new MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "MCP definition to add",
                        "name": "mcp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDefinition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MCP added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "MCP already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/mcps/{name}": {
            "get": {
                "description": "Get details of a specific Model Context Protocol server configuration",
                "produces": ["application/json"],
                "tags": ["MCP Management"],
                "summary": "Get an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP details with status",
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDetailsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing Model Context Protocol server configuration",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["MCP Management"],
                "summary": "Update an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated MCP definition",
                        "name": "mcp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a Model Context Protocol server configuration",
                "produces": ["application/json"],
                "tags": ["MCP Management"],
                "summary": "Remove an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP removed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/tools": {
            "get": {
                "description": "Get a list of all tools available from all connected MCP servers",
                "produces": ["application/json"],
                "tags": ["MCP Tools"],
                "summary": "List all available tools",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available tools",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/tools/call": {
            "post": {
                "description": "Execute a specific tool with provided arguments on the specified MCP server",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["MCP Tools"],
                "summary": "Call a tool on an MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Tool call request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.CallToolRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool execution result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP or tool not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Tool execution failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/append": {
            "post": {
                "description": "Append messages to existing memory content",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Append to memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and messages to append",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.AppendMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory appended successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.AppendResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/clear": {
            "post": {
                "description": "Clear all memory content with confirmation",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Clear memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and clear options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.ClearMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory cleared successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.ClearMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/delete": {
            "post": {
                "description": "Delete all memory content for a specific key",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Delete memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.DeleteMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.DeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/flush": {
            "post": {
                "description": "Flush memory content with optional summarization. The actual_strategy field in the response indicates which flush strategy was used.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Flush memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and flush options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.FlushMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory flushed successfully. Response includes actual_strategy field showing which strategy was used",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.FlushMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/health": {
            "get": {
                "description": "Get health status and metrics for memory",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Check memory health",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Include detailed stats",
                        "name": "include_stats",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory health retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.HealthMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/read": {
            "get": {
                "description": "Retrieve memory content for a specific memory reference and key",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Read memory content",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Maximum number of messages to return (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Number of messages to skip (for pagination)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory read successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "has_more": {
                                                    "type": "boolean"
                                                },
                                                "key": {
                                                    "type": "string"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "content": {
                                                                "type": "string"
                                                            },
                                                            "role": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Memory not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/stats": {
            "get": {
                "description": "Retrieve detailed statistics about memory content",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Get memory statistics",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 100,
                        "description": "Limit for role distribution calculation (default: 100, max: 10000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Offset for role distribution calculation",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory statistics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.StatsMemoryOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v0/memory/{memory_ref}/write": {
            "post": {
                "description": "Write or replace memory content for a specific memory reference and key",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory"],
                "summary": "Write memory content",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and messages to write",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.WriteMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory written successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.WriteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "description": "Trigger workflows by sending events",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["events"],
                "summary": "Send event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wfrouter.EventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.EventResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows": {
            "get": {
                "description": "Retrieve a list of all workflow executions across all workflows",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["workflows"],
                "summary": "List all workflow executions",
                "responses": {
                    "200": {
                        "description": "Workflow executions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "executions": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/workflow.State"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}": {
            "get": {
                "description": "Retrieve a specific workflow execution by its execution ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["executions"],
                "summary": "Get workflow execution by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/workflow.State"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/cancel": {
            "post": {
                "description": "Cancel a specific workflow execution by its execution ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["executions"],
                "summary": "Cancel workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution canceled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/pause": {
            "post": {
                "description": "Pause a specific workflow execution by its execution ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["executions"],
                "summary": "Pause workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution paused successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/resume": {
            "post": {
                "description": "Resume a specific workflow execution by its execution ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["executions"],
                "summary": "Resume workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution resumed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/signals": {
            "post": {
                "description": "Send a signal with payload to a specific workflow execution",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["executions"],
                "summary": "Send signal to workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signal data",
                        "name": "signal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wfrouter.SignalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signal sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.SignalResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID or signal data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/health": {
            "get": {
                "description": "Returns comprehensive health information for the memory system",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory", "health"],
                "summary": "Get memory system health",
                "responses": {
                    "200": {
                        "description": "Memory system is healthy",
                        "schema": {
                            "$ref": "#/definitions/memory.SystemHealth"
                        }
                    },
                    "503": {
                        "description": "Memory system is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/memory.SystemHealth"
                        }
                    }
                }
            }
        },
        "/memory/health/{memory_id}": {
            "get": {
                "description": "Returns health information for a specific memory instance",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["memory", "health"],
                "summary": "Get memory instance health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Memory Instance ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory instance health retrieved",
                        "schema": {
                            "$ref": "#/definitions/memory.InstanceHealth"
                        }
                    },
                    "404": {
                        "description": "Memory instance not found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Exposes application metrics in Prometheus exposition format.\nThis endpoint is used by Prometheus servers to scrape metrics.\n\nThe response is in text/plain format following the Prometheus\nexposition format specification.\n\nAvailable metrics include:\n- HTTP request rates and latencies\n- Temporal workflow execution metrics\n- System health information",
                "produces": ["text/plain"],
                "tags": ["Operations"],
                "summary": "Prometheus metrics endpoint",
                "responses": {
                    "200": {
                        "description": "Metrics in Prometheus format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Monitoring service unavailable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Retrieve a list of all scheduled workflows with their current status and override information",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["schedules"],
                "summary": "List all scheduled workflows",
                "responses": {
                    "200": {
                        "description": "Schedules retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schedules/{workflow_id}": {
            "get": {
                "description": "Retrieve detailed information about a specific scheduled workflow including YAML configuration",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["schedules"],
                "summary": "Get schedule by workflow ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a scheduled workflow from Temporal. The schedule will be recreated on the next YAML reload if still defined.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["schedules"],
                "summary": "Delete schedule",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Schedule deleted successfully"
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a scheduled workflow's enabled state and/or cron expression. At least one field must be provided. This creates a temporary override that persists until the next YAML reload.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["schedules"],
                "summary": "Update schedule",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request with at least one field (enabled or cron)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedulerouter.UpdateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "description": "Retrieve a list of all available workflow configurations",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["workflows"],
                "summary": "List all workflows",
                "responses": {
                    "200": {
                        "description": "Workflows retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "workflows": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/workflow.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}": {
            "get": {
                "description": "Retrieve a specific workflow configuration by its ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["workflows"],
                "summary": "Get workflow by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/workflow.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/agents": {
            "get": {
                "description": "Retrieve a list of all available agent configurations",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["agents"],
                "summary": "List all agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agents retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "agents": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/agent.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/agents/{agent_id}": {
            "get": {
                "description": "Retrieve a specific agent configuration by its ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["agents"],
                "summary": "Get agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"code-assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agent.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/executions": {
            "get": {
                "description": "Retrieve all executions for a specific workflow",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["workflows"],
                "summary": "List executions by workflow ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow executions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "executions": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/workflow.State"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Trigger the execution of a workflow with provided input data",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["workflows"],
                "summary": "Execute workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Workflow input data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Workflow triggered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.ExecuteWorkflowResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input or workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tasks": {
            "get": {
                "description": "Retrieve a list of all tasks within a specific workflow",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["tasks"],
                "summary": "List tasks for a workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tasks": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/task.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tasks/{task_id}": {
            "get": {
                "description": "Retrieve a specific task configuration by its ID within a workflow",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["tasks"],
                "summary": "Get task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"validate-input\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/task.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow or task ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tools": {
            "get": {
                "description": "Retrieve a list of all available tool configurations",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["tools"],
                "summary": "List all tools",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tools retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tools": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/tool.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tools/{tool_id}": {
            "get": {
                "description": "Retrieve a specific tool configuration by its ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["tools"],
                "summary": "Get tool by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"format-code\"",
                        "description": "Tool ID",
                        "name": "tool_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tool.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid tool ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Tool not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/{name}/sse": {
            "get": {
                "description": "Proxy Server-Sent Events requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy SSE requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{name}/sse/{path}": {
            "get": {
                "description": "Proxy Server-Sent Events requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy SSE requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{name}/stream": {
            "get": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{name}/stream/{path}": {
            "get": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "tags": ["MCP Proxy"],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "agent.ActionConfig": {
            "type": "object",
            "required": ["prompt"],
            "properties": {
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "json_mode": {
                    "type": "boolean"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "prompt": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "agent.Config": {
            "type": "object",
            "required": ["config", "id", "instructions"],
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agent.ActionConfig"
                    }
                },
                "config": {
                    "$ref": "#/definitions/core.ProviderConfig"
                },
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "id": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "json_mode": {
                    "type": "boolean"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "description": "Memory configuration - simplified single format\nmemory:\n  - id: user_memory\n    key: \"user:{{.workflow.input.user_id}}\"\n    mode: \"read-write\"  # optional, defaults to \"read-write\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "resource": {
                    "type": "string"
                },
                "tools": {
                    "description": "When defined here, the agent will have toolChoice defined as \"auto\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "core.Author": {
            "type": "object",
            "properties": {
                "contributors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Contributor"
                    }
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "core.ComponentType": {
            "type": "string",
            "enum": ["workflow", "task", "agent", "tool", "log"],
            "x-enum-varnames": [
                "ComponentWorkflow",
                "ComponentTask",
                "ComponentAgent",
                "ComponentTool",
                "ComponentLog"
            ]
        },
        "core.Contributor": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "core.EnvMap": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "core.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "core.ErrorTransition": {
            "type": "object",
            "properties": {
                "next": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "core.GlobalOpts": {
            "type": "object",
            "properties": {
                "heartbeat_timeout": {
                    "type": "string"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "retry_policy": {
                    "$ref": "#/definitions/core.RetryPolicyConfig"
                },
                "schedule_to_close_timeout": {
                    "type": "string"
                },
                "schedule_to_start_timeout": {
                    "type": "string"
                },
                "start_to_close_timeout": {
                    "type": "string"
                }
            }
        },
        "core.Input": {
            "type": "object",
            "additionalProperties": {}
        },
        "core.MemoryReference": {
            "type": "object",
            "required": ["id", "key"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "Key is a template string that resolves to the actual memory instance key.\ne.g., \"support-{{ .workflow.input.conversationId }}\"",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines access permissions (e.g., \"read-write\", \"read-only\").",
                    "type": "string",
                    "enum": ["read-write", "read-only"]
                }
            }
        },
        "core.Output": {
            "type": "object",
            "additionalProperties": {}
        },
        "core.PathCWD": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path holds the absolute working directory.",
                    "type": "string"
                }
            }
        },
        "core.PromptParams": {
            "type": "object",
            "properties": {
                "max_length": {
                    "type": "integer"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "min_length": {
                    "type": "integer"
                },
                "repetition_penalty": {
                    "type": "number"
                },
                "seed": {
                    "type": "integer"
                },
                "stop_words": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "temperature": {
                    "type": "number"
                },
                "top_k": {
                    "type": "integer"
                },
                "top_p": {
                    "type": "number"
                }
            }
        },
        "core.ProviderConfig": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_url": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/core.PromptParams"
                },
                "provider": {
                    "$ref": "#/definitions/core.ProviderName"
                }
            }
        },
        "core.ProviderName": {
            "type": "string",
            "enum": ["openai", "groq", "anthropic", "google", "ollama", "deepseek", "xai", "mock"],
            "x-enum-comments": {
                "ProviderMock": "Mock provider for testing"
            },
            "x-enum-varnames": [
                "ProviderOpenAI",
                "ProviderGroq",
                "ProviderAnthropic",
                "ProviderGoogle",
                "ProviderOllama",
                "ProviderDeepSeek",
                "ProviderXAI",
                "ProviderMock"
            ]
        },
        "core.RetryPolicyConfig": {
            "type": "object",
            "properties": {
                "backoff_coefficient": {
                    "type": "number"
                },
                "initial_interval": {
                    "type": "string"
                },
                "maximum_attempts": {
                    "type": "integer"
                },
                "maximum_interval": {
                    "type": "string"
                },
                "non_retryable_error_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "core.StatusType": {
            "type": "string",
            "enum": [
                "PENDING",
                "RUNNING",
                "SUCCESS",
                "FAILED",
                "TIMED_OUT",
                "CANCELED",
                "WAITING",
                "PAUSED"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusRunning",
                "StatusSuccess",
                "StatusFailed",
                "StatusTimedOut",
                "StatusCanceled",
                "StatusWaiting",
                "StatusPaused"
            ]
        },
        "core.SuccessTransition": {
            "type": "object",
            "properties": {
                "next": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "mcp.Config": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "max_sessions": {
                    "type": "integer"
                },
                "proto": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "start_timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "transport": {
                    "$ref": "#/definitions/mcpproxy.TransportType"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "mcpproxy.CallToolRequest": {
            "type": "object",
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "mcpName": {
                    "type": "string"
                },
                "toolName": {
                    "type": "string"
                }
            }
        },
        "mcpproxy.ConnectionStatus": {
            "type": "string",
            "enum": ["disconnected", "connecting", "connected", "error"],
            "x-enum-varnames": [
                "StatusDisconnected",
                "StatusConnecting",
                "StatusConnected",
                "StatusError"
            ]
        },
        "mcpproxy.ListMCPsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcpproxy.MCPDetailsResponse"
                    }
                }
            }
        },
        "mcpproxy.MCPDefinition": {
            "type": "object",
            "required": ["name", "transport"],
            "properties": {
                "allowedIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authTokens": {
                    "description": "Security and access control",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autoReconnect": {
                    "description": "Behavior configuration",
                    "type": "boolean"
                },
                "command": {
                    "description": "Stdio transport configuration",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "healthCheckEnabled": {
                    "type": "boolean"
                },
                "healthCheckInterval": {
                    "$ref": "#/definitions/time.Duration"
                },
                "logEnabled": {
                    "type": "boolean"
                },
                "maxReconnects": {
                    "type": "integer"
                },
                "name": {
                    "description": "Core identification",
                    "type": "string",
                    "minLength": 1
                },
                "reconnectDelay": {
                    "$ref": "#/definitions/time.Duration"
                },
                "requireAuth": {
                    "type": "boolean"
                },
                "tags": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "toolFilter": {
                    "description": "Tool filtering",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcpproxy.ToolFilter"
                        }
                    ]
                },
                "transport": {
                    "$ref": "#/definitions/mcpproxy.TransportType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "description": "HTTP-based transport configuration (SSE and streamable-http)",
                    "type": "string"
                }
            }
        },
        "mcpproxy.MCPDetailsResponse": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/mcpproxy.MCPDefinition"
                },
                "status": {
                    "$ref": "#/definitions/mcpproxy.MCPStatus"
                }
            }
        },
        "mcpproxy.MCPStatus": {
            "type": "object",
            "properties": {
                "avgResponseTime": {
                    "$ref": "#/definitions/time.Duration"
                },
                "lastConnected": {
                    "type": "string"
                },
                "lastError": {
                    "type": "string"
                },
                "lastErrorTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reconnectAttempts": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/mcpproxy.ConnectionStatus"
                },
                "totalErrors": {
                    "type": "integer"
                },
                "totalRequests": {
                    "type": "integer"
                },
                "upTime": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "mcpproxy.ToolFilter": {
            "type": "object",
            "required": ["mode"],
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mode": {
                    "$ref": "#/definitions/mcpproxy.ToolFilterMode"
                }
            }
        },
        "mcpproxy.ToolFilterMode": {
            "type": "string",
            "enum": ["allow", "block"],
            "x-enum-varnames": ["ToolFilterAllow", "ToolFilterBlock"]
        },
        "mcpproxy.TransportType": {
            "type": "string",
            "enum": ["stdio", "sse", "streamable-http"],
            "x-enum-varnames": ["TransportStdio", "TransportSSE", "TransportStreamableHTTP"]
        },
        "memory.InstanceHealth": {
            "type": "object",
            "properties": {
                "consecutive_failures": {
                    "type": "integer"
                },
                "error_message": {
                    "type": "string"
                },
                "healthy": {
                    "type": "boolean"
                },
                "last_checked": {
                    "type": "string"
                },
                "memory_id": {
                    "type": "string"
                },
                "token_usage": {
                    "$ref": "#/definitions/memory.TokenUsageHealth"
                }
            }
        },
        "memory.SystemHealth": {
            "type": "object",
            "properties": {
                "healthy": {
                    "type": "boolean"
                },
                "healthy_instances": {
                    "type": "integer"
                },
                "instance_health": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/memory.InstanceHealth"
                    }
                },
                "last_checked": {
                    "type": "string"
                },
                "system_errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_instances": {
                    "type": "integer"
                },
                "unhealthy_instances": {
                    "type": "integer"
                }
            }
        },
        "memory.TokenUsageHealth": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "near_limit": {
                    "type": "boolean"
                },
                "usage_percentage": {
                    "type": "number"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "memrouter.AppendMemoryRequest": {
            "type": "object",
            "required": ["key", "messages"],
            "properties": {
                "key": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "memrouter.ClearMemoryRequest": {
            "type": "object",
            "required": ["confirm", "key"],
            "properties": {
                "backup": {
                    "type": "boolean"
                },
                "confirm": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "memrouter.DeleteMemoryRequest": {
            "type": "object",
            "required": ["key"],
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "memrouter.FlushMemoryRequest": {
            "type": "object",
            "required": ["key"],
            "properties": {
                "dry_run": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "max_keys": {
                    "type": "integer"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "memrouter.WriteMemoryRequest": {
            "type": "object",
            "required": ["key", "messages"],
            "properties": {
                "key": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "router.ErrorInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "router.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/router.ErrorInfo"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "schedulerouter.ScheduleInfoResponse": {
            "type": "object",
            "properties": {
                "cron": {
                    "type": "string",
                    "example": "0 0 9 * * 1-5"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "is_override": {
                    "type": "boolean",
                    "example": false
                },
                "last_run_status": {
                    "type": "string",
                    "example": "success"
                },
                "last_run_time": {
                    "type": "string",
                    "example": "2024-01-14T09:00:00-05:00"
                },
                "next_run_time": {
                    "type": "string",
                    "example": "2024-01-15T09:00:00-05:00"
                },
                "schedule_id": {
                    "type": "string",
                    "example": "schedule-my-project-daily-report"
                },
                "timezone": {
                    "type": "string",
                    "example": "America/New_York"
                },
                "workflow_id": {
                    "type": "string",
                    "example": "daily-report"
                },
                "yaml_config": {
                    "$ref": "#/definitions/workflow.Schedule"
                }
            }
        },
        "schedulerouter.ScheduleListResponse": {
            "type": "object",
            "properties": {
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "schedulerouter.UpdateScheduleRequest": {
            "type": "object",
            "properties": {
                "cron": {
                    "type": "string",
                    "example": "0 0 */10 * * *"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "schema.Schema": {
            "type": "object",
            "additionalProperties": {}
        },
        "service.AppendResponse": {
            "type": "object",
            "properties": {
                "appended": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "service.DeleteResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "service.WriteResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "task.ClearConfig": {
            "type": "object",
            "properties": {
                "backup": {
                    "type": "boolean"
                },
                "confirm": {
                    "type": "boolean"
                }
            }
        },
        "task.CollectionMode": {
            "type": "string",
            "enum": ["parallel", "sequential"],
            "x-enum-varnames": ["CollectionModeParallel", "CollectionModeSequential"]
        },
        "task.Config": {
            "type": "object",
            "properties": {
                "CWD": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "action": {
                    "type": "string"
                },
                "agent": {
                    "$ref": "#/definitions/agent.Config"
                },
                "batch": {
                    "type": "integer"
                },
                "batch_size": {
                    "description": "Performance controls",
                    "type": "integer"
                },
                "clear_config": {
                    "$ref": "#/definitions/task.ClearConfig"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/core.GlobalOpts"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "file_path": {
                    "description": "Path and working directory properties",
                    "type": "string"
                },
                "filter": {
                    "type": "string"
                },
                "final": {
                    "type": "boolean"
                },
                "flush_config": {
                    "description": "Operation-specific configs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.FlushConfig"
                        }
                    ]
                },
                "health_config": {
                    "$ref": "#/definitions/task.HealthConfig"
                },
                "id": {
                    "type": "string"
                },
                "index_var": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "item_var": {
                    "type": "string"
                },
                "items": {
                    "type": "string"
                },
                "key_template": {
                    "type": "string"
                },
                "max_keys": {
                    "type": "integer"
                },
                "max_workers": {
                    "type": "integer"
                },
                "memory_ref": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/task.CollectionMode"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "on_success": {
                    "description": "Task configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.SuccessTransition"
                        }
                    ]
                },
                "on_timeout": {
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/task.MemoryOpType"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "outputs": {
                    "$ref": "#/definitions/core.Input"
                },
                "payload": {},
                "processor": {
                    "$ref": "#/definitions/task.Config"
                },
                "resource": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "routes": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "signal": {
                    "$ref": "#/definitions/task.SignalConfig"
                },
                "sleep": {
                    "type": "string"
                },
                "stats_config": {
                    "$ref": "#/definitions/task.StatsConfig"
                },
                "strategy": {
                    "$ref": "#/definitions/task.ParallelStrategy"
                },
                "task": {
                    "$ref": "#/definitions/task.Config"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Config"
                    }
                },
                "timeout": {
                    "description": "Composite and Paralle tasks",
                    "type": "string"
                },
                "tool": {
                    "$ref": "#/definitions/tool.Config"
                },
                "type": {
                    "$ref": "#/definitions/task.Type"
                },
                "wait_for": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "task.ExecutionType": {
            "type": "string",
            "enum": ["basic", "router", "parallel", "collection", "composite", "wait"],
            "x-enum-varnames": [
                "ExecutionBasic",
                "ExecutionRouter",
                "ExecutionParallel",
                "ExecutionCollection",
                "ExecutionComposite",
                "ExecutionWait"
            ]
        },
        "task.FlushConfig": {
            "type": "object",
            "properties": {
                "dry_run": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "max_keys": {
                    "type": "integer"
                },
                "strategy": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                }
            }
        },
        "task.HealthConfig": {
            "type": "object",
            "properties": {
                "check_connectivity": {
                    "type": "boolean"
                },
                "include_stats": {
                    "type": "boolean"
                }
            }
        },
        "task.MemoryOpType": {
            "type": "string",
            "enum": ["read", "write", "append", "delete", "flush", "health", "clear", "stats"],
            "x-enum-varnames": [
                "MemoryOpRead",
                "MemoryOpWrite",
                "MemoryOpAppend",
                "MemoryOpDelete",
                "MemoryOpFlush",
                "MemoryOpHealth",
                "MemoryOpClear",
                "MemoryOpStats"
            ]
        },
        "task.ParallelStrategy": {
            "type": "string",
            "enum": ["wait_all", "fail_fast", "best_effort", "race"],
            "x-enum-comments": {
                "StrategyBestEffort": "Continue even if some tasks fail",
                "StrategyFailFast": "Stop on first failure",
                "StrategyRace": "Return when first task completes",
                "StrategyWaitAll": "Default: wait for all tasks to complete"
            },
            "x-enum-varnames": [
                "StrategyWaitAll",
                "StrategyFailFast",
                "StrategyBestEffort",
                "StrategyRace"
            ]
        },
        "task.SignalConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "task.State": {
            "type": "object",
            "properties": {
                "action_id": {
                    "type": "string"
                },
                "agent_id": {
                    "description": "Basic execution fields (for single tasks)",
                    "type": "string"
                },
                "component": {
                    "description": "Core identification",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ComponentType"
                        }
                    ]
                },
                "created_at": {
                    "description": "Timestamps for audit trails and progress tracking",
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "execution_type": {
                    "description": "Execution type and strategy",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.ExecutionType"
                        }
                    ]
                },
                "input": {
                    "$ref": "#/definitions/core.Input"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "parent_state_id": {
                    "description": "Parent-child relationship for hierarchical tasks",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "task_exec_id": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "tool_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "task.StatsConfig": {
            "type": "object",
            "properties": {
                "group_by": {
                    "type": "string"
                },
                "include_content": {
                    "type": "boolean"
                }
            }
        },
        "task.Type": {
            "type": "string",
            "enum": [
                "basic",
                "router",
                "parallel",
                "collection",
                "aggregate",
                "composite",
                "signal",
                "wait",
                "memory"
            ],
            "x-enum-varnames": [
                "TaskTypeBasic",
                "TaskTypeRouter",
                "TaskTypeParallel",
                "TaskTypeCollection",
                "TaskTypeAggregate",
                "TaskTypeComposite",
                "TaskTypeSignal",
                "TaskTypeWait",
                "TaskTypeMemory"
            ]
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808, 9223372036854775807, 1, 1000, 1000000, 1000000000,
                60000000000, 3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "tool.Config": {
            "type": "object",
            "properties": {
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "description": {
                    "type": "string"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "resource": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "uc.ClearMemoryResult": {
            "type": "object",
            "properties": {
                "backup_created": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "messages_cleared": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "uc.FlushMemoryResult": {
            "type": "object",
            "properties": {
                "actual_strategy": {
                    "type": "string"
                },
                "dry_run": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "summary_generated": {
                    "type": "boolean"
                },
                "token_count": {
                    "type": "integer"
                },
                "would_flush": {
                    "type": "boolean"
                }
            }
        },
        "uc.HealthMemoryResult": {
            "type": "object",
            "properties": {
                "actual_strategy": {
                    "type": "string"
                },
                "current_tokens": {
                    "type": "integer"
                },
                "healthy": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "last_flush": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "token_count": {
                    "type": "integer"
                }
            }
        },
        "uc.PaginationInfo": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "uc.StatsMemoryOutput": {
            "type": "object",
            "properties": {
                "context_window_used": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "pagination_info": {
                    "$ref": "#/definitions/uc.PaginationInfo"
                },
                "role_distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "token_count": {
                    "type": "integer"
                },
                "token_limit": {
                    "type": "integer"
                },
                "token_utilization": {
                    "type": "number"
                }
            }
        },
        "wfrouter.EventRequest": {
            "type": "object",
            "required": ["name"],
            "properties": {
                "name": {
                    "type": "string"
                },
                "payload": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "wfrouter.EventResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "wfrouter.ExecuteWorkflowResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "exec_url": {
                    "type": "string",
                    "example": "localhost:8080/api/workflows/executions/2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "workflow_id": {
                    "type": "string",
                    "example": "data-processing"
                }
            }
        },
        "wfrouter.SignalRequest": {
            "type": "object"
        },
        "wfrouter.SignalResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Signal sent successfully"
                }
            }
        },
        "workflow.Config": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agent.Config"
                    }
                },
                "author": {
                    "$ref": "#/definitions/core.Author"
                },
                "config": {
                    "$ref": "#/definitions/workflow.Opts"
                },
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "outputs": {
                    "$ref": "#/definitions/core.Output"
                },
                "resource": {
                    "type": "string"
                },
                "schedule": {
                    "$ref": "#/definitions/workflow.Schedule"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Schema"
                    }
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Config"
                    }
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workflow.Trigger"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "workflow.Opts": {
            "type": "object",
            "properties": {
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "heartbeat_timeout": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "retry_policy": {
                    "$ref": "#/definitions/core.RetryPolicyConfig"
                },
                "schedule_to_close_timeout": {
                    "type": "string"
                },
                "schedule_to_start_timeout": {
                    "type": "string"
                },
                "start_to_close_timeout": {
                    "type": "string"
                }
            }
        },
        "workflow.OverlapPolicy": {
            "type": "string",
            "enum": ["skip", "allow", "buffer_one", "cancel_other"],
            "x-enum-varnames": [
                "OverlapSkip",
                "OverlapAllow",
                "OverlapBufferOne",
                "OverlapCancelOther"
            ]
        },
        "workflow.Schedule": {
            "type": "object",
            "required": ["cron"],
            "properties": {
                "cron": {
                    "description": "Cron expression for scheduling (required)",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the schedule is enabled (optional, default true)",
                    "type": "boolean"
                },
                "end_at": {
                    "description": "End date for the schedule (optional)",
                    "type": "string"
                },
                "input": {
                    "description": "Default input values for scheduled runs (optional)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "jitter": {
                    "description": "Random delay to add to execution time (optional)",
                    "type": "string"
                },
                "overlap_policy": {
                    "description": "Policy for handling overlapping executions (optional, default skip)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workflow.OverlapPolicy"
                        }
                    ]
                },
                "start_at": {
                    "description": "Start date for the schedule (optional)",
                    "type": "string"
                },
                "timezone": {
                    "description": "Timezone for schedule execution (optional, default UTC)",
                    "type": "string"
                }
            }
        },
        "workflow.State": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "input": {
                    "$ref": "#/definitions/core.Input"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/task.State"
                    }
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "workflow.Trigger": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "schema": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "type": {
                    "$ref": "#/definitions/workflow.TriggerType"
                }
            }
        },
        "workflow.TriggerType": {
            "type": "string",
            "enum": ["signal"],
            "x-enum-varnames": ["TriggerTypeSignal"]
        }
    },
    "tags": [
        {
            "description": "Workflow management operations",
            "name": "workflows"
        },
        {
            "description": "Task management operations",
            "name": "tasks"
        },
        {
            "description": "Agent management operations",
            "name": "agents"
        },
        {
            "description": "Tool management operations",
            "name": "tools"
        },
        {
            "description": "Schedule management operations",
            "name": "schedules"
        },
        {
            "description": "Memory management operations",
            "name": "memory"
        },
        {
            "description": "Operational endpoints for monitoring and health",
            "name": "Operations"
        }
    ]
}
