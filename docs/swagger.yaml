basePath: /api/v0
definitions:
  agent.ActionConfig:
    properties:
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      json_mode:
        type: boolean
      output:
        $ref: '#/definitions/schema.Schema'
      prompt:
        type: string
      tools:
        description: Used to force a single tool call in the action
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        $ref: '#/definitions/core.Input'
    required:
    - prompt
    type: object
  agent.Config:
    properties:
      actions:
        items:
          $ref: '#/definitions/agent.ActionConfig'
        type: array
      config:
        $ref: '#/definitions/core.ProviderConfig'
      env:
        $ref: '#/definitions/core.EnvMap'
      id:
        type: string
      instructions:
        type: string
      json_mode:
        type: boolean
      max_iterations:
        type: integer
      tools:
        description: When defined here, the agent will have toolChoice defined as
          "auto"
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        $ref: '#/definitions/core.Input'
    required:
    - config
    - id
    - instructions
    type: object
  core.Author:
    properties:
      contributors:
        items:
          $ref: '#/definitions/core.Contributor'
        type: array
      email:
        type: string
      name:
        type: string
      organization:
        type: string
      url:
        type: string
    type: object
  core.ComponentType:
    enum:
    - workflow
    - task
    - agent
    - tool
    - log
    type: string
    x-enum-varnames:
    - ComponentWorkflow
    - ComponentTask
    - ComponentAgent
    - ComponentTool
    - ComponentLog
  core.Contributor:
    properties:
      email:
        type: string
      name:
        type: string
      organization:
        type: string
      url:
        type: string
    type: object
  core.EnvMap:
    additionalProperties:
      type: string
    type: object
  core.Error:
    properties:
      code:
        type: string
      details:
        additionalProperties: {}
        type: object
      message:
        type: string
    type: object
  core.ErrorTransition:
    properties:
      next:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  core.GlobalOpts:
    properties:
      heartbeat_timeout:
        type: string
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      retry_policy:
        $ref: '#/definitions/core.RetryPolicyConfig'
      schedule_to_close_timeout:
        type: string
      schedule_to_start_timeout:
        type: string
      start_to_close_timeout:
        type: string
    type: object
  core.Input:
    additionalProperties: {}
    type: object
  core.Output:
    additionalProperties: {}
    type: object
  core.PromptParams:
    properties:
      max_length:
        type: integer
      max_tokens:
        type: integer
      min_length:
        type: integer
      repetition_penalty:
        type: number
      seed:
        type: integer
      stop_words:
        items:
          type: string
        type: array
      temperature:
        type: number
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  core.ProviderConfig:
    properties:
      api_key:
        type: string
      api_url:
        type: string
      model:
        type: string
      organization:
        type: string
      params:
        $ref: '#/definitions/core.PromptParams'
      provider:
        $ref: '#/definitions/core.ProviderName'
    type: object
  core.ProviderName:
    enum:
    - openai
    - groq
    - anthropic
    - google
    - ollama
    - deepseek
    - xai
    - mock
    type: string
    x-enum-comments:
      ProviderMock: Mock provider for testing
    x-enum-varnames:
    - ProviderOpenAI
    - ProviderGroq
    - ProviderAnthropic
    - ProviderGoogle
    - ProviderOllama
    - ProviderDeepSeek
    - ProviderXAI
    - ProviderMock
  core.RetryPolicyConfig:
    properties:
      backoff_coefficient:
        type: number
      initial_interval:
        type: string
      maximum_attempts:
        type: integer
      maximum_interval:
        type: string
      non_retryable_error_types:
        items:
          type: string
        type: array
    type: object
  core.StatusType:
    enum:
    - PENDING
    - RUNNING
    - SUCCESS
    - FAILED
    - TIMED_OUT
    - CANCELED
    - WAITING
    - PAUSED
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusRunning
    - StatusSuccess
    - StatusFailed
    - StatusTimedOut
    - StatusCanceled
    - StatusWaiting
    - StatusPaused
  core.SuccessTransition:
    properties:
      next:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  router.ErrorInfo:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  router.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/router.ErrorInfo'
      message:
        type: string
      status:
        type: integer
    type: object
  schema.Schema:
    additionalProperties: {}
    type: object
  task.CollectionMode:
    enum:
    - parallel
    - parallel
    - sequential
    type: string
    x-enum-varnames:
    - DefaultCollectionMode
    - CollectionModeParallel
    - CollectionModeSequential
  task.Config:
    properties:
      action:
        type: string
      agent:
        $ref: '#/definitions/agent.Config'
      batch:
        type: integer
      condition:
        type: string
      config:
        $ref: '#/definitions/core.GlobalOpts'
      continue_on_error:
        type: boolean
      env:
        $ref: '#/definitions/core.EnvMap'
      filter:
        type: string
      final:
        type: boolean
      id:
        type: string
      index_var:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      item_var:
        description: Variable names for template evaluation
        type: string
      items:
        description: Core collection fields
        type: string
      max_workers:
        type: integer
      mode:
        $ref: '#/definitions/task.CollectionMode'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      on_success:
        allOf:
        - $ref: '#/definitions/core.SuccessTransition'
        description: Task configuration
      output:
        $ref: '#/definitions/schema.Schema'
      outputs:
        $ref: '#/definitions/core.Input'
      retries:
        type: integer
      routes:
        additionalProperties: {}
        type: object
      sleep:
        type: string
      stop_condition:
        description: Optional early termination
        type: string
      strategy:
        allOf:
        - $ref: '#/definitions/task.ParallelStrategy'
        description: Shared parallel execution fields (used by both parallel and collection
          tasks)
      task:
        $ref: '#/definitions/task.Config'
      tasks:
        items:
          $ref: '#/definitions/task.Config'
        type: array
      template:
        $ref: '#/definitions/task.Config'
      timeout:
        type: string
      tool:
        $ref: '#/definitions/tool.Config'
      type:
        $ref: '#/definitions/task.Type'
      with:
        $ref: '#/definitions/core.Input'
    type: object
  task.ExecutionType:
    enum:
    - basic
    - router
    - parallel
    - collection
    type: string
    x-enum-varnames:
    - ExecutionBasic
    - ExecutionRouter
    - ExecutionParallel
    - ExecutionCollection
  task.ParallelState:
    properties:
      completed_tasks:
        description: List of completed sub-task IDs
        items:
          type: string
        type: array
      failed_tasks:
        description: List of failed sub-task IDs
        items:
          type: string
        type: array
      max_workers:
        type: integer
      strategy:
        $ref: '#/definitions/task.ParallelStrategy'
      sub_tasks:
        additionalProperties:
          $ref: '#/definitions/task.State'
        description: Map of sub-task ID to State
        type: object
      timeout:
        type: string
    type: object
  task.ParallelStrategy:
    enum:
    - wait_all
    - fail_fast
    - best_effort
    - race
    type: string
    x-enum-comments:
      StrategyBestEffort: Continue even if some tasks fail
      StrategyFailFast: Stop on first failure
      StrategyRace: Return when first task completes
      StrategyWaitAll: 'Default: wait for all tasks to complete'
    x-enum-varnames:
    - StrategyWaitAll
    - StrategyFailFast
    - StrategyBestEffort
    - StrategyRace
  task.State:
    properties:
      action_id:
        type: string
      agent_id:
        description: Basic execution fields (for single tasks)
        type: string
      batch:
        description: Batch size for sequential
        type: integer
      completed_count:
        description: Successfully completed
        type: integer
      completed_tasks:
        description: List of completed sub-task IDs
        items:
          type: string
        type: array
      component:
        allOf:
        - $ref: '#/definitions/core.ComponentType'
        description: Core identification
      continue_on_error:
        description: Error tolerance
        type: boolean
      error:
        $ref: '#/definitions/core.Error'
      execution_type:
        allOf:
        - $ref: '#/definitions/task.ExecutionType'
        description: Execution type and strategy
      failed_count:
        description: Failed items
        type: integer
      failed_tasks:
        description: List of failed sub-task IDs
        items:
          type: string
        type: array
      filter:
        description: Filter expression used
        type: string
      index_var:
        description: Variable name for index
        type: string
      input:
        $ref: '#/definitions/core.Input'
      item_results:
        description: Collection item results - stored as task_states with parent reference
        items:
          type: string
        type: array
      item_var:
        description: Variable name for item
        type: string
      items:
        description: Collection configuration
        items: {}
        type: array
      items_evaluated:
        description: Track if dynamic evaluation is complete
        type: boolean
      items_expression:
        description: Dynamic evaluation support
        type: string
      max_workers:
        type: integer
      mode:
        description: parallel | sequential
        type: string
      output:
        $ref: '#/definitions/core.Output'
      parallel_config:
        allOf:
        - $ref: '#/definitions/task.ParallelState'
        description: Parallel execution settings (when mode=parallel, reuse existing
          ParallelState)
      processed_count:
        description: Progress tracking
        type: integer
      status:
        $ref: '#/definitions/core.StatusType'
      strategy:
        $ref: '#/definitions/task.ParallelStrategy'
      sub_tasks:
        additionalProperties:
          $ref: '#/definitions/task.State'
        description: Map of sub-task ID to State
        type: object
      task_exec_id:
        type: string
      task_id:
        type: string
      timeout:
        type: string
      tool_id:
        type: string
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  task.Type:
    enum:
    - basic
    - router
    - parallel
    - collection
    type: string
    x-enum-varnames:
    - TaskTypeBasic
    - TaskTypeRouter
    - TaskTypeParallel
    - TaskTypeCollection
  tool.Config:
    properties:
      description:
        type: string
      env:
        $ref: '#/definitions/core.EnvMap'
      execute:
        type: string
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      output:
        $ref: '#/definitions/schema.Schema'
      with:
        $ref: '#/definitions/core.Input'
    type: object
  wfrouter.ExecuteWorkflowResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      exec_url:
        example: localhost:8080/api/workflows/executions/2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      workflow_id:
        example: data-processing
        type: string
    type: object
  workflow.Config:
    properties:
      agents:
        items:
          $ref: '#/definitions/agent.Config'
        type: array
      author:
        $ref: '#/definitions/core.Author'
      config:
        $ref: '#/definitions/workflow.Opts'
      description:
        type: string
      id:
        type: string
      schemas:
        items:
          $ref: '#/definitions/schema.Schema'
        type: array
      tasks:
        items:
          $ref: '#/definitions/task.Config'
        type: array
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      version:
        type: string
    type: object
  workflow.Opts:
    properties:
      env:
        $ref: '#/definitions/core.EnvMap'
      heartbeat_timeout:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      retry_policy:
        $ref: '#/definitions/core.RetryPolicyConfig'
      schedule_to_close_timeout:
        type: string
      schedule_to_start_timeout:
        type: string
      start_to_close_timeout:
        type: string
    type: object
  workflow.State:
    properties:
      error:
        $ref: '#/definitions/core.Error'
      input:
        $ref: '#/definitions/core.Input'
      output:
        $ref: '#/definitions/core.Output'
      status:
        $ref: '#/definitions/core.StatusType'
      tasks:
        additionalProperties:
          $ref: '#/definitions/task.State'
        type: object
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
info:
  contact:
    email: support@compozy.dev
    name: Compozy Support
    url: https://github.com/compozy/compozy
  description: Compozy is a workflow orchestration engine for AI agents, tasks, and
    tools
  license:
    name: MIT
    url: https://github.com/compozy/compozy/blob/main/LICENSE
  termsOfService: https://github.com/compozy/compozy
  title: Compozy API
  version: "1.0"
paths:
  /executions/workflows:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all workflow executions across all workflows
      produces:
      - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    executions:
                      items:
                        $ref: '#/definitions/workflow.State'
                      type: array
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List all workflow executions
      tags:
      - workflows
  /executions/workflows/{exec_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific workflow execution by its execution ID
      parameters:
      - description: Workflow Execution ID
        example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
        in: path
        name: exec_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow execution retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/workflow.State'
              type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Execution not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Get workflow execution by ID
      tags:
      - executions
  /executions/workflows/{exec_id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a specific workflow execution by its execution ID
      parameters:
      - description: Workflow Execution ID
        example: '"workflowID_execID"'
        in: path
        name: exec_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow execution canceled successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Cancel workflow execution
      tags:
      - executions
  /executions/workflows/{exec_id}/pause:
    post:
      consumes:
      - application/json
      description: Pause a specific workflow execution by its execution ID
      parameters:
      - description: Workflow Execution ID
        example: '"workflowID_execID"'
        in: path
        name: exec_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow execution paused successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Pause workflow execution
      tags:
      - executions
  /executions/workflows/{exec_id}/resume:
    post:
      consumes:
      - application/json
      description: Resume a specific workflow execution by its execution ID
      parameters:
      - description: Workflow Execution ID
        example: '"workflowID_execID"'
        in: path
        name: exec_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow execution resumed successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Resume workflow execution
      tags:
      - executions
  /workflows:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available workflow configurations
      produces:
      - application/json
      responses:
        "200":
          description: Workflows retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    workflows:
                      items:
                        $ref: '#/definitions/workflow.Config'
                      type: array
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List all workflows
      tags:
      - workflows
  /workflows/{workflow_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific workflow configuration by its ID
      parameters:
      - description: Workflow ID
        example: '"data-processing"'
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/workflow.Config'
              type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Get workflow by ID
      tags:
      - workflows
  /workflows/{workflow_id}/agents:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available agent configurations
      parameters:
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agents retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    agents:
                      items:
                        $ref: '#/definitions/agent.Config'
                      type: array
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List all agents
      tags:
      - agents
  /workflows/{workflow_id}/agents/{agent_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific agent configuration by its ID
      parameters:
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      - description: Agent ID
        example: '"code-assistant"'
        in: path
        name: agent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Agent retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/agent.Config'
              type: object
        "400":
          description: Invalid agent ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Agent not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Get agent by ID
      tags:
      - agents
  /workflows/{workflow_id}/executions:
    get:
      consumes:
      - application/json
      description: Retrieve all executions for a specific workflow
      parameters:
      - description: Workflow ID
        example: '"data-processing"'
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    executions:
                      items:
                        $ref: '#/definitions/workflow.State'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List executions by workflow ID
      tags:
      - workflows
    post:
      consumes:
      - application/json
      description: Trigger the execution of a workflow with provided input data
      parameters:
      - description: Workflow ID
        example: '"data-processing"'
        in: path
        name: workflow_id
        required: true
        type: string
      - description: Workflow input data
        in: body
        name: input
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: Workflow triggered successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/wfrouter.ExecuteWorkflowResponse'
              type: object
        "400":
          description: Invalid input or workflow ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Execute workflow
      tags:
      - workflows
  /workflows/{workflow_id}/tasks:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all tasks within a specific workflow
      parameters:
      - description: Workflow ID
        example: '"data-processing"'
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    tasks:
                      items:
                        $ref: '#/definitions/task.Config'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List tasks for a workflow
      tags:
      - tasks
  /workflows/{workflow_id}/tasks/{task_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific task configuration by its ID within a workflow
      parameters:
      - description: Workflow ID
        example: '"data-processing"'
        in: path
        name: workflow_id
        required: true
        type: string
      - description: Task ID
        example: '"validate-input"'
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/task.Config'
              type: object
        "400":
          description: Invalid workflow or task ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Task not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Get task by ID
      tags:
      - tasks
  /workflows/{workflow_id}/tools:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available tool configurations
      parameters:
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tools retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  properties:
                    tools:
                      items:
                        $ref: '#/definitions/tool.Config'
                      type: array
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: List all tools
      tags:
      - tools
  /workflows/{workflow_id}/tools/{tool_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific tool configuration by its ID
      parameters:
      - description: Workflow ID
        in: path
        name: workflow_id
        required: true
        type: string
      - description: Tool ID
        example: '"format-code"'
        in: path
        name: tool_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tool retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                data:
                  $ref: '#/definitions/tool.Config'
              type: object
        "400":
          description: Invalid tool ID
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "404":
          description: Tool not found
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/router.Response'
            - properties:
                error:
                  $ref: '#/definitions/router.ErrorInfo'
              type: object
      summary: Get tool by ID
      tags:
      - tools
swagger: "2.0"
tags:
- description: Workflow management operations
  name: workflows
- description: Task management operations
  name: tasks
- description: Agent management operations
  name: agents
- description: Tool management operations
  name: tools
