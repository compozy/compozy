basePath: /api/v0

definitions:
  agent.ActionConfig:
    properties:
      cwd:
        $ref: '#/definitions/core.PathCWD'
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      json_mode:
        type: boolean
      output:
        $ref: '#/definitions/schema.Schema'
      prompt:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    required:
      - prompt
    type: object
  agent.Config:
    properties:
      actions:
        items:
          $ref: '#/definitions/agent.ActionConfig'
        type: array
      config:
        $ref: '#/definitions/core.ProviderConfig'
      cwd:
        $ref: '#/definitions/core.PathCWD'
      env:
        $ref: '#/definitions/core.EnvMap'
      id:
        type: string
      instructions:
        type: string
      json_mode:
        type: boolean
      max_iterations:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memories:
        description: '[]string (L2) or []MemoryReference (L3)'
      memory:
        description: |-
          Memory configuration fields
          Level 1: memory: "customer-support-context", memory_key: "key-template"
          Level 2: memory: true, memories: ["id1", "id2"], memory_key: "shared-key-template"
          Level 3: memories: [{id: "id1", mode: "read-write", key: "template1"},
                              {id: "id2", mode: "read-only", key: "template2"}]
      memory_key:
        description: string (L1, L2)
        type: string
      resource:
        type: string
      tools:
        description: When defined here, the agent will have toolChoice defined as "auto"
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        $ref: '#/definitions/core.Input'
    required:
      - config
      - id
      - instructions
    type: object
  core.Author:
    properties:
      contributors:
        items:
          $ref: '#/definitions/core.Contributor'
        type: array
      email:
        type: string
      name:
        type: string
      organization:
        type: string
      url:
        type: string
    type: object
  core.ComponentType:
    enum:
      - workflow
      - task
      - agent
      - tool
      - log
    type: string
    x-enum-varnames:
      - ComponentWorkflow
      - ComponentTask
      - ComponentAgent
      - ComponentTool
      - ComponentLog
  core.Contributor:
    properties:
      email:
        type: string
      name:
        type: string
      organization:
        type: string
      url:
        type: string
    type: object
  core.EnvMap:
    additionalProperties:
      type: string
    type: object
  core.Error:
    properties:
      code:
        type: string
      details:
        additionalProperties: {}
        type: object
      message:
        type: string
    type: object
  core.ErrorTransition:
    properties:
      next:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  core.GlobalOpts:
    properties:
      heartbeat_timeout:
        type: string
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      retry_policy:
        $ref: '#/definitions/core.RetryPolicyConfig'
      schedule_to_close_timeout:
        type: string
      schedule_to_start_timeout:
        type: string
      start_to_close_timeout:
        type: string
    type: object
  core.Input:
    additionalProperties: {}
    type: object
  core.Output:
    additionalProperties: {}
    type: object
  core.PathCWD:
    properties:
      path:
        description: Path holds the absolute working directory.
        type: string
    type: object
  core.PromptParams:
    properties:
      max_length:
        type: integer
      max_tokens:
        type: integer
      min_length:
        type: integer
      repetition_penalty:
        type: number
      seed:
        type: integer
      stop_words:
        items:
          type: string
        type: array
      temperature:
        type: number
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  core.ProviderConfig:
    properties:
      api_key:
        type: string
      api_url:
        type: string
      model:
        type: string
      organization:
        type: string
      params:
        $ref: '#/definitions/core.PromptParams'
      provider:
        $ref: '#/definitions/core.ProviderName'
    type: object
  core.ProviderName:
    enum:
      - openai
      - groq
      - anthropic
      - google
      - ollama
      - deepseek
      - xai
      - mock
    type: string
    x-enum-comments:
      ProviderMock: Mock provider for testing
    x-enum-varnames:
      - ProviderOpenAI
      - ProviderGroq
      - ProviderAnthropic
      - ProviderGoogle
      - ProviderOllama
      - ProviderDeepSeek
      - ProviderXAI
      - ProviderMock
  core.RetryPolicyConfig:
    properties:
      backoff_coefficient:
        type: number
      initial_interval:
        type: string
      maximum_attempts:
        type: integer
      maximum_interval:
        type: string
      non_retryable_error_types:
        items:
          type: string
        type: array
    type: object
  core.StatusType:
    enum:
      - PENDING
      - RUNNING
      - SUCCESS
      - FAILED
      - TIMED_OUT
      - CANCELED
      - WAITING
      - PAUSED
    type: string
    x-enum-varnames:
      - StatusPending
      - StatusRunning
      - StatusSuccess
      - StatusFailed
      - StatusTimedOut
      - StatusCanceled
      - StatusWaiting
      - StatusPaused
  core.SuccessTransition:
    properties:
      next:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  mcp.Config:
    properties:
      command:
        type: string
      env:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      max_sessions:
        type: integer
      proto:
        type: string
      resource:
        type: string
      start_timeout:
        $ref: '#/definitions/time.Duration'
      transport:
        $ref: '#/definitions/mcpproxy.TransportType'
      url:
        type: string
    type: object
  mcpproxy.CallToolRequest:
    properties:
      arguments:
        additionalProperties: {}
        type: object
      mcpName:
        type: string
      toolName:
        type: string
    type: object
  mcpproxy.ConnectionStatus:
    enum:
      - disconnected
      - connecting
      - connected
      - error
    type: string
    x-enum-varnames:
      - StatusDisconnected
      - StatusConnecting
      - StatusConnected
      - StatusError
  mcpproxy.ListMCPsResponse:
    properties:
      count:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcpproxy.MCPDetailsResponse'
        type: array
    type: object
  mcpproxy.MCPDefinition:
    properties:
      allowedIPs:
        items:
          type: string
        type: array
      args:
        items:
          type: string
        type: array
      authTokens:
        description: Security and access control
        items:
          type: string
        type: array
      autoReconnect:
        description: Behavior configuration
        type: boolean
      command:
        description: Stdio transport configuration
        type: string
      createdAt:
        type: string
      description:
        type: string
      env:
        additionalProperties:
          type: string
        type: object
      headers:
        additionalProperties:
          type: string
        type: object
      healthCheckEnabled:
        type: boolean
      healthCheckInterval:
        $ref: '#/definitions/time.Duration'
      logEnabled:
        type: boolean
      maxReconnects:
        type: integer
      name:
        description: Core identification
        minLength: 1
        type: string
      reconnectDelay:
        $ref: '#/definitions/time.Duration'
      requireAuth:
        type: boolean
      tags:
        additionalProperties:
          type: string
        description: Metadata
        type: object
      timeout:
        $ref: '#/definitions/time.Duration'
      toolFilter:
        allOf:
          - $ref: '#/definitions/mcpproxy.ToolFilter'
        description: Tool filtering
      transport:
        $ref: '#/definitions/mcpproxy.TransportType'
      updatedAt:
        type: string
      url:
        description: HTTP-based transport configuration (SSE and streamable-http)
        type: string
    required:
      - name
      - transport
    type: object
  mcpproxy.MCPDetailsResponse:
    properties:
      definition:
        $ref: '#/definitions/mcpproxy.MCPDefinition'
      status:
        $ref: '#/definitions/mcpproxy.MCPStatus'
    type: object
  mcpproxy.MCPStatus:
    properties:
      avgResponseTime:
        $ref: '#/definitions/time.Duration'
      lastConnected:
        type: string
      lastError:
        type: string
      lastErrorTime:
        type: string
      name:
        type: string
      reconnectAttempts:
        type: integer
      status:
        $ref: '#/definitions/mcpproxy.ConnectionStatus'
      totalErrors:
        type: integer
      totalRequests:
        type: integer
      upTime:
        $ref: '#/definitions/time.Duration'
    type: object
  mcpproxy.ToolFilter:
    properties:
      list:
        items:
          type: string
        type: array
      mode:
        $ref: '#/definitions/mcpproxy.ToolFilterMode'
    required:
      - mode
    type: object
  mcpproxy.ToolFilterMode:
    enum:
      - allow
      - block
    type: string
    x-enum-varnames:
      - ToolFilterAllow
      - ToolFilterBlock
  mcpproxy.TransportType:
    enum:
      - stdio
      - sse
      - streamable-http
    type: string
    x-enum-varnames:
      - TransportStdio
      - TransportSSE
      - TransportStreamableHTTP
  memory.InstanceHealth:
    properties:
      consecutive_failures:
        type: integer
      error_message:
        type: string
      healthy:
        type: boolean
      last_checked:
        type: string
      memory_id:
        type: string
      token_usage:
        $ref: '#/definitions/memory.TokenUsageHealth'
    type: object
  memory.SystemHealth:
    properties:
      healthy:
        type: boolean
      healthy_instances:
        type: integer
      instance_health:
        additionalProperties:
          $ref: '#/definitions/memory.InstanceHealth'
        type: object
      last_checked:
        type: string
      system_errors:
        items:
          type: string
        type: array
      total_instances:
        type: integer
      unhealthy_instances:
        type: integer
    type: object
  memory.TokenUsageHealth:
    properties:
      max_tokens:
        type: integer
      near_limit:
        type: boolean
      usage_percentage:
        type: number
      used:
        type: integer
    type: object
  router.ErrorInfo:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  router.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/router.ErrorInfo'
      message:
        type: string
      status:
        type: integer
    type: object
  schedulerouter.ScheduleInfoResponse:
    properties:
      cron:
        example: 0 0 9 * * 1-5
        type: string
      enabled:
        example: true
        type: boolean
      is_override:
        example: false
        type: boolean
      last_run_status:
        example: success
        type: string
      last_run_time:
        example: "2024-01-14T09:00:00-05:00"
        type: string
      next_run_time:
        example: "2024-01-15T09:00:00-05:00"
        type: string
      schedule_id:
        example: schedule-my-project-daily-report
        type: string
      timezone:
        example: America/New_York
        type: string
      workflow_id:
        example: daily-report
        type: string
      yaml_config:
        $ref: '#/definitions/workflow.Schedule'
    type: object
  schedulerouter.ScheduleListResponse:
    properties:
      schedules:
        items:
          $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
        type: array
      total:
        example: 5
        type: integer
    type: object
  schedulerouter.UpdateScheduleRequest:
    properties:
      cron:
        example: 0 0 */10 * * *
        type: string
      enabled:
        example: false
        type: boolean
    type: object
  schema.Schema:
    additionalProperties: {}
    type: object
  task.ClearConfig:
    properties:
      backup:
        type: boolean
      confirm:
        type: boolean
    type: object
  task.CollectionMode:
    enum:
      - parallel
      - sequential
    type: string
    x-enum-varnames:
      - CollectionModeParallel
      - CollectionModeSequential
  task.Config:
    properties:
      CWD:
        $ref: '#/definitions/core.PathCWD'
      action:
        type: string
      agent:
        $ref: '#/definitions/agent.Config'
      batch:
        type: integer
      batch_size:
        description: Performance controls
        type: integer
      clear_config:
        $ref: '#/definitions/task.ClearConfig'
      condition:
        type: string
      config:
        $ref: '#/definitions/core.GlobalOpts'
      env:
        $ref: '#/definitions/core.EnvMap'
      file_path:
        description: Path and working directory properties
        type: string
      filter:
        type: string
      final:
        type: boolean
      flush_config:
        allOf:
          - $ref: '#/definitions/task.FlushConfig'
        description: Operation-specific configs
      health_config:
        $ref: '#/definitions/task.HealthConfig'
      id:
        type: string
      index_var:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      item_var:
        type: string
      items:
        type: string
      key_template:
        type: string
      max_keys:
        type: integer
      max_workers:
        type: integer
      memory_ref:
        type: string
      mode:
        $ref: '#/definitions/task.CollectionMode'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      on_success:
        allOf:
          - $ref: '#/definitions/core.SuccessTransition'
        description: Task configuration
      on_timeout:
        type: string
      operation:
        $ref: '#/definitions/task.MemoryOpType'
      output:
        $ref: '#/definitions/schema.Schema'
      outputs:
        $ref: '#/definitions/core.Input'
      payload: {}
      processor:
        $ref: '#/definitions/task.Config'
      resource:
        type: string
      retries:
        type: integer
      routes:
        additionalProperties: {}
        type: object
      signal:
        $ref: '#/definitions/task.SignalConfig'
      sleep:
        type: string
      stats_config:
        $ref: '#/definitions/task.StatsConfig'
      strategy:
        $ref: '#/definitions/task.ParallelStrategy'
      task:
        $ref: '#/definitions/task.Config'
      tasks:
        items:
          $ref: '#/definitions/task.Config'
        type: array
      timeout:
        description: Composite and Paralle tasks
        type: string
      tool:
        $ref: '#/definitions/tool.Config'
      type:
        $ref: '#/definitions/task.Type'
      wait_for:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  task.ExecutionType:
    enum:
      - basic
      - router
      - parallel
      - collection
      - composite
      - wait
    type: string
    x-enum-varnames:
      - ExecutionBasic
      - ExecutionRouter
      - ExecutionParallel
      - ExecutionCollection
      - ExecutionComposite
      - ExecutionWait
  task.FlushConfig:
    properties:
      dry_run:
        type: boolean
      force:
        type: boolean
      max_keys:
        type: integer
      strategy:
        type: string
      threshold:
        type: number
    type: object
  task.HealthConfig:
    properties:
      check_connectivity:
        type: boolean
      include_stats:
        type: boolean
    type: object
  task.MemoryOpType:
    enum:
      - read
      - write
      - append
      - delete
      - flush
      - health
      - clear
      - stats
    type: string
    x-enum-varnames:
      - MemoryOpRead
      - MemoryOpWrite
      - MemoryOpAppend
      - MemoryOpDelete
      - MemoryOpFlush
      - MemoryOpHealth
      - MemoryOpClear
      - MemoryOpStats
  task.ParallelStrategy:
    enum:
      - wait_all
      - fail_fast
      - best_effort
      - race
    type: string
    x-enum-comments:
      StrategyBestEffort: Continue even if some tasks fail
      StrategyFailFast: Stop on first failure
      StrategyRace: Return when first task completes
      StrategyWaitAll: 'Default: wait for all tasks to complete'
    x-enum-varnames:
      - StrategyWaitAll
      - StrategyFailFast
      - StrategyBestEffort
      - StrategyRace
  task.SignalConfig:
    properties:
      id:
        type: string
      payload:
        additionalProperties: {}
        type: object
    type: object
  task.State:
    properties:
      action_id:
        type: string
      agent_id:
        description: Basic execution fields (for single tasks)
        type: string
      component:
        allOf:
          - $ref: '#/definitions/core.ComponentType'
        description: Core identification
      created_at:
        description: Timestamps for audit trails and progress tracking
        type: string
      error:
        $ref: '#/definitions/core.Error'
      execution_type:
        allOf:
          - $ref: '#/definitions/task.ExecutionType'
        description: Execution type and strategy
      input:
        $ref: '#/definitions/core.Input'
      output:
        $ref: '#/definitions/core.Output'
      parent_state_id:
        description: Parent-child relationship for hierarchical tasks
        type: string
      status:
        $ref: '#/definitions/core.StatusType'
      task_exec_id:
        type: string
      task_id:
        type: string
      tool_id:
        type: string
      updated_at:
        type: string
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  task.StatsConfig:
    properties:
      group_by:
        type: string
      include_content:
        type: boolean
    type: object
  task.Type:
    enum:
      - basic
      - router
      - parallel
      - collection
      - aggregate
      - composite
      - signal
      - wait
      - memory
    type: string
    x-enum-varnames:
      - TaskTypeBasic
      - TaskTypeRouter
      - TaskTypeParallel
      - TaskTypeCollection
      - TaskTypeAggregate
      - TaskTypeComposite
      - TaskTypeSignal
      - TaskTypeWait
      - TaskTypeMemory
  time.Duration:
    enum:
      - -9223372036854775808
      - 9223372036854775807
      - 1
      - 1000
      - 1000000
      - 1000000000
      - 60000000000
      - 3600000000000
    type: integer
    x-enum-varnames:
      - minDuration
      - maxDuration
      - Nanosecond
      - Microsecond
      - Millisecond
      - Second
      - Minute
      - Hour
  tool.Config:
    properties:
      cwd:
        $ref: '#/definitions/core.PathCWD'
      description:
        type: string
      env:
        $ref: '#/definitions/core.EnvMap'
      execute:
        type: string
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      output:
        $ref: '#/definitions/schema.Schema'
      resource:
        type: string
      timeout:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  uc.AppendMemoryInput:
    properties:
      messages:
        items:
          additionalProperties: {}
          type: object
        type: array
    type: object
  uc.AppendMemoryResult:
    properties:
      appended:
        type: integer
      key:
        type: string
      success:
        type: boolean
      total_count:
        type: integer
    type: object
  uc.ClearMemoryInput:
    properties:
      backup:
        type: boolean
      confirm:
        type: boolean
    type: object
  uc.ClearMemoryResult:
    properties:
      backup_created:
        type: boolean
      key:
        type: string
      messages_cleared:
        type: integer
      success:
        type: boolean
    type: object
  uc.DeleteMemoryResult:
    properties:
      key:
        type: string
      success:
        type: boolean
    type: object
  uc.FlushMemoryInput:
    properties:
      dry_run:
        type: boolean
      force:
        type: boolean
      max_keys:
        type: integer
      strategy:
        type: string
    type: object
  uc.FlushMemoryResult:
    properties:
      dry_run:
        type: boolean
      error:
        type: string
      flush_strategy:
        type: string
      key:
        type: string
      message_count:
        type: integer
      success:
        type: boolean
      summary_generated:
        type: boolean
      token_count:
        type: integer
      would_flush:
        type: boolean
    type: object
  uc.HealthMemoryResult:
    properties:
      current_tokens:
        type: integer
      flush_strategy:
        type: string
      healthy:
        type: boolean
      key:
        type: string
      last_flush:
        type: string
      message_count:
        type: integer
      token_count:
        type: integer
    type: object
  uc.PaginationInfo:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total_count:
        type: integer
    type: object
  uc.StatsMemoryOutput:
    properties:
      context_window_used:
        type: integer
      key:
        type: string
      message_count:
        type: integer
      pagination_info:
        $ref: '#/definitions/uc.PaginationInfo'
      role_distribution:
        additionalProperties:
          type: integer
        type: object
      token_count:
        type: integer
      token_limit:
        type: integer
      token_utilization:
        type: number
    type: object
  uc.WriteMemoryInput:
    properties:
      messages:
        items:
          additionalProperties: {}
          type: object
        type: array
    type: object
  uc.WriteMemoryResult:
    properties:
      count:
        type: integer
      key:
        type: string
      success:
        type: boolean
    type: object
  wfrouter.EventRequest:
    properties:
      name:
        type: string
      payload:
        $ref: '#/definitions/core.Input'
    required:
      - name
    type: object
  wfrouter.EventResponse:
    properties:
      event_id:
        type: string
      message:
        type: string
    type: object
  wfrouter.ExecuteWorkflowResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      exec_url:
        example: localhost:8080/api/workflows/executions/2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      workflow_id:
        example: data-processing
        type: string
    type: object
  wfrouter.SignalRequest:
    type: object
  wfrouter.SignalResponse:
    properties:
      message:
        example: Signal sent successfully
        type: string
    type: object
  workflow.Config:
    properties:
      agents:
        items:
          $ref: '#/definitions/agent.Config'
        type: array
      author:
        $ref: '#/definitions/core.Author'
      config:
        $ref: '#/definitions/workflow.Opts'
      cwd:
        $ref: '#/definitions/core.PathCWD'
      description:
        type: string
      id:
        type: string
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      outputs:
        $ref: '#/definitions/core.Output'
      resource:
        type: string
      schedule:
        $ref: '#/definitions/workflow.Schedule'
      schemas:
        items:
          $ref: '#/definitions/schema.Schema'
        type: array
      tasks:
        items:
          $ref: '#/definitions/task.Config'
        type: array
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      triggers:
        items:
          $ref: '#/definitions/workflow.Trigger'
        type: array
      version:
        type: string
    type: object
  workflow.Opts:
    properties:
      env:
        $ref: '#/definitions/core.EnvMap'
      heartbeat_timeout:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      retry_policy:
        $ref: '#/definitions/core.RetryPolicyConfig'
      schedule_to_close_timeout:
        type: string
      schedule_to_start_timeout:
        type: string
      start_to_close_timeout:
        type: string
    type: object
  workflow.OverlapPolicy:
    enum:
      - skip
      - allow
      - buffer_one
      - cancel_other
    type: string
    x-enum-varnames:
      - OverlapSkip
      - OverlapAllow
      - OverlapBufferOne
      - OverlapCancelOther
  workflow.Schedule:
    properties:
      cron:
        description: Cron expression for scheduling (required)
        type: string
      enabled:
        description: Whether the schedule is enabled (optional, default true)
        type: boolean
      end_at:
        description: End date for the schedule (optional)
        type: string
      input:
        additionalProperties: {}
        description: Default input values for scheduled runs (optional)
        type: object
      jitter:
        description: Random delay to add to execution time (optional)
        type: string
      overlap_policy:
        allOf:
          - $ref: '#/definitions/workflow.OverlapPolicy'
        description: Policy for handling overlapping executions (optional, default skip)
      start_at:
        description: Start date for the schedule (optional)
        type: string
      timezone:
        description: Timezone for schedule execution (optional, default UTC)
        type: string
    required:
      - cron
    type: object
  workflow.State:
    properties:
      error:
        $ref: '#/definitions/core.Error'
      input:
        $ref: '#/definitions/core.Input'
      output:
        $ref: '#/definitions/core.Output'
      status:
        $ref: '#/definitions/core.StatusType'
      tasks:
        additionalProperties:
          $ref: '#/definitions/task.State'
        type: object
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  workflow.Trigger:
    properties:
      name:
        type: string
      schema:
        $ref: '#/definitions/schema.Schema'
      type:
        $ref: '#/definitions/workflow.TriggerType'
    type: object
  workflow.TriggerType:
    enum:
      - signal
    type: string
    x-enum-varnames:
      - TriggerTypeSignal

info:
  contact:
    email: support@compozy.dev
    name: Compozy Support
    url: https://github.com/compozy/compozy
  description: Compozy is a workflow orchestration engine for AI agents, tasks, and tools
  license:
    name: MIT
    url: https://github.com/compozy/compozy/blob/main/LICENSE
  termsOfService: https://github.com/compozy/compozy
  title: Compozy API
  version: "1.0"

paths:
  /{name}/sse:
    get:
      description: Proxy Server-Sent Events requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: SSE stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy SSE requests to MCP server
      tags:
        - MCP Proxy
  /{name}/sse/{path}:
    get:
      description: Proxy Server-Sent Events requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: SSE stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy SSE requests to MCP server
      tags:
        - MCP Proxy
  /{name}/stream:
    delete:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    get:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    patch:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    post:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    put:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
  /{name}/stream/{path}:
    delete:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    get:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    patch:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    post:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    put:
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
  /admin/mcps:
    get:
      description: Get a list of all configured Model Context Protocol servers
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List of MCPs with their status
          schema:
            $ref: '#/definitions/mcpproxy.ListMCPsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: List all MCP definitions
      tags:
        - MCP Management
    post:
      consumes:
        - application/json
      description: Add a new Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP definition to add
          in: body
          name: mcp
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.MCPDefinition'
      produces:
        - application/json
      responses:
        "201":
          description: MCP added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "409":
          description: MCP already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Add a new MCP definition
      tags:
        - MCP Management
  /admin/mcps/{name}:
    delete:
      description: Remove a Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCP removed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Remove an MCP definition
      tags:
        - MCP Management
    get:
      description: Get details of a specific Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCP details with status
          schema:
            $ref: '#/definitions/mcpproxy.MCPDetailsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get an MCP definition
      tags:
        - MCP Management
    put:
      consumes:
        - application/json
      description: Update an existing Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Updated MCP definition
          in: body
          name: mcp
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.MCPDefinition'
      produces:
        - application/json
      responses:
        "200":
          description: MCP updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update an MCP definition
      tags:
        - MCP Management
  /admin/tools:
    get:
      description: Get a list of all tools available from all connected MCP servers
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List of available tools
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: List all available tools
      tags:
        - MCP Tools
  /admin/tools/call:
    post:
      consumes:
        - application/json
      description: Execute a specific tool with provided arguments on the specified MCP server
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: Tool call request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.CallToolRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Tool execution result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP or tool not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Tool execution failed
          schema:
            additionalProperties: true
            type: object
      summary: Call a tool on an MCP server
      tags:
        - MCP Tools
  /api/v0/memory/{memory_ref}/{key}:
    delete:
      consumes:
        - application/json
      description: Delete all memory content for a specific key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Memory deleted successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.DeleteMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Delete memory
      tags:
        - memory
    get:
      consumes:
        - application/json
      description: Retrieve memory content for a specific memory reference and key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: 'Maximum number of messages to return (default: 50, max: 1000)'
          example: 50
          in: query
          name: limit
          type: integer
        - description: Number of messages to skip (for pagination)
          example: 0
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Memory read successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      has_more:
                        type: boolean
                      key:
                        type: string
                      limit:
                        type: integer
                      messages:
                        items:
                          properties:
                            content:
                              type: string
                            role:
                              type: string
                          type: object
                        type: array
                      offset:
                        type: integer
                      total_count:
                        type: integer
                    type: object
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Memory not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Read memory content
      tags:
        - memory
    post:
      consumes:
        - application/json
      description: Append messages to existing memory content
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: Messages to append
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/uc.AppendMemoryInput'
      produces:
        - application/json
      responses:
        "200":
          description: Memory appended successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.AppendMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Append to memory
      tags:
        - memory
    put:
      consumes:
        - application/json
      description: Write or replace memory content for a specific memory reference and key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: Messages to write
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/uc.WriteMemoryInput'
      produces:
        - application/json
      responses:
        "200":
          description: Memory written successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.WriteMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Write memory content
      tags:
        - memory
  /api/v0/memory/{memory_ref}/{key}/clear:
    post:
      consumes:
        - application/json
      description: Clear all memory content with confirmation
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: Clear options
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/uc.ClearMemoryInput'
      produces:
        - application/json
      responses:
        "200":
          description: Memory cleared successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.ClearMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Clear memory
      tags:
        - memory
  /api/v0/memory/{memory_ref}/{key}/flush:
    post:
      consumes:
        - application/json
      description: Flush memory content with optional summarization
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: Flush options
          in: body
          name: body
          schema:
            $ref: '#/definitions/uc.FlushMemoryInput'
      produces:
        - application/json
      responses:
        "200":
          description: Memory flushed successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.FlushMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Flush memory
      tags:
        - memory
  /api/v0/memory/{memory_ref}/{key}/health:
    get:
      consumes:
        - application/json
      description: Get health status and metrics for memory
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: Include detailed stats
          example: true
          in: query
          name: include_stats
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: Memory health retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.HealthMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Check memory health
      tags:
        - memory
  /api/v0/memory/{memory_ref}/{key}/stats:
    get:
      consumes:
        - application/json
      description: Retrieve detailed statistics about memory content
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: path
          name: key
          required: true
          type: string
        - description: 'Limit for role distribution calculation (default: 100, max: 10000)'
          example: 100
          in: query
          name: limit
          type: integer
        - description: Offset for role distribution calculation
          example: 0
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Memory statistics retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.StatsMemoryOutput'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get memory statistics
      tags:
        - memory
  /events:
    post:
      consumes:
        - application/json
      description: Trigger workflows by sending events
      parameters:
        - description: Event data
          in: body
          name: event
          required: true
          schema:
            $ref: '#/definitions/wfrouter.EventRequest'
      produces:
        - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.EventResponse'
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Send event
      tags:
        - events
  /executions/workflows:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all workflow executions across all workflows
      produces:
        - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      executions:
                        items:
                          $ref: '#/definitions/workflow.State'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all workflow executions
      tags:
        - workflows
  /executions/workflows/{exec_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/workflow.State'
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get workflow execution by ID
      tags:
        - executions
  /executions/workflows/{exec_id}/cancel:
    post:
      consumes:
        - application/json
      description: Cancel a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution canceled successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Cancel workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/pause:
    post:
      consumes:
        - application/json
      description: Pause a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution paused successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Pause workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/resume:
    post:
      consumes:
        - application/json
      description: Resume a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution resumed successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Resume workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/signals:
    post:
      consumes:
        - application/json
      description: Send a signal with payload to a specific workflow execution
      parameters:
        - description: Workflow Execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
        - description: Signal data
          in: body
          name: signal
          required: true
          schema:
            $ref: '#/definitions/wfrouter.SignalRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Signal sent successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.SignalResponse'
                type: object
        "400":
          description: Invalid execution ID or signal data
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Send signal to workflow execution
      tags:
        - executions
  /memory/health:
    get:
      consumes:
        - application/json
      description: Returns comprehensive health information for the memory system
      produces:
        - application/json
      responses:
        "200":
          description: Memory system is healthy
          schema:
            $ref: '#/definitions/memory.SystemHealth'
        "503":
          description: Memory system is unhealthy
          schema:
            $ref: '#/definitions/memory.SystemHealth'
      summary: Get memory system health
      tags:
        - memory
        - health
  /memory/health/{memory_id}:
    get:
      consumes:
        - application/json
      description: Returns health information for a specific memory instance
      parameters:
        - description: Memory Instance ID
          in: path
          name: memory_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Memory instance health retrieved
          schema:
            $ref: '#/definitions/memory.InstanceHealth'
        "404":
          description: Memory instance not found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get memory instance health
      tags:
        - memory
        - health
  /metrics:
    get:
      description: |-
        Exposes application metrics in Prometheus exposition format.
        This endpoint is used by Prometheus servers to scrape metrics.

        The response is in text/plain format following the Prometheus
        exposition format specification.

        Available metrics include:
        - HTTP request rates and latencies
        - Temporal workflow execution metrics
        - System health information
      produces:
        - text/plain
      responses:
        "200":
          description: Metrics in Prometheus format
          schema:
            type: string
        "503":
          description: Monitoring service unavailable
          schema:
            type: string
      summary: Prometheus metrics endpoint
      tags:
        - Operations
  /schedules:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all scheduled workflows with their current status and override information
      produces:
        - application/json
      responses:
        "200":
          description: Schedules retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleListResponse'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all scheduled workflows
      tags:
        - schedules
  /schedules/{workflow_id}:
    delete:
      consumes:
        - application/json
      description: Remove a scheduled workflow from Temporal. The schedule will be recreated on the next
        YAML reload if still defined.
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: Schedule deleted successfully
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Delete schedule
      tags:
        - schedules
    get:
      consumes:
        - application/json
      description: Retrieve detailed information about a specific scheduled workflow including YAML configuration
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Schedule retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get schedule by workflow ID
      tags:
        - schedules
    patch:
      consumes:
        - application/json
      description: Update a scheduled workflow's enabled state and/or cron expression. At least one field
        must be provided. This creates a temporary override that persists until the next YAML reload.
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Update request with at least one field (enabled or cron)
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/schedulerouter.UpdateScheduleRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Schedule updated successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Update schedule
      tags:
        - schedules
  /workflows:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all available workflow configurations
      produces:
        - application/json
      responses:
        "200":
          description: Workflows retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      workflows:
                        items:
                          $ref: '#/definitions/workflow.Config'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all workflows
      tags:
        - workflows
  /workflows/{workflow_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific workflow configuration by its ID
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/workflow.Config'
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get workflow by ID
      tags:
        - workflows
  /workflows/{workflow_id}/agents:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all available agent configurations
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agents retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      agents:
                        items:
                          $ref: '#/definitions/agent.Config'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all agents
      tags:
        - agents
  /workflows/{workflow_id}/agents/{agent_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific agent configuration by its ID
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Agent ID
          example: '"code-assistant"'
          in: path
          name: agent_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agent retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agent.Config'
                type: object
        "400":
          description: Invalid agent ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Agent not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get agent by ID
      tags:
        - agents
  /workflows/{workflow_id}/executions:
    get:
      consumes:
        - application/json
      description: Retrieve all executions for a specific workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      executions:
                        items:
                          $ref: '#/definitions/workflow.State'
                        type: array
                    type: object
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List executions by workflow ID
      tags:
        - workflows
    post:
      consumes:
        - application/json
      description: Trigger the execution of a workflow with provided input data
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Workflow input data
          in: body
          name: input
          required: true
          schema:
            type: object
      produces:
        - application/json
      responses:
        "202":
          description: Workflow triggered successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.ExecuteWorkflowResponse'
                type: object
        "400":
          description: Invalid input or workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Execute workflow
      tags:
        - workflows
  /workflows/{workflow_id}/tasks:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all tasks within a specific workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      tasks:
                        items:
                          $ref: '#/definitions/task.Config'
                        type: array
                    type: object
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List tasks for a workflow
      tags:
        - tasks
  /workflows/{workflow_id}/tasks/{task_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific task configuration by its ID within a workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Task ID
          example: '"validate-input"'
          in: path
          name: task_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Task retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/task.Config'
                type: object
        "400":
          description: Invalid workflow or task ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Task not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get task by ID
      tags:
        - tasks
  /workflows/{workflow_id}/tools:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all available tool configurations
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tools retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      tools:
                        items:
                          $ref: '#/definitions/tool.Config'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all tools
      tags:
        - tools
  /workflows/{workflow_id}/tools/{tool_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific tool configuration by its ID
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Tool ID
          example: '"format-code"'
          in: path
          name: tool_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tool retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tool.Config'
                type: object
        "400":
          description: Invalid tool ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Tool not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get tool by ID
      tags:
        - tools

swagger: "2.0"

tags:
  - description: Workflow management operations
    name: workflows
  - description: Task management operations
    name: tasks
  - description: Agent management operations
    name: agents
  - description: Tool management operations
    name: tools
  - description: Schedule management operations
    name: schedules
  - description: Memory management operations
    name: memory
  - description: Operational endpoints for monitoring and health
    name: Operations
