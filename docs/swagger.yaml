basePath: /api/v0

definitions:
  agent.ActionConfig:
    properties:
      attachments:
        description: Attachments at action scope
        items: {}
        type: array
      cwd:
        $ref: '#/definitions/core.PathCWD'
      id:
        description: |-
          Unique identifier for the action within the agent's scope.
          Used to invoke specific actions programmatically.

          - **Examples:** `"analyze-code"`, `"generate-summary"`, `"validate-data"`
        type: string
      input:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          JSON Schema defining the expected input parameters for this action.
          Enables validation and type checking of inputs before execution.

          If `nil`, the action accepts any input format without validation.

          **Schema format:** JSON Schema Draft 7
      output:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          JSON Schema defining the expected output format from this action.
          Used for validating agent responses and ensuring consistent output structure.

          If `nil`, no output validation is performed.

          **Schema format:** JSON Schema Draft 7
      prompt:
        description: |-
          Detailed instructions for the agent when executing this action.
          Should clearly define the expected behavior, output format, and any constraints.

          **Best practices:**
          - Be specific about the desired outcome
          - Include examples if complex formatting is required
          - Define clear success criteria
          - Specify any limitations or boundaries
        type: string
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Default parameters to provide to the action.
          These are merged with runtime parameters, with runtime values taking precedence.

          **Use cases:**
          - Setting default configuration options
          - Providing constant context values
          - Pre-filling common parameters
    required:
      - prompt
    type: object
  agent.Config:
    properties:
      actions:
        description: |-
          Structured actions the agent can perform with defined input/output schemas.
          Actions provide type-safe interfaces for specific agent capabilities.

          **Example:**
          ```yaml
          actions:
            - id: "review-code"
              prompt: |
                Analyze code {{.input.code}} for quality and improvements
              input:
                type: "object"
                properties:
                  code:
                    type: "string"
                    description: "The code to review"
              output:
                type: "object"
                properties:
                  quality:
                    type: "string"
                    description: "The quality of the code"
          ```

          $ref: inline:#action-configuration
        items:
          $ref: '#/definitions/agent.ActionConfig'
        type: array
      attachments:
        description: Attachments declared at the agent scope.
        items: {}
        type: array
      cwd:
        $ref: '#/definitions/core.PathCWD'
      env:
        allOf:
          - $ref: '#/definitions/core.EnvMap'
        description: |-
          Environment variables available during agent execution.
          Used for configuration, secrets, and runtime settings.

          **Example:**
          ```yaml
          env:
            API_KEY: "{{.env.OPENAI_API_KEY}}"
            DEBUG_MODE: "true"
          ```
      id:
        description: |-
          Unique identifier for the agent within the project scope.
          Used for referencing the agent in workflows and other configurations.

          - **Examples:** `"code-assistant"`, `"data-analyst"`, `"customer-support"`
        type: string
      instructions:
        description: |-
          Provider configuration is now expressed through the polymorphic `Model` field.
          The previous `Config core.ProviderConfig` field has been removed.
          System instructions that define the agent's personality, behavior, and constraints.
          These instructions guide how the agent interprets tasks and generates responses.

          **Best practices:**
          - Be clear and specific about the agent's role
          - Define boundaries and ethical guidelines
          - Include domain-specific knowledge or constraints
          - Use markdown formatting for better structure
        type: string
      knowledge:
        description: Knowledge declares knowledge bindings scoped to this agent.
        items:
          $ref: '#/definitions/core.KnowledgeBinding'
        type: array
      max_iterations:
        description: |-
          Maximum number of reasoning iterations the agent can perform.
          The agent may self-correct and refine its response across multiple iterations
          to improve accuracy and address complex multi-step problems.

          **Default:** `5` iterations

          **Trade-offs:**
          - Higher values enable more thorough problem-solving and self-correction
          - Each iteration consumes additional tokens and increases response latency
          - Configure based on task complexity, accuracy requirements, and cost constraints
        type: integer
      mcps:
        description: |-
          Model Context Protocol (MCP) server configurations.
          MCPs provide standardized interfaces for extending agent capabilities
          with external services and data sources through protocol-based communication.

          **Common MCP integrations:**
          - Database connectors (PostgreSQL, Redis, MongoDB)
          - Search engines (Elasticsearch, Solr)
          - Knowledge bases (vector databases, documentation systems)
          - External APIs (REST, GraphQL, gRPC services)

          MCPs support both stdio and HTTP transport protocols.
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        description: |-
          Memory references enabling the agent to access persistent context.
          Memory provides stateful interactions across workflow steps and sessions.

          **Configuration format:**
          ```yaml
          memory:
            - id: "user_context"  # Memory resource ID
              key: "user:{{.user_id}}"  # Dynamic key with template
              mode: "read-write"  # Access mode (default: "read-write")
          ```

          **Access modes:**
          - `"read-write"`: Full access to read and modify memory
          - `"read-only"`: Can only read existing memory entries
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      model:
        allOf:
          - $ref: '#/definitions/agent.Model'
        description: |-
          Model selects which LLM model to use.
          Supports two forms:
            - string: a model ID to be resolved via the ResourceStore (e.g. "openai-gpt-4o-mini")
            - object: an inline core.ProviderConfig with provider/model/params

          During compile/link, string refs are resolved and merged with inline
          fields following project precedence rules. Defaults are filled from the
          project when neither ref nor inline identity is provided.
      resource:
        description: |-
          Resource identifier for the autoloader system (must be `"agent"`).
          This field enables automatic discovery and registration of agent configurations.
        type: string
      tools:
        description: |-
          Tools available to the agent for extending its capabilities.
          When tools are defined, the agent automatically has `toolChoice` set to `"auto"`,
          enabling autonomous tool selection and invocation during task execution.

          **Tool types supported:**
          - File system operations (read, write, list)
          - API integrations (HTTP requests, webhooks)
          - Data processing utilities (parsing, transformation)
          - Custom business logic (TypeScript/JavaScript execution)

          Tools are referenced by ID and can be shared across multiple agents.
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Default input parameters passed to the agent on every invocation.
          These values are merged with runtime inputs, with runtime values taking precedence.

          **Use cases:**
          - Setting default configuration values
          - Providing constant context or settings
          - Injecting workflow-level parameters
    required:
      - id
      - instructions
    type: object
  agent.Model:
    properties:
      config:
        allOf:
          - $ref: '#/definitions/core.ProviderConfig'
        description: |-
          Config holds an inline provider configuration when specified as a mapping.
          When Ref is set, Config may be merged with the resolved model during linking.
    type: object
  agentrouter.AgentActionDTO:
    properties:
      attachments:
        items: {}
        type: array
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      output:
        $ref: '#/definitions/schema.Schema'
      prompt:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  agentrouter.AgentDTO:
    properties:
      actions:
        items:
          $ref: '#/definitions/agentrouter.AgentActionDTO'
        type: array
      attachments:
        items: {}
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      instructions:
        type: string
      max_iterations:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      model:
        $ref: '#/definitions/agentrouter.AgentModelDTO'
      resource:
        type: string
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        $ref: '#/definitions/core.Input'
    type: object
  agentrouter.AgentExecAsyncResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      exec_url:
        example: https://api.compozy.dev/api/v0/executions/agents/2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
    type: object
  agentrouter.AgentExecRequest:
    properties:
      action:
        description: Action selects a predefined agent action to execute.
        type: string
      prompt:
        description: Prompt supplies an ad-hoc prompt for the agent when no action is provided.
        type: string
      timeout:
        description: Timeout in seconds for synchronous execution.
        type: integer
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: With passes structured input parameters to the agent execution.
    type: object
  agentrouter.AgentExecSyncResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      output:
        $ref: '#/definitions/core.Output'
    type: object
  agentrouter.AgentListItem:
    properties:
      actions:
        items:
          $ref: '#/definitions/agentrouter.AgentActionDTO'
        type: array
      attachments:
        items: {}
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      etag:
        example: abc123
        type: string
      id:
        type: string
      instructions:
        type: string
      max_iterations:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      model:
        $ref: '#/definitions/agentrouter.AgentModelDTO'
      resource:
        type: string
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      with:
        $ref: '#/definitions/core.Input'
    type: object
  agentrouter.AgentModelDTO:
    properties:
      config:
        $ref: '#/definitions/core.ProviderConfig'
      ref:
        type: string
    type: object
  agentrouter.AgentsListResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/agentrouter.AgentListItem'
        type: array
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
    type: object
  agentrouter.ExecutionStatusDTO:
    properties:
      component:
        $ref: '#/definitions/core.ComponentType'
      created_at:
        type: string
      error:
        $ref: '#/definitions/core.Error'
      exec_id:
        type: string
      output:
        $ref: '#/definitions/core.Output'
      status:
        $ref: '#/definitions/core.StatusType'
      task_id:
        type: string
      updated_at:
        type: string
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  core.Author:
    properties:
      contributors:
        description: |-
          Additional contributors who helped develop the project.

          Use this to acknowledge team members, collaborators, or external contributors.
        items:
          $ref: '#/definitions/core.Contributor'
        type: array
      email:
        description: |-
          Email contact for project-related communication.

          Use team emails for shared ownership: `"ai-team@company.com"`
        type: string
      name:
        description: |-
          Name of the author or team responsible for the project.

          Examples: `"Jane Smith"`, `"AI Platform Team"`, `"Data Science Division"`
        type: string
      organization:
        description: |-
          Organization or company affiliation.

          Examples: `"ACME Corporation"`, `"AI Research Lab"`, `"Engineering Division"`
        type: string
      url:
        description: |-
          URL to author's profile, repository, or team page.

          Examples: `"https://github.com/username"`, `"https://company.com/team/ai"`
        type: string
    type: object
  core.CircuitBreakerConfig:
    properties:
      enabled:
        type: boolean
      max_failures:
        type: integer
      reset_timeout:
        description: e.g., "30s"
        type: string
      timeout:
        description: e.g., "100ms"
        type: string
    type: object
  core.ComponentType:
    enum:
      - workflow
      - task
      - agent
      - tool
      - log
    type: string
    x-enum-varnames:
      - ComponentWorkflow
      - ComponentTask
      - ComponentAgent
      - ComponentTool
      - ComponentLog
  core.Contributor:
    properties:
      email:
        description: Email address for contributor contact.
        type: string
      name:
        description: Full name of the contributor.
        type: string
      organization:
        description: Organization or team the contributor belongs to.
        type: string
      url:
        description: |-
          URL to contributor's profile or portfolio.

          Examples: `"https://github.com/username"`, `"https://linkedin.com/in/name"`
        type: string
    type: object
  core.EnvMap:
    additionalProperties:
      type: string
    type: object
  core.Error:
    properties:
      code:
        type: string
      details:
        additionalProperties: {}
        type: object
      message:
        type: string
    type: object
  core.ErrorTransition:
    properties:
      next:
        description: |-
          ID of the error handler task

          - **Example**: "handle-error", "retry-with-fallback"
        type: string
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Error context passed to the handler
          Includes error details: { "error": "{{ .error }}", "attempt": "{{ .retryCount }}" }
    type: object
  core.FlushingStrategyConfig:
    properties:
      summarize_oldest_percent:
        description: |-
          SummarizeOldestPercent is the percentage of the oldest messages to summarize. Only for hybrid_summary.
          E.g., 0.3 means summarize the oldest 30% of messages.
        maximum: 1
        type: number
      summarize_threshold:
        description: |-
          SummarizeThreshold is the percentage of MaxTokens/MaxMessages at which summarization should trigger.
          E.g., 0.8 means trigger summarization when memory is 80% full. Only for hybrid_summary.
        maximum: 1
        type: number
      summary_tokens:
        description: SummaryTokens is the target token count for generated summaries. Only for hybrid_summary.
        type: integer
      type:
        allOf:
          - $ref: '#/definitions/core.FlushingStrategyType'
        description: Type is the kind of flushing strategy to apply (e.g., hybrid_summary).
        enum:
          - hybrid_summary
          - simple_fifo
          - lru
          - token_aware_lru
    required:
      - type
    type: object
  core.FlushingStrategyType:
    enum:
      - token_count
      - message_count
      - hybrid_summary
      - simple_fifo
      - time_based
      - fifo
      - lru
      - token_aware_lru
      - simple_fifo
    type: string
    x-enum-comments:
      TokenAwareLRUFlushing: '#nosec G101'
    x-enum-descriptions:
      - ""
      - ""
      - ""
      - ""
      - ""
      - ""
      - ""
      - '#nosec G101'
      - ""
    x-enum-varnames:
      - TokenCountFlushing
      - MessageCountFlushing
      - HybridSummaryFlushing
      - SimpleFIFOFlushing
      - TimeBased
      - FIFOFlushing
      - LRUFlushing
      - TokenAwareLRUFlushing
      - DefaultFlushingStrategy
  core.GlobalOpts:
    properties:
      heartbeat_timeout:
        description: |-
          Interval for task heartbeat signals
          Used for long-running tasks to indicate progress

          - **Example**: "10s", "30s", "1m"
        type: string
      on_error:
        allOf:
          - $ref: '#/definitions/core.ErrorTransition'
        description: |-
          Error handler configuration
          Defines what happens when a task fails after all retries
      retry_policy:
        allOf:
          - $ref: '#/definitions/core.RetryPolicyConfig'
        description: |-
          Retry configuration for transient failures
          Automatically retries failed tasks with exponential backoff
      schedule_to_close_timeout:
        description: |-
          Total timeout from scheduling to completion
          Default: "6m"

          - **Example**: "1m", "15m", "2h"
        type: string
      schedule_to_start_timeout:
        description: |-
          Maximum time to wait for a task to start executing
          Default: "1m"

          - **Example**: "30s", "5m", "1h"
        type: string
      start_to_close_timeout:
        description: |-
          Maximum time for task execution once started
          Default: "5m"

          - **Example**: "30s", "10m", "1h"
        type: string
    type: object
  core.Input:
    additionalProperties: {}
    type: object
  core.KnowledgeBinding:
    properties:
      fallback:
        type: string
      filters:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      inject_as:
        type: string
      max_tokens:
        type: integer
      min_score:
        type: number
      top_k:
        type: integer
    type: object
  core.LockConfig:
    properties:
      append_ttl:
        description: 'AppendTTL is the lock timeout for append operations (default: "30s")'
        type: string
      clear_ttl:
        description: 'ClearTTL is the lock timeout for clear operations (default: "10s")'
        type: string
      flush_ttl:
        description: 'FlushTTL is the lock timeout for flush operations (default: "5m")'
        type: string
    type: object
  core.MemoryReference:
    properties:
      id:
        type: string
      key:
        description: |-
          Key is a template string that resolves to the actual memory instance key.
          e.g., "support-{{ .workflow.input.conversationId }}"
        type: string
      mode:
        description: Mode defines access permissions (e.g., "read-write", "read-only").
        enum:
          - read-write
          - read-only
        type: string
    required:
      - id
    type: object
  core.Output:
    additionalProperties: {}
    type: object
  core.PathCWD:
    properties:
      path:
        description: Path holds the absolute working directory.
        type: string
    type: object
  core.PersistenceConfig:
    properties:
      circuit_breaker:
        allOf:
          - $ref: '#/definitions/core.CircuitBreakerConfig'
        description: CircuitBreaker configures resilience for persistence operations.
      ttl:
        description: |-
          TTL is the time-to-live for memory instances in this resource.
          Parsed as a duration string (e.g., "24h", "30m").
        type: string
      type:
        allOf:
          - $ref: '#/definitions/core.PersistenceType'
        enum:
          - redis
          - in_memory
    required:
      - ttl
      - type
    type: object
  core.PersistenceType:
    enum:
      - redis
      - in_memory
    type: string
    x-enum-varnames:
      - RedisPersistence
      - InMemoryPersistence
  core.PrivacyPolicyConfig:
    properties:
      default_redaction_string:
        description: DefaultRedactionString is the string to replace redacted content with. Defaults to
          "[REDACTED]".
        type: string
      non_persistable_message_types:
        description: NonPersistableMessageTypes is a list of message types/roles that should not be persisted.
        items:
          type: string
        type: array
      redact_patterns:
        description: RedactPatterns is a list of regex patterns to apply for redacting content.
        items:
          type: string
        type: array
    type: object
  core.ProblemDocument:
    properties:
      code:
        example: invalid_cursor
        type: string
      detail:
        example: Invalid cursor parameter
        type: string
      instance:
        example: /api/v0/workflows
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Bad Request
        type: string
      type:
        example: about:blank
        type: string
    type: object
  core.PromptParams:
    properties:
      max_length:
        description: |-
          MaxLength provides an alternative way to specify maximum response length.
          Typically used by providers that distinguish between length and token limits.
          - **Range**: MinLength to provider-specific maximum
          - **Provider Support**: Primarily local models and some API providers
        type: integer
      max_tokens:
        description: |-
          MaxTokens limits the maximum number of tokens in the generated response.
          This parameter is crucial for cost control and response time management.
          - **Range**: 1 to model-specific maximum (e.g., 8192 for GPT-4)
          - **Default**: Provider-specific default (typically 1000-2000)
        type: integer
      min_length:
        description: |-
          MinLength specifies the minimum number of tokens that must be generated.
          Prevents the model from generating responses that are too short.
          - **Range**: 1 to MaxTokens
          - **Provider Support**: Limited; primarily local models
        type: integer
      repetition_penalty:
        description: |-
          RepetitionPenalty reduces the likelihood of repeating the same tokens.
          Values > 1.0 penalize repetition, values < 1.0 encourage it.
          - **Range**: 0.1 to 2.0
          - **Recommended**: 1.0 (no penalty) to 1.2 (moderate penalty)
          - **Provider Support**: Primarily local models (Ollama, etc.)
        type: number
      seed:
        description: |-
          Seed provides a random seed for reproducible outputs.
          When set, the same input with the same parameters will generate identical responses.
          - **Use Cases**: Testing, debugging, demonstration, A/B testing
          > **Note:**: Not all providers support seeding; OpenAI and some others do
        type: integer
      stop_words:
        description: |-
          StopWords defines a list of strings that will halt text generation when encountered.
          Useful for creating structured outputs or preventing unwanted content patterns.

          - **Example**: `["END", "STOP", "\n\n---"]` for section-based content
          > **Note:**: Not all providers support stop words; check provider documentation
        items:
          type: string
        type: array
      temperature:
        description: |-
          Temperature controls the randomness of the generated text.
          Lower values produce more deterministic, focused responses.
          Higher values increase creativity and variation but may reduce coherence.
          - **Range**: 0.0 (deterministic) to 1.0 (maximum randomness)
          - **Recommended**: 0.1-0.3 for factual tasks, 0.7-0.9 for creative tasks
        type: number
      top_k:
        description: |-
          TopK limits the number of highest probability tokens considered during sampling.
          Lower values focus on the most likely tokens, higher values allow more variety.
          - **Range**: 1 to vocabulary size (typically 1-100)
          - **Provider Support**: Primarily Google models and some local models
        type: integer
      top_p:
        description: |-
          TopP (nucleus sampling) considers only tokens with cumulative probability up to this value.
          Dynamically adjusts the vocabulary size based on probability distribution.
          - **Range**: 0.0 to 1.0
          - **Recommended**: 0.9 for balanced outputs, 0.95 for more variety
        type: number
    type: object
  core.ProviderConfig:
    properties:
      api_key:
        description: |-
          APIKey contains the authentication key for the AI provider.

          - **Security**: Use template references to environment variables.
          - **Examples**: `"{{ .env.OPENAI_API_KEY }}"`, `"{{ .secrets.ANTHROPIC_KEY }}"`
          > **Note:**: Required for most cloud providers, optional for local providers
        type: string
      api_url:
        description: |-
          APIURL specifies a custom API endpoint for the provider.
          **Use Cases**:
            - Local model hosting (Ollama, OpenAI-compatible servers)
            - Enterprise API gateways
            - Regional API endpoints
            - Custom proxy servers

          **Examples**: `"http://localhost:11434"`, `"https://api.openai.com/v1"`
        type: string
      default:
        description: |-
          Default indicates that this model should be used as the fallback when no explicit
          model configuration is provided at the task or agent level.

          **Behavior**:
            - Only one model per project can be marked as default
            - When set to true, this model will be used for tasks/agents without explicit model config
            - Validation ensures at most one default model per project

          **Example**:
          ```yaml
          models:
            - provider: openai
              model: gpt-4
              default: true  # This will be used by default
          ```
        type: boolean
      max_tool_iterations:
        description: |-
          MaxToolIterations optionally caps the maximum number of tool-call iterations
          during a single LLM request when tools are available.
          When > 0, overrides the global default for this model; 0 uses the global default.
        minimum: 0
        type: integer
      model:
        description: |-
          Model defines the specific model identifier to use with the provider.
          Model names are provider-specific and determine capabilities and pricing.

          - **Examples**:
            - OpenAI: `"gpt-4-turbo"`, `"gpt-3.5-turbo"`
            - Anthropic: `"claude-4-opus"`, `"claude-3-5-haiku-latest"`
            - Google: `"gemini-pro"`, `"gemini-pro-vision"`
            - Ollama: `"llama2:13b"`, `"mistral:7b"`
        type: string
      organization:
        description: |-
          Organization specifies the organization ID for providers that support it.
          - **Primary Use**: OpenAI organization management for billing and access control

          - **Example**: `"org-123456789abcdef"`
          > **Note:**: Optional for most providers
        type: string
      params:
        allOf:
          - $ref: '#/definitions/core.PromptParams'
        description: |-
          Params contains the generation parameters that control LLM behavior.
          These parameters are applied to all requests using this provider configuration.
          Can be overridden at the task or action level for specific requirements.
      provider:
        allOf:
          - $ref: '#/definitions/core.ProviderName'
        description: |-
          Provider specifies which AI service to use for LLM operations.
          Must match one of the supported ProviderName constants.

          - **Examples**: `"openai"`, `"anthropic"`, `"google"`, `"ollama"`
    type: object
  core.ProviderName:
    enum:
      - openai
      - groq
      - anthropic
      - google
      - ollama
      - deepseek
      - xai
      - mock
    type: string
    x-enum-comments:
      ProviderAnthropic: Anthropic Claude models
      ProviderDeepSeek: DeepSeek AI models
      ProviderGoogle: Google Gemini models
      ProviderGroq: Groq fast inference platform
      ProviderMock: Mock provider for testing
      ProviderOllama: Ollama local model hosting
      ProviderOpenAI: OpenAI GPT models (GPT-4, GPT-3.5, etc.)
      ProviderXAI: xAI Grok models
    x-enum-descriptions:
      - OpenAI GPT models (GPT-4, GPT-3.5, etc.)
      - Groq fast inference platform
      - Anthropic Claude models
      - Google Gemini models
      - Ollama local model hosting
      - DeepSeek AI models
      - xAI Grok models
      - Mock provider for testing
    x-enum-varnames:
      - ProviderOpenAI
      - ProviderGroq
      - ProviderAnthropic
      - ProviderGoogle
      - ProviderOllama
      - ProviderDeepSeek
      - ProviderXAI
      - ProviderMock
  core.RetryPolicyConfig:
    properties:
      backoff_coefficient:
        description: |-
          Multiplier for exponential backoff
          - **Default:** `2.0` (doubles each time)
          - **Example:** `1.5`, `2.0`, `3.0`
        type: number
      initial_interval:
        description: |-
          Initial delay before first retry
          - **Default:** `"1s"`
          - **Example:** `"500ms"`, `"2s"`, `"1m"`
        type: string
      maximum_attempts:
        description: |-
          Maximum retry attempts
          - **Default:** `3`
          - **Example:** `5` for critical operations
        type: integer
      maximum_interval:
        description: |-
          Maximum delay between retries
          - **Default:** `"1m"`
          - **Example:** `"30s"`, `"5m"`, `"1h"`
        type: string
      non_retryable_error_types:
        description: |-
          Error types that should not trigger retries
          - **Example:** `["ValidationError", "AuthenticationError"]`
        items:
          type: string
        type: array
    type: object
  core.StatusType:
    enum:
      - PENDING
      - RUNNING
      - SUCCESS
      - FAILED
      - TIMED_OUT
      - CANCELED
      - WAITING
      - PAUSED
    type: string
    x-enum-varnames:
      - StatusPending
      - StatusRunning
      - StatusSuccess
      - StatusFailed
      - StatusTimedOut
      - StatusCanceled
      - StatusWaiting
      - StatusPaused
  core.SuccessTransition:
    properties:
      next:
        description: |-
          ID of the next task to execute
          - **Example:** `"process-results"`, `"send-notification"`
        type: string
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Input parameters to pass to the next task
          - **Supports:** Template expressions like `{ "data": "{{ .output.result }}" }`
    type: object
  core.TokenAllocation:
    properties:
      long_term:
        description: LongTerm is the percentage of tokens allocated for summarized or older important
          context.
        maximum: 1
        minimum: 0
        type: number
      short_term:
        description: ShortTerm is the percentage of tokens allocated for recent messages.
        maximum: 1
        minimum: 0
        type: number
      system:
        description: System is the percentage of tokens reserved for system prompts or critical instructions.
        maximum: 1
        minimum: 0
        type: number
      user_defined:
        additionalProperties:
          format: float64
          type: number
        description: UserDefined is a map for additional custom allocations if needed.
        type: object
    type: object
  core.TokenProviderConfig:
    properties:
      api_key:
        description: API key for real-time counting (can be env var reference like ${OPENAI_API_KEY})
        type: string
      api_key_env:
        description: Environment variable name containing the API key
        type: string
      endpoint:
        description: Optional custom endpoint
        type: string
      fallback:
        description: Fallback strategy
        type: string
      model:
        description: Model name
        type: string
      provider:
        description: '"openai", "anthropic", etc.'
        type: string
      settings:
        additionalProperties:
          type: string
        description: Provider-specific settings
        type: object
    type: object
  core.Type:
    enum:
      - token_based
      - message_count_based
      - buffer
    type: string
    x-enum-varnames:
      - TokenBasedMemory
      - MessageCountBasedMemory
      - BufferMemory
  gin.H:
    additionalProperties: {}
    type: object
  httpdto.PageInfoDTO:
    properties:
      limit:
        example: 50
        type: integer
      next_cursor:
        example: v2:after:tool-001
        type: string
      prev_cursor:
        example: v2:before:tool-000
        type: string
      total:
        example: 2
        type: integer
    type: object
  knowledge.BaseConfig:
    properties:
      chunking:
        $ref: '#/definitions/knowledge.ChunkingConfig'
      description:
        type: string
      embedder:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/knowledge.MetadataConfig'
      preprocess:
        $ref: '#/definitions/knowledge.PreprocessConfig'
      retrieval:
        $ref: '#/definitions/knowledge.RetrievalConfig'
      sources:
        items:
          $ref: '#/definitions/knowledge.SourceConfig'
        type: array
      vector_db:
        type: string
    type: object
  knowledge.ChunkStrategy:
    enum:
      - recursive_text_splitter
    type: string
    x-enum-varnames:
      - ChunkStrategyRecursiveTextSplitter
  knowledge.ChunkingConfig:
    properties:
      overlap:
        type: integer
      size:
        type: integer
      strategy:
        $ref: '#/definitions/knowledge.ChunkStrategy'
    type: object
  knowledge.MetadataConfig:
    properties:
      owners:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
    type: object
  knowledge.PreprocessConfig:
    properties:
      dedupe:
        type: boolean
      remove_html:
        type: boolean
    type: object
  knowledge.RetrievalConfig:
    properties:
      fallback:
        type: string
      filters:
        additionalProperties:
          type: string
        type: object
      inject_as:
        type: string
      max_tokens:
        type: integer
      min_score:
        type: number
      top_k:
        type: integer
    type: object
  knowledge.SourceConfig:
    properties:
      bucket:
        type: string
      options:
        additionalProperties:
          type: string
        type: object
      path:
        type: string
      paths:
        items:
          type: string
        type: array
      prefix:
        type: string
      provider:
        type: string
      type:
        $ref: '#/definitions/knowledge.SourceType'
      urls:
        items:
          type: string
        type: array
      video_id:
        type: string
    type: object
  knowledge.SourceType:
    enum:
      - pdf_url
      - markdown_glob
      - cloud_storage
      - media_transcript
    type: string
    x-enum-varnames:
      - SourceTypePDFURL
      - SourceTypeMarkdownGlob
      - SourceTypeCloudStorage
      - SourceTypeMediaTranscript
  knowledgerouter.KnowledgeBaseListResponse:
    properties:
      knowledge_bases:
        items:
          additionalProperties: {}
          type: object
        type: array
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
    type: object
  knowledgerouter.KnowledgeBaseResponse:
    properties:
      knowledge_base:
        additionalProperties: {}
        type: object
    type: object
  knowledgerouter.KnowledgeIngestRequest:
    properties:
      strategy:
        example: replace
        type: string
    type: object
  knowledgerouter.KnowledgeIngestResponse:
    properties:
      binding_id:
        example: binding-123
        type: string
      chunks:
        example: 16
        type: integer
      documents:
        example: 2
        type: integer
      knowledge_base_id:
        example: support
        type: string
      persisted:
        example: 16
        type: integer
    type: object
  knowledgerouter.KnowledgeMatch:
    properties:
      binding_id:
        example: binding-123
        type: string
      content:
        example: Reset your password by visiting the account settings page.
        type: string
      metadata:
        additionalProperties: {}
        type: object
      score:
        example: 0.83
        type: number
      token_estimate:
        example: 120
        type: integer
    type: object
  knowledgerouter.KnowledgeQueryRequest:
    type: object
  knowledgerouter.KnowledgeQueryResponse:
    properties:
      matches:
        items:
          $ref: '#/definitions/knowledgerouter.KnowledgeMatch'
        type: array
    type: object
  mcp.Config:
    properties:
      args:
        description: |-
          Args supplies additional arguments passed to the command when spawning local MCP processes.

          Only used when `command` is provided (stdio transport). Ignored when `url` is configured.
          Runtime validation enforces that `command` and `url` are mutually exclusive.
          Use this to provide flags or subcommands while keeping Command focused on the executable.
          Example:
          command: "uvx"
          args: ["mcp-server-fetch", "--port", "9000"]
        items:
          type: string
        type: array
      command:
        description: |-
          Command is the **executable command** to spawn a local MCP server process.

          Used for stdio transport to run MCP servers as child processes.
          Supports both direct executables and complex commands with arguments.

          - **Examples**:
          ```yaml
          # Simple executable
          command: "mcp-server-filesystem"

          # Command with arguments
          command: "python /app/mcp_server.py --mode production"

          # Docker container
          command: "docker run --rm -i mcp/postgres:latest"
          ```

          **Security Note**: Commands are parsed using shell lexing for safety.
          Avoid user-provided input in commands.
        type: string
      env:
        additionalProperties:
          type: string
        description: |-
          Env contains **environment variables** to pass to the MCP server process.

          Only used when `command` is specified for spawning local processes.
          Useful for passing configuration, secrets, or runtime parameters.

          - **Examples**:
          ```yaml
          env:
            DATABASE_URL: "postgres://user:pass@localhost/db"
            API_KEY: "{{ .env.GITHUB_TOKEN }}"
            LOG_LEVEL: "debug"
            WORKSPACE_DIR: "/data/workspace"
          ```

          **Template Support**: Values can use Go template syntax to reference
          environment variables from the host system.
        type: object
      headers:
        additionalProperties:
          type: string
        description: |-
          Headers contains HTTP headers to include when connecting to remote MCP servers (SSE/HTTP).
          Useful for passing Authorization tokens, custom auth headers, or version negotiation.
          Example:
          headers:
            Authorization: "Bearer {{ .env.GITHUB_MCP_OAUTH_TOKEN }}"
        type: object
      id:
        description: |-
          ID is the **unique identifier** for this MCP server configuration.

          This identifier is used throughout the system to reference this specific MCP server.
          Choose descriptive IDs that reflect the server's purpose.

          - **Examples**:
          - `filesystem` - for file system operations
          - `postgres-db` - for PostgreSQL database access
          - `github-api` - for GitHub integration
          - `python-runtime` - for Python code execution
        type: string
      max_sessions:
        description: |-
          MaxSessions defines the **maximum number of concurrent sessions** allowed.

          Helps manage resource usage and prevent server overload.
          Each agent connection typically creates one session.

          **Values**:
          - `0` or negative: Unlimited sessions (default)
          - Positive number: Maximum concurrent sessions

          - **Examples**:
          ```yaml
          max_sessions: 10  # Allow up to 10 concurrent connections
          max_sessions: 1  # Single session only (useful for stateful servers)
          max_sessions: 0  # Unlimited sessions
          ```
        type: integer
      proto:
        description: |-
          Proto specifies the **MCP protocol version** to use.

          Different protocol versions may support different features, message formats,
          or capabilities. Always use the version compatible with your MCP server.

          **Format**: `YYYY-MM-DD` (e.g., "2025-03-26")

          **Default**: `DefaultProtocolVersion` ("2025-03-26")

          **Version History**:
          - `2025-03-26` - Latest version with streaming support
          - `2024-12-01` - Initial protocol release
        type: string
      resource:
        description: |-
          Resource reference for the MCP server (optional)

          If not specified, defaults to the value of ID.
          Used for resource identification and referencing in Compozy's resource system.
        type: string
      start_timeout:
        allOf:
          - $ref: '#/definitions/time.Duration'
        description: |-
          StartTimeout is the **maximum time to wait** for the MCP server to start.

          Only applicable when using `command` to spawn local processes.
          Helps detect and handle startup failures gracefully.

          **Format**: Go duration string (e.g., "30s", "1m", "500ms")

          **Default**: No timeout (waits indefinitely)

          - **Examples**:
          ```yaml
          start_timeout: 30s  # Wait up to 30 seconds
          start_timeout: 2m  # Wait up to 2 minutes
          start_timeout: 500ms  # Wait up to 500 milliseconds
          ```

          **Recommendation**: Set to at least 10-30s for Docker-based servers.
      transport:
        allOf:
          - $ref: '#/definitions/mcpproxy.TransportType'
        description: |-
          Transport defines the **communication transport mechanism**.

          Choose the transport based on your MCP server's capabilities and deployment model.

          **Supported Values**:

          | Transport | Description | Use Case |
          |-----------|-------------|----------|
          | `sse` | Server-Sent Events | HTTP servers with real-time streaming |
          | `streamable-http` | HTTP with streaming | Large responses, file transfers |
          | `stdio` | Standard I/O | Local processes, Docker containers |

          **Default**: `sse`

          - **Examples**:
          ```yaml
          # Remote server with SSE
          transport: sse

          # Local process with stdio
          transport: stdio

          # HTTP server with large file support
          transport: streamable-http
          ```
      url:
        description: |-
          URL is the **endpoint for remote MCP servers**.

          Required for HTTP-based transports (SSE, streamable-http).
          Must be a valid HTTP or HTTPS URL pointing to an MCP-compatible endpoint.

          **Format**: `http[s]://host[:port]/path`

          - **Examples**:
          ```yaml
          url: "http://localhost:3000/mcp"
          url: "https://api.example.com/v1/mcp"
          url: "http://mcp-proxy:6001/filesystem"
          ```

          **Note**: Mutually exclusive with `command` - use either URL or Command, not both.
        type: string
    type: object
  mcpproxy.CallToolRequest:
    properties:
      arguments:
        additionalProperties: {}
        type: object
      mcpName:
        type: string
      toolName:
        type: string
    type: object
  mcpproxy.ConnectionStatus:
    enum:
      - disconnected
      - connecting
      - connected
      - error
    type: string
    x-enum-varnames:
      - StatusDisconnected
      - StatusConnecting
      - StatusConnected
      - StatusError
  mcpproxy.ListMCPsResponse:
    properties:
      count:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcpproxy.MCPDetailsResponse'
        type: array
    type: object
  mcpproxy.MCPDefinition:
    properties:
      args:
        items:
          type: string
        type: array
      autoReconnect:
        description: Behavior configuration
        type: boolean
      command:
        description: Stdio transport configuration
        type: string
      createdAt:
        type: string
      description:
        type: string
      env:
        additionalProperties:
          type: string
        type: object
      headers:
        additionalProperties:
          type: string
        type: object
      healthCheckEnabled:
        type: boolean
      healthCheckInterval:
        $ref: '#/definitions/time.Duration'
      logEnabled:
        type: boolean
      maxReconnects:
        type: integer
      name:
        description: Core identification
        minLength: 1
        type: string
      reconnectDelay:
        $ref: '#/definitions/time.Duration'
      tags:
        additionalProperties:
          type: string
        description: Metadata
        type: object
      timeout:
        $ref: '#/definitions/time.Duration'
      toolFilter:
        allOf:
          - $ref: '#/definitions/mcpproxy.ToolFilter'
        description: Tool filtering
      transport:
        $ref: '#/definitions/mcpproxy.TransportType'
      updatedAt:
        type: string
      url:
        description: HTTP-based transport configuration (SSE and streamable-http)
        type: string
    required:
      - name
      - transport
    type: object
  mcpproxy.MCPDetailsResponse:
    properties:
      definition:
        $ref: '#/definitions/mcpproxy.MCPDefinition'
      status:
        $ref: '#/definitions/mcpproxy.MCPStatus'
    type: object
  mcpproxy.MCPStatus:
    properties:
      avgResponseTime:
        $ref: '#/definitions/time.Duration'
      lastConnected:
        type: string
      lastError:
        type: string
      lastErrorTime:
        type: string
      name:
        type: string
      reconnectAttempts:
        type: integer
      status:
        $ref: '#/definitions/mcpproxy.ConnectionStatus'
      totalErrors:
        type: integer
      totalRequests:
        type: integer
      upTime:
        $ref: '#/definitions/time.Duration'
    type: object
  mcpproxy.ToolFilter:
    properties:
      list:
        items:
          type: string
        type: array
      mode:
        $ref: '#/definitions/mcpproxy.ToolFilterMode'
    required:
      - mode
    type: object
  mcpproxy.ToolFilterMode:
    enum:
      - allow
      - block
    type: string
    x-enum-varnames:
      - ToolFilterAllow
      - ToolFilterBlock
  mcpproxy.TransportType:
    enum:
      - stdio
      - sse
      - streamable-http
    type: string
    x-enum-varnames:
      - TransportStdio
      - TransportSSE
      - TransportStreamableHTTP
  mcprouter.MCPDTO:
    properties:
      args:
        description: Args lists additional command arguments when the MCP server runs via stdio transport.
        items:
          type: string
        type: array
      command:
        type: string
      env:
        additionalProperties:
          type: string
        type: object
      headers:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      max_sessions:
        type: integer
      proto:
        type: string
      resource:
        type: string
      start_timeout:
        $ref: '#/definitions/time.Duration'
      transport:
        type: string
      url:
        type: string
    type: object
  mcprouter.MCPListItem:
    properties:
      args:
        description: Args lists additional command arguments when the MCP server runs via stdio transport.
        items:
          type: string
        type: array
      command:
        type: string
      env:
        additionalProperties:
          type: string
        type: object
      etag:
        example: abc123
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      max_sessions:
        type: integer
      proto:
        type: string
      resource:
        type: string
      start_timeout:
        $ref: '#/definitions/time.Duration'
      transport:
        type: string
      url:
        type: string
    type: object
  mcprouter.MCPsListResponse:
    properties:
      mcps:
        items:
          $ref: '#/definitions/mcprouter.MCPListItem'
        type: array
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
    type: object
  memory.InstanceHealth:
    properties:
      consecutive_failures:
        type: integer
      error_message:
        type: string
      healthy:
        type: boolean
      last_checked:
        type: string
      memory_id:
        type: string
      token_usage:
        $ref: '#/definitions/memory.TokenUsageHealth'
    type: object
  memory.SystemHealth:
    properties:
      healthy:
        type: boolean
      healthy_instances:
        type: integer
      instance_health:
        additionalProperties:
          $ref: '#/definitions/memory.InstanceHealth'
        type: object
      last_checked:
        type: string
      system_errors:
        items:
          type: string
        type: array
      total_instances:
        type: integer
      unhealthy_instances:
        type: integer
    type: object
  memory.TokenUsageHealth:
    properties:
      max_tokens:
        type: integer
      near_limit:
        type: boolean
      usage_percentage:
        type: number
      used:
        type: integer
    type: object
  memoryrouter.MemoriesListResponse:
    properties:
      memories:
        items:
          $ref: '#/definitions/memoryrouter.MemoryListItem'
        type: array
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
    type: object
  memoryrouter.MemoryDTO:
    properties:
      default_key_template:
        type: string
      description:
        type: string
      flushing:
        $ref: '#/definitions/core.FlushingStrategyConfig'
      id:
        type: string
      locking:
        $ref: '#/definitions/core.LockConfig'
      max_context_ratio:
        type: number
      max_messages:
        type: integer
      max_tokens:
        type: integer
      persistence:
        $ref: '#/definitions/core.PersistenceConfig'
      privacy_policy:
        $ref: '#/definitions/core.PrivacyPolicyConfig'
      resource:
        type: string
      token_allocation:
        $ref: '#/definitions/core.TokenAllocation'
      token_provider:
        $ref: '#/definitions/core.TokenProviderConfig'
      type:
        $ref: '#/definitions/core.Type'
      version:
        type: string
    type: object
  memoryrouter.MemoryListItem:
    properties:
      default_key_template:
        type: string
      description:
        type: string
      etag:
        example: abc123
        type: string
      flushing:
        $ref: '#/definitions/core.FlushingStrategyConfig'
      id:
        type: string
      locking:
        $ref: '#/definitions/core.LockConfig'
      max_context_ratio:
        type: number
      max_messages:
        type: integer
      max_tokens:
        type: integer
      persistence:
        $ref: '#/definitions/core.PersistenceConfig'
      privacy_policy:
        $ref: '#/definitions/core.PrivacyPolicyConfig'
      resource:
        type: string
      token_allocation:
        $ref: '#/definitions/core.TokenAllocation'
      token_provider:
        $ref: '#/definitions/core.TokenProviderConfig'
      type:
        $ref: '#/definitions/core.Type'
      version:
        type: string
    type: object
  memrouter.AppendMemoryRequest:
    properties:
      key:
        type: string
      messages:
        items:
          additionalProperties: {}
          type: object
        type: array
    required:
      - key
      - messages
    type: object
  memrouter.ClearMemoryRequest:
    properties:
      backup:
        type: boolean
      confirm:
        type: boolean
      key:
        type: string
    required:
      - confirm
      - key
    type: object
  memrouter.DeleteMemoryRequest:
    properties:
      key:
        type: string
    required:
      - key
    type: object
  memrouter.FlushMemoryRequest:
    properties:
      dry_run:
        type: boolean
      force:
        type: boolean
      key:
        type: string
      max_keys:
        type: integer
      strategy:
        type: string
    required:
      - key
    type: object
  memrouter.WriteMemoryRequest:
    properties:
      key:
        type: string
      messages:
        items:
          additionalProperties: {}
          type: object
        type: array
    required:
      - key
      - messages
    type: object
  modelrouter.ModelDTO:
    properties:
      api_key:
        type: string
      api_url:
        type: string
      default:
        type: boolean
      id:
        type: string
      max_tool_iterations:
        type: integer
      model:
        type: string
      organization:
        type: string
      params:
        $ref: '#/definitions/core.PromptParams'
      provider:
        type: string
      resource:
        type: string
    type: object
  modelrouter.ModelListItem:
    properties:
      api_key:
        type: string
      api_url:
        type: string
      default:
        type: boolean
      etag:
        example: abc123
        type: string
      id:
        type: string
      max_tool_iterations:
        type: integer
      model:
        type: string
      organization:
        type: string
      params:
        $ref: '#/definitions/core.PromptParams'
      provider:
        type: string
      resource:
        type: string
    type: object
  modelrouter.ModelsListResponse:
    properties:
      models:
        items:
          $ref: '#/definitions/modelrouter.ModelListItem'
        type: array
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
    type: object
  projectrouter.ProjectDTO:
    properties:
      author:
        $ref: '#/definitions/core.Author'
      autoload:
        additionalProperties: {}
        type: object
      config:
        additionalProperties: {}
        type: object
      description:
        type: string
      memories:
        items:
          additionalProperties: {}
          type: object
        type: array
      models:
        items:
          additionalProperties: {}
          type: object
        type: array
      monitoring:
        additionalProperties: {}
        type: object
      name:
        type: string
      runtime:
        additionalProperties: {}
        type: object
      schemas:
        items:
          additionalProperties: {}
          type: object
        type: array
      tools:
        items:
          additionalProperties: {}
          type: object
        type: array
      version:
        type: string
      workflows:
        items:
          additionalProperties: {}
          type: object
        type: array
    type: object
  router.CreateUserRequest:
    properties:
      email:
        type: string
      role:
        type: string
    required:
      - email
    type: object
  router.ErrorInfo:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  router.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  router.GenerateKeyData:
    properties:
      api_key:
        type: string
    type: object
  router.GenerateKeyResponse:
    properties:
      data:
        $ref: '#/definitions/router.GenerateKeyData'
      message:
        type: string
    type: object
  router.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/router.ErrorInfo'
      message:
        type: string
      status:
        type: integer
    type: object
  router.UpdateUserRequest:
    properties:
      email:
        type: string
      role:
        type: string
    type: object
  schedulerouter.ScheduleInfoResponse:
    properties:
      cron:
        example: 0 0 9 * * 1-5
        type: string
      enabled:
        example: true
        type: boolean
      is_override:
        example: false
        type: boolean
      last_run_status:
        example: success
        type: string
      last_run_time:
        example: "2024-01-14T09:00:00-05:00"
        type: string
      next_run_time:
        example: "2024-01-15T09:00:00-05:00"
        type: string
      schedule_id:
        example: schedule-my-project-daily-report
        type: string
      timezone:
        example: America/New_York
        type: string
      workflow_id:
        example: daily-report
        type: string
      yaml_config:
        $ref: '#/definitions/workflow.Schedule'
    type: object
  schedulerouter.ScheduleListResponse:
    properties:
      schedules:
        items:
          $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
        type: array
      total:
        example: 5
        type: integer
    type: object
  schedulerouter.UpdateScheduleRequest:
    properties:
      cron:
        example: 0 0 */10 * * *
        type: string
      enabled:
        example: false
        type: boolean
    type: object
  schema.Schema:
    additionalProperties: {}
    type: object
  schemarouter.SchemaDTO:
    properties:
      body:
        items:
          type: integer
        type: array
    type: object
  schemarouter.SchemaListItem:
    properties:
      body:
        items:
          type: integer
        type: array
      etag:
        example: abc123
        type: string
    type: object
  schemarouter.SchemasListResponse:
    properties:
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
      schemas:
        items:
          $ref: '#/definitions/schemarouter.SchemaListItem'
        type: array
    type: object
  service.AppendResponse:
    properties:
      appended:
        type: integer
      key:
        type: string
      success:
        type: boolean
      total_count:
        type: integer
    type: object
  service.DeleteResponse:
    properties:
      key:
        type: string
      success:
        type: boolean
    type: object
  service.WriteResponse:
    properties:
      count:
        type: integer
      key:
        type: string
      success:
        type: boolean
    type: object
  task.ClearConfig:
    properties:
      backup:
        description: |-
          Backup data before clearing
          Implementation-dependent, may not be available for all backends
        type: boolean
      confirm:
        description: |-
          Confirm must be true to execute clear operation
          Required safety check to prevent accidental data loss
        type: boolean
    type: object
  task.CollectionMode:
    enum:
      - parallel
      - sequential
    type: string
    x-enum-varnames:
      - CollectionModeParallel
      - CollectionModeSequential
  task.Config:
    properties:
      CWD:
        allOf:
          - $ref: '#/definitions/core.PathCWD'
        description: |-
          Current working directory for file operations within the task
          Inherited from parent context if not explicitly set
      action:
        description: |-
          Action identifier that describes what this task does
          Used for logging and debugging purposes
          - **Example**: "process-user-data", "send-notification"
        type: string
      agent:
        allOf:
          - $ref: '#/definitions/agent.Config'
        description: |-
          Agent configuration for AI-powered task execution
          Only used when the task needs to interact with an LLM agent
          Mutually exclusive with Tool field
          $ref: schema://agents
      attachments:
        description: Attachments declared at the task scope are available to all nested agents/actions.
        items: {}
        type: array
      batch:
        description: |-
          Batch size for processing items in groups (0 = no batching)
          Useful for rate limiting or managing resource usage
          - **Example**: 10 means process 10 items at a time
        type: integer
      batch_size:
        description: |-
          BatchSize for operations that process multiple keys
          Controls how many keys are processed in each batch
          Default: 100, Maximum: 10,000
        type: integer
      clear_config:
        allOf:
          - $ref: '#/definitions/task.ClearConfig'
        description: |-
          Configuration for clear operations
          Only used when operation is "clear"
      condition:
        description: |-
          CEL expression for conditional task execution or routing decisions
          Task only executes if condition evaluates to true
          - **Example**: "input.status == 'approved' && input.amount > 1000"
        type: string
      config:
        allOf:
          - $ref: '#/definitions/core.GlobalOpts'
        description: |-
          Global configuration options inherited from parent contexts
          Includes provider settings, API keys, and other global parameters
      env:
        allOf:
          - $ref: '#/definitions/core.EnvMap'
        description: |-
          Environment variables available during task execution
          Can override or extend workflow-level environment variables
          - **Example**: { "API_KEY": "{{ .env.SECRET_KEY }}" }
      file_path:
        description: |-
          Absolute file path where this task configuration was loaded from
          Set automatically during configuration loading
        type: string
      filter:
        description: |-
          Filter is an optional CEL expression to filter items before processing
          Each item is available as 'item' in the expression
          - **Example**: "item.status != 'inactive'" or "item.age > 18"
        type: string
      final:
        description: |-
          Marks this task as a terminal node in the workflow
          No subsequent tasks will execute after a final task
        type: boolean
      flush_config:
        allOf:
          - $ref: '#/definitions/task.FlushConfig'
        description: |-
          Configuration for flush operations
          Only used when operation is "flush"
      health_config:
        allOf:
          - $ref: '#/definitions/task.HealthConfig'
        description: |-
          Configuration for health check operations
          Only used when operation is "health"
      id:
        description: |-
          Unique identifier for the task instance within a workflow
          Must be unique within the workflow scope
        type: string
      index_var:
        description: |-
          IndexVar is the variable name for the current index (default: "index")
          Available in task templates as {{ .index }} or custom name
          Zero-based index of the current item
        type: string
      input:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          Schema definition for validating task input parameters
          Follows JSON Schema specification for type validation
          Format:
            type: object
            properties:
              user_id: { type: string, description: "User identifier" }
            required: ["user_id"]
      item_var:
        description: |-
          ItemVar is the variable name for the current item (default: "item")
          Available in task templates as {{ .item }} or custom name
          - **Example**: Set to "user" to access as {{ .user }} in templates
        type: string
      items:
        description: |-
          Items is a template expression that evaluates to an array
          The expression should resolve to a list of items to iterate over
          - **Example**: "{{ .workflow.input.users }}" or "{{ range(1, 10) }}"
        type: string
      key_template:
        description: |-
          KeyTemplate is a template expression for the memory key
          Supports template variables for dynamic key generation
          - **Example**: "user:{{ .workflow.input.user_id }}:profile"
        type: string
      knowledge:
        description: Knowledge declares task-scoped knowledge bindings (MVP single binding).
        items:
          $ref: '#/definitions/core.KnowledgeBinding'
        type: array
      max_iterations:
        description: |-
          Maximum number of reasoning iterations the agent can perform.
          The agent may self-correct and refine its response across multiple iterations
          to improve accuracy and address complex multi-step problems.

          **Default:** `5` iterations

          **Trade-offs:**
          - Higher values enable more thorough problem-solving and self-correction
          - Each iteration consumes additional tokens and increases response latency
          - Configure based on task complexity, accuracy requirements, and cost constraints
        type: integer
      max_keys:
        description: |-
          MaxKeys limits the number of keys processed
          Safety limit to prevent runaway operations
          Default: 1,000, Maximum: 50,000
        type: integer
      max_workers:
        description: |-
          MaxWorkers limits the number of concurrent task executions
          0 means no limit (all tasks run concurrently)
          - **Example**: 5 means at most 5 tasks run at the same time
        type: integer
      mcps:
        description: |-
          Model Context Protocol (MCP) server configurations.
          MCPs provide standardized interfaces for extending agent capabilities
          with external services and data sources through protocol-based communication.

          **Common MCP integrations:**
          - Database connectors (PostgreSQL, Redis, MongoDB)
          - Search engines (Elasticsearch, Solr)
          - Knowledge bases (vector databases, documentation systems)
          - External APIs (REST, GraphQL, gRPC services)

          MCPs support both stdio and HTTP transport protocols.
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        description: |-
          Memory references enabling the agent to access persistent context.
          Memory provides stateful interactions across workflow steps and sessions.

          **Configuration format:**
          ```yaml
          memory:
            - id: "user_context"  # Memory resource ID
              key: "user:{{.user_id}}"  # Dynamic key with template
              mode: "read-write"  # Access mode (default: "read-write")
          ```

          **Access modes:**
          - `"read-write"`: Full access to read and modify memory
          - `"read-only"`: Can only read existing memory entries
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      memory_ref:
        description: |-
          MemoryRef identifies which memory store to use
          References a memory configuration defined at the project level
          - **Example**: "user-sessions", "workflow-state", "cache"
        type: string
      mode:
        allOf:
          - $ref: '#/definitions/task.CollectionMode'
        description: |-
          Mode determines if items are processed in parallel or sequentially
          Defaults to "parallel"
          Options: parallel, sequential
      model_config:
        allOf:
          - $ref: '#/definitions/core.ProviderConfig'
        description: |-
          LLM provider configuration defining which AI model to use and its parameters.
          Supports multiple providers including OpenAI, Anthropic, Google, Groq, and local models.

          **Required fields:** provider, model
          **Optional fields:** api_key, api_url, params (temperature, max_tokens, etc.)
      on_error:
        allOf:
          - $ref: '#/definitions/core.ErrorTransition'
        description: |-
          Error handling configuration
          Defines fallback behavior when task execution fails
          Can specify error task ID or retry configuration
      on_success:
        allOf:
          - $ref: '#/definitions/core.SuccessTransition'
        description: |-
          Task execution control
          Defines what happens after successful task completion
          Can specify next task ID or conditional routing
      on_timeout:
        description: |-
          OnTimeout specifies the next task to execute if the wait times out
          Uses the timeout value from BaseConfig
          If not specified, the task fails on timeout
        type: string
      operation:
        allOf:
          - $ref: '#/definitions/task.MemoryOpType'
        description: |-
          Operation type to perform on memory
          Required field that determines the action to take
      output:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          Schema definition for validating task output data
          Ensures task results conform to expected structure
          Uses same format as InputSchema
      outputs:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Output mappings that define what data this task exposes to subsequent tasks
          Uses template expressions to transform task results
          - **Example**: { "processed_data": "{{ .task.output.result }}" }
      payload:
        description: |-
          Payload data for write/append operations
          Can be any JSON-serializable data structure
          Required for write and append operations
      processor:
        allOf:
          - $ref: '#/definitions/task.Config'
        description: |-
          Processor is an optional task configuration to process received signals
          Allows custom handling of signal data before continuing
          The processor receives the signal payload as input
          $ref: inline:#
      prompt:
        description: |-
          Prompt provides direct instruction to agents when no specific action is needed
          Used for ad-hoc agent interactions without predefined action definitions
          - **Example**: "Analyze this code for security issues", "Summarize the following text"
        type: string
      resource:
        description: |-
          Resource reference for the task
          Format: "compozy:task:<name>" (e.g., "compozy:task:process-data")
        type: string
      retries:
        description: |-
          Number of retry attempts for failed task executions
          Default: 0 (no retries)
        type: integer
      routes:
        additionalProperties: {}
        description: |-
          Routes maps condition values to task IDs or inline task configurations
          The condition field in BaseConfig is evaluated, and its result is used
          as the key to select the appropriate route
          Values can be:
            - Task ID (string): References an existing task
            - Inline task config (object): Defines task configuration directly
          - **Example**:
            routes:
              approved: "process-payment"  # Task ID reference
              rejected:  # Inline task config
                type: basic
                agent: { id: rejection-handler }
              pending: "wait-for-approval"
        type: object
      signal:
        allOf:
          - $ref: '#/definitions/task.SignalConfig'
        description: Signal configuration containing the signal ID and payload
      sleep:
        description: |-
          Sleep duration after task completion
          Format: "5s", "1m", "500ms", "1h30m"
          Useful for rate limiting or giving external systems time to process
        type: string
      stats_config:
        allOf:
          - $ref: '#/definitions/task.StatsConfig'
        description: |-
          Configuration for statistics operations
          Only used when operation is "stats"
      strategy:
        allOf:
          - $ref: '#/definitions/task.ParallelStrategy'
        description: |-
          Strategy determines how the parallel execution handles task completion
          Defaults to "wait_all" if not specified
          Options: wait_all, fail_fast, best_effort, race
      timeout:
        description: |-
          Maximum execution time for parallel or composite tasks
          Format: "30s", "5m", "1h"
          Task will be canceled if it exceeds this duration
        type: string
      tool:
        allOf:
          - $ref: '#/definitions/tool.Config'
        description: |-
          Tool configuration for executing specific tool operations
          Used when the task needs to execute a predefined tool
          Mutually exclusive with Agent field
          $ref: schema://tools
      tools:
        description: |-
          Tools available to the agent for extending its capabilities.
          When tools are defined, the agent automatically has `toolChoice` set to `"auto"`,
          enabling autonomous tool selection and invocation during task execution.

          **Tool types supported:**
          - File system operations (read, write, list)
          - API integrations (HTTP requests, webhooks)
          - Data processing utilities (parsing, transformation)
          - Custom business logic (TypeScript/JavaScript execution)

          Tools are referenced by ID and can be shared across multiple agents.
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      type:
        allOf:
          - $ref: '#/definitions/task.Type'
        description: |-
          Type of task that determines execution behavior
          If not specified, defaults to "basic"
      wait_for:
        description: |-
          WaitFor specifies the signal ID to wait for
          The task will pause until a signal with this ID is received
          Must match the ID used in a SignalTask
          - **Example**: "user-approved", "payment-completed"
        type: string
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Input parameters passed to the task at execution time
          Can include references to workflow inputs, previous task outputs, etc.
          - **Example**: { "user_id": "{{ .workflow.input.user_id }}" }
    type: object
  task.ExecutionType:
    enum:
      - basic
      - router
      - parallel
      - collection
      - composite
      - wait
      - signal
      - aggregate
      - memory
    type: string
    x-enum-varnames:
      - ExecutionBasic
      - ExecutionRouter
      - ExecutionParallel
      - ExecutionCollection
      - ExecutionComposite
      - ExecutionWait
      - ExecutionSignal
      - ExecutionAggregate
      - ExecutionMemory
  task.FlushConfig:
    properties:
      dry_run:
        description: |-
          DryRun simulates flush without actually removing data
          Useful for testing what would be removed
        type: boolean
      force:
        description: |-
          Force flush even if below threshold
          Bypasses normal threshold checks
        type: boolean
      max_keys:
        description: |-
          Maximum number of keys to flush in one operation
          Default: 100
        type: integer
      strategy:
        description: |-
          Strategy for selecting keys to flush
          Options: "simple_fifo" (oldest first), "lru" (least recently used)
          Default: "simple_fifo"
        type: string
      threshold:
        description: |-
          Threshold (0-1) for triggering flush based on memory usage
          - **Example**: 0.8 means flush when 80% full
        type: number
    type: object
  task.HealthConfig:
    properties:
      check_connectivity:
        description: |-
          CheckConnectivity verifies connection to memory backend
          Tests actual read/write operations
        type: boolean
      include_stats:
        description: |-
          IncludeStats adds memory statistics to health check results
          Provides additional diagnostic information
        type: boolean
    type: object
  task.MemoryOpType:
    enum:
      - read
      - write
      - append
      - delete
      - flush
      - health
      - clear
      - stats
    type: string
    x-enum-varnames:
      - MemoryOpRead
      - MemoryOpWrite
      - MemoryOpAppend
      - MemoryOpDelete
      - MemoryOpFlush
      - MemoryOpHealth
      - MemoryOpClear
      - MemoryOpStats
  task.ParallelStrategy:
    enum:
      - wait_all
      - fail_fast
      - best_effort
      - race
    type: string
    x-enum-varnames:
      - StrategyWaitAll
      - StrategyFailFast
      - StrategyBestEffort
      - StrategyRace
  task.SignalConfig:
    properties:
      id:
        description: |-
          ID is the unique identifier for the signal
          Wait tasks with matching wait_for values will receive this signal
          - **Example**: "user-approved", "payment-completed", "data-ready"
        type: string
      payload:
        additionalProperties: {}
        description: |-
          Payload contains data to send with the signal
          This data is available to the receiving wait task for processing
          Can be any JSON-serializable data structure
          - **Example**: { "user_id": "123", "status": "approved", "timestamp": "2024-01-01T00:00:00Z" }
        type: object
    type: object
  task.State:
    properties:
      action_id:
        type: string
      agent_id:
        description: Basic execution fields (for single tasks)
        type: string
      component:
        allOf:
          - $ref: '#/definitions/core.ComponentType'
        description: Core identification
      created_at:
        description: Timestamps for audit trails and progress tracking
        type: string
      error:
        $ref: '#/definitions/core.Error'
      execution_type:
        allOf:
          - $ref: '#/definitions/task.ExecutionType'
        description: Execution type and strategy
      input:
        $ref: '#/definitions/core.Input'
      output:
        $ref: '#/definitions/core.Output'
      parent_state_id:
        description: Parent-child relationship for hierarchical tasks
        type: string
      status:
        $ref: '#/definitions/core.StatusType'
      task_exec_id:
        type: string
      task_id:
        type: string
      tool_id:
        type: string
      updated_at:
        type: string
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  task.StatsConfig:
    properties:
      group_by:
        description: |-
          GroupBy field for aggregating statistics
          - **Example**: "user", "session", "workflow"
          Groups stats by the specified field in stored data
        type: string
      include_content:
        description: |-
          IncludeContent includes actual memory content in stats
          WARNING: May return large amounts of data
        type: boolean
    type: object
  task.Type:
    enum:
      - basic
      - router
      - parallel
      - collection
      - aggregate
      - composite
      - signal
      - wait
      - memory
    type: string
    x-enum-varnames:
      - TaskTypeBasic
      - TaskTypeRouter
      - TaskTypeParallel
      - TaskTypeCollection
      - TaskTypeAggregate
      - TaskTypeComposite
      - TaskTypeSignal
      - TaskTypeWait
      - TaskTypeMemory
  time.Duration:
    enum:
      - -9223372036854775808
      - 9223372036854775807
      - 1
      - 1000
      - 1000000
      - 1000000000
      - 60000000000
      - 3600000000000
    format: int64
    type: integer
    x-enum-varnames:
      - minDuration
      - maxDuration
      - Nanosecond
      - Microsecond
      - Millisecond
      - Second
      - Minute
      - Hour
  tkrouter.TaskDTO:
    properties:
      action:
        type: string
      agent:
        $ref: '#/definitions/agent.Config'
      attachments:
        items: {}
        type: array
      batch:
        type: integer
      batch_size:
        type: integer
      clear_config:
        $ref: '#/definitions/task.ClearConfig'
      condition:
        type: string
      config:
        $ref: '#/definitions/core.GlobalOpts'
      env:
        $ref: '#/definitions/core.EnvMap'
      filter:
        type: string
      final:
        type: boolean
      flush_config:
        $ref: '#/definitions/task.FlushConfig'
      has_subtasks:
        type: boolean
      health_config:
        $ref: '#/definitions/task.HealthConfig'
      id:
        type: string
      index_var:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      item_var:
        type: string
      items: {}
      key_template:
        type: string
      max_iterations:
        type: integer
      max_keys:
        type: integer
      max_workers:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      memory_ref:
        type: string
      mode:
        type: string
      model_config:
        $ref: '#/definitions/core.ProviderConfig'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      on_success:
        $ref: '#/definitions/core.SuccessTransition'
      on_timeout:
        type: string
      operation:
        $ref: '#/definitions/task.MemoryOpType'
      output:
        $ref: '#/definitions/schema.Schema'
      outputs:
        $ref: '#/definitions/core.Input'
      payload: {}
      prompt:
        type: string
      resource:
        type: string
      retries:
        type: integer
      routes:
        additionalProperties: {}
        type: object
      signal:
        $ref: '#/definitions/task.SignalConfig'
      signal_name:
        type: string
      sleep:
        type: string
      stats_config:
        $ref: '#/definitions/task.StatsConfig'
      strategy:
        type: string
      subtask_ids:
        items:
          type: string
        type: array
      task:
        $ref: '#/definitions/tkrouter.TaskDTO'
      tasks:
        items:
          $ref: '#/definitions/tkrouter.TaskDTO'
        type: array
      timeout:
        type: string
      tool:
        $ref: '#/definitions/tool.Config'
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      type:
        $ref: '#/definitions/task.Type'
      wait_for:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  tkrouter.TaskExecAsyncResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      exec_url:
        example: https://api.compozy.dev/api/v0/executions/tasks/2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
    type: object
  tkrouter.TaskExecRequest:
    properties:
      timeout:
        description: Timeout in seconds for synchronous execution.
        type: integer
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: With passes structured input parameters to the task execution.
    type: object
  tkrouter.TaskExecSyncResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      output:
        $ref: '#/definitions/core.Output'
    type: object
  tkrouter.TaskExecutionStatusDTO:
    properties:
      component:
        $ref: '#/definitions/core.ComponentType'
      created_at:
        type: string
      error:
        $ref: '#/definitions/core.Error'
      exec_id:
        type: string
      output:
        $ref: '#/definitions/core.Output'
      status:
        $ref: '#/definitions/core.StatusType'
      task_id:
        type: string
      updated_at:
        type: string
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  tkrouter.TaskListItem:
    properties:
      action:
        type: string
      agent:
        $ref: '#/definitions/agent.Config'
      attachments:
        items: {}
        type: array
      batch:
        type: integer
      batch_size:
        type: integer
      clear_config:
        $ref: '#/definitions/task.ClearConfig'
      condition:
        type: string
      config:
        $ref: '#/definitions/core.GlobalOpts'
      env:
        $ref: '#/definitions/core.EnvMap'
      etag:
        example: abc123
        type: string
      filter:
        type: string
      final:
        type: boolean
      flush_config:
        $ref: '#/definitions/task.FlushConfig'
      has_subtasks:
        type: boolean
      health_config:
        $ref: '#/definitions/task.HealthConfig'
      id:
        type: string
      index_var:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      item_var:
        type: string
      items: {}
      key_template:
        type: string
      max_iterations:
        type: integer
      max_keys:
        type: integer
      max_workers:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      memory_ref:
        type: string
      mode:
        type: string
      model_config:
        $ref: '#/definitions/core.ProviderConfig'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      on_success:
        $ref: '#/definitions/core.SuccessTransition'
      on_timeout:
        type: string
      operation:
        $ref: '#/definitions/task.MemoryOpType'
      output:
        $ref: '#/definitions/schema.Schema'
      outputs:
        $ref: '#/definitions/core.Input'
      payload: {}
      prompt:
        type: string
      resource:
        type: string
      retries:
        type: integer
      routes:
        additionalProperties: {}
        type: object
      signal:
        $ref: '#/definitions/task.SignalConfig'
      signal_name:
        type: string
      sleep:
        type: string
      stats_config:
        $ref: '#/definitions/task.StatsConfig'
      strategy:
        type: string
      subtask_ids:
        items:
          type: string
        type: array
      task:
        $ref: '#/definitions/tkrouter.TaskDTO'
      tasks:
        items:
          $ref: '#/definitions/tkrouter.TaskDTO'
        type: array
      timeout:
        type: string
      tool:
        $ref: '#/definitions/tool.Config'
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      type:
        $ref: '#/definitions/task.Type'
      wait_for:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  tkrouter.TaskResponse:
    properties:
      action:
        type: string
      agent:
        $ref: '#/definitions/agent.Config'
      attachments:
        items: {}
        type: array
      batch:
        type: integer
      batch_size:
        type: integer
      clear_config:
        $ref: '#/definitions/task.ClearConfig'
      condition:
        type: string
      config:
        $ref: '#/definitions/core.GlobalOpts'
      env:
        $ref: '#/definitions/core.EnvMap'
      filter:
        type: string
      final:
        type: boolean
      flush_config:
        $ref: '#/definitions/task.FlushConfig'
      has_subtasks:
        type: boolean
      health_config:
        $ref: '#/definitions/task.HealthConfig'
      id:
        type: string
      index_var:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      item_var:
        type: string
      items: {}
      key_template:
        type: string
      max_iterations:
        type: integer
      max_keys:
        type: integer
      max_workers:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      memory:
        items:
          $ref: '#/definitions/core.MemoryReference'
        type: array
      memory_ref:
        type: string
      mode:
        type: string
      model_config:
        $ref: '#/definitions/core.ProviderConfig'
      on_error:
        $ref: '#/definitions/core.ErrorTransition'
      on_success:
        $ref: '#/definitions/core.SuccessTransition'
      on_timeout:
        type: string
      operation:
        $ref: '#/definitions/task.MemoryOpType'
      output:
        $ref: '#/definitions/schema.Schema'
      outputs:
        $ref: '#/definitions/core.Input'
      payload: {}
      prompt:
        type: string
      resource:
        type: string
      retries:
        type: integer
      routes:
        additionalProperties: {}
        type: object
      signal:
        $ref: '#/definitions/task.SignalConfig'
      signal_name:
        type: string
      sleep:
        type: string
      stats_config:
        $ref: '#/definitions/task.StatsConfig'
      strategy:
        type: string
      subtask_ids:
        items:
          type: string
        type: array
      timeout:
        type: string
      tool:
        $ref: '#/definitions/tool.Config'
      tools:
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      type:
        $ref: '#/definitions/task.Type'
      wait_for:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  tkrouter.TasksListResponse:
    properties:
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
      tasks:
        items:
          $ref: '#/definitions/tkrouter.TaskListItem'
        type: array
    type: object
  tool.Config:
    properties:
      config:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Configuration parameters passed to the tool separately from input data.
          Provides static configuration that tools can use for initialization and behavior control.
          Unlike input parameters, config is not meant to change between tool invocations.

          - **Use cases:** API base URLs, retry policies, timeout settings, feature flags
          - **Separation:** Keeps configuration separate from runtime input data
          - **Override:** Can be overridden at workflow or agent level
          - **Example:**
            ```yaml
            config:
              base_url: "https://api.example.com"
              timeout: 30
              retry_count: 3
              headers:
                User-Agent: "Compozy/1.0"
            ```
      cwd:
        allOf:
          - $ref: '#/definitions/core.PathCWD'
        description: |-
          CWD defines the working directory for tool execution.
          Used for resolving relative file paths and setting process working directory.
      description:
        description: |-
          Human-readable description of the tool's functionality and purpose.
          This description is used by AI agents to understand when and how to use the tool.
          Should clearly explain capabilities, limitations, and expected use cases.

          - **Best practices:** Be specific about what the tool does and its constraints
          - **Example:** `"Read and parse various file formats including JSON, YAML, and CSV with size limits"`
        type: string
      env:
        allOf:
          - $ref: '#/definitions/core.EnvMap'
        description: |-
          Environment variables available during tool execution.
          Variables are isolated to the tool's execution context for security.
          Used for configuration, API keys, and runtime settings.

          - **Security:** Variables are only accessible within the tool's execution
          - **Template support:** Values can use template expressions for dynamic configuration
          - **Example:**
            ```yaml
            env:
              API_KEY: "{{ .env.SECRET_API_KEY }}"
              BASE_URL: "https://api.example.com"
              DEBUG: "{{ .project.debug | default(false) }}"
            ```
      id:
        description: |-
          Unique identifier for the tool within the project scope.
          Used for referencing the tool in agent configurations, workflows, and function calls.
          Must be unique across all tools in the project.

          - **Examples:** `"file-reader"`, `"api-client"`, `"data-processor"`
          - **Naming:** Use kebab-case for consistency with other Compozy identifiers
        type: string
      input:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          JSON schema defining the expected input parameters for the tool.
          Used for validation before execution and to generate LLM function call definitions.
          Must follow JSON Schema Draft 7 specification for compatibility.

          - **When nil:** Tool accepts any input format (no validation performed)
          - **Use cases:** Parameter validation, type safety, auto-generated documentation
          - **Integration:** Automatically converts to LLM function parameters
      output:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          JSON schema defining the expected output format from the tool.
          Used for validation after execution and documentation purposes.
          Must follow JSON Schema Draft 7 specification for compatibility.

          - **When nil:** No output validation is performed
          - **Use cases:** Response validation, type safety, workflow data flow verification
          - **Best practice:** Define output schema for tools used in critical workflows
      resource:
        description: |-
          Resource identifier for the autoloader system (must be `"tool"`).
          This field enables automatic discovery and registration of tool configurations.
        type: string
      timeout:
        description: |-
          Maximum execution time for the tool in Go duration format.
          If not specified, uses the global tool timeout from project configuration.
          This timeout applies to the entire tool execution lifecycle.

          - **Examples:** `"30s"`, `"5m"`, `"1h"`, `"500ms"`
          - **Constraints:** Must be positive; zero or negative values cause validation errors
          - **Default fallback:** Uses project-level tool timeout when empty
        type: string
      with:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: |-
          Default input parameters merged with runtime parameters provided by agents.
          Provides a way to set tool defaults while allowing runtime customization.

          - **Merge strategy:** Runtime parameters override defaults (shallow merge)
          - **Use cases:** Default API URLs, fallback configurations, preset options
          - **Security note:** Avoid storing secrets here; use environment variables instead
    type: object
  toolrouter.ToolDTO:
    properties:
      config:
        $ref: '#/definitions/core.Input'
      cwd:
        type: string
      description:
        type: string
      env:
        $ref: '#/definitions/core.EnvMap'
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      output:
        $ref: '#/definitions/schema.Schema'
      resource:
        type: string
      timeout:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  toolrouter.ToolListItem:
    properties:
      config:
        $ref: '#/definitions/core.Input'
      cwd:
        type: string
      description:
        type: string
      env:
        $ref: '#/definitions/core.EnvMap'
      etag:
        example: abc123
        type: string
      id:
        type: string
      input:
        $ref: '#/definitions/schema.Schema'
      output:
        $ref: '#/definitions/schema.Schema'
      resource:
        type: string
      timeout:
        type: string
      with:
        $ref: '#/definitions/core.Input'
    type: object
  toolrouter.ToolsListResponse:
    properties:
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
      tools:
        items:
          $ref: '#/definitions/toolrouter.ToolListItem'
        type: array
    type: object
  uc.ClearMemoryResult:
    properties:
      backup_created:
        type: boolean
      key:
        type: string
      messages_cleared:
        type: integer
      success:
        type: boolean
    type: object
  uc.FlushMemoryResult:
    properties:
      actual_strategy:
        type: string
      dry_run:
        type: boolean
      error:
        type: string
      key:
        type: string
      message_count:
        type: integer
      success:
        type: boolean
      summary_generated:
        type: boolean
      token_count:
        type: integer
      would_flush:
        type: boolean
    type: object
  uc.HealthMemoryResult:
    properties:
      actual_strategy:
        type: string
      current_tokens:
        type: integer
      healthy:
        type: boolean
      key:
        type: string
      last_flush:
        type: string
      message_count:
        type: integer
      token_count:
        type: integer
    type: object
  uc.PaginationInfo:
    properties:
      has_more:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      total_count:
        type: integer
    type: object
  uc.StatsMemoryOutput:
    properties:
      context_window_used:
        type: integer
      key:
        type: string
      message_count:
        type: integer
      pagination_info:
        $ref: '#/definitions/uc.PaginationInfo'
      role_distribution:
        additionalProperties:
          type: integer
        type: object
      token_count:
        type: integer
      token_limit:
        type: integer
      token_utilization:
        type: number
    type: object
  webhook.Config:
    properties:
      dedupe:
        $ref: '#/definitions/webhook.DedupeSpec'
      events:
        items:
          $ref: '#/definitions/webhook.EventConfig'
        type: array
      method:
        type: string
      slug:
        type: string
      verify:
        $ref: '#/definitions/webhook.VerifySpec'
    type: object
  webhook.DedupeSpec:
    properties:
      enabled:
        type: boolean
      key:
        type: string
      ttl:
        type: string
    type: object
  webhook.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  webhook.EventConfig:
    properties:
      filter:
        type: string
      input:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      schema:
        $ref: '#/definitions/schema.Schema'
    type: object
  webhook.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  webhook.VerifySpec:
    properties:
      header:
        type: string
      secret:
        type: string
      skew:
        $ref: '#/definitions/time.Duration'
      strategy:
        type: string
    type: object
  wfrouter.AgentsOrDTOs:
    properties:
      expanded:
        items:
          $ref: '#/definitions/agentrouter.AgentDTO'
        type: array
      ids:
        items:
          type: string
        type: array
    type: object
  wfrouter.EventRequest:
    properties:
      name:
        type: string
      payload:
        $ref: '#/definitions/core.Input'
    required:
      - name
    type: object
  wfrouter.EventResponse:
    properties:
      event_id:
        type: string
      message:
        type: string
    type: object
  wfrouter.ExecuteWorkflowResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      exec_url:
        example: https://api.compozy.dev/api/v0/executions/workflows/2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      workflow_id:
        example: data-processing
        type: string
    type: object
  wfrouter.SignalRequest:
    properties:
      payload:
        allOf:
          - $ref: '#/definitions/core.Input'
        description: Payload contains the data to send with the signal
      signal_name:
        description: SignalName is the name of the signal to send to the workflow execution
        example: ready_signal
        type: string
    required:
      - signal_name
    type: object
  wfrouter.SignalResponse:
    properties:
      message:
        example: Signal sent successfully
        type: string
    type: object
  wfrouter.TasksOrDTOs:
    properties:
      expanded:
        items:
          $ref: '#/definitions/tkrouter.TaskDTO'
        type: array
      ids:
        items:
          type: string
        type: array
    type: object
  wfrouter.ToolsOrDTOs:
    properties:
      expanded:
        items:
          $ref: '#/definitions/toolrouter.ToolDTO'
        type: array
      ids:
        items:
          type: string
        type: array
    type: object
  wfrouter.WorkflowDTO:
    properties:
      agent_count:
        type: integer
      agents:
        $ref: '#/definitions/wfrouter.AgentsOrDTOs'
      author:
        $ref: '#/definitions/core.Author'
      config:
        $ref: '#/definitions/workflow.Opts'
      description:
        type: string
      id:
        type: string
      mcp_count:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      outputs:
        $ref: '#/definitions/core.Output'
      resource:
        type: string
      schedule:
        $ref: '#/definitions/workflow.Schedule'
      schemas:
        items:
          $ref: '#/definitions/schema.Schema'
        type: array
      task_count:
        type: integer
      task_ids:
        items:
          type: string
        type: array
      tasks:
        allOf:
          - $ref: '#/definitions/wfrouter.TasksOrDTOs'
        description: 'Expandable collections: marshaled as either []string or []<DTO>'
      tool_count:
        type: integer
      tools:
        $ref: '#/definitions/wfrouter.ToolsOrDTOs'
      triggers:
        items:
          $ref: '#/definitions/workflow.Trigger'
        type: array
      version:
        type: string
    type: object
  wfrouter.WorkflowListItem:
    properties:
      agent_count:
        type: integer
      agents:
        $ref: '#/definitions/wfrouter.AgentsOrDTOs'
      author:
        $ref: '#/definitions/core.Author'
      config:
        $ref: '#/definitions/workflow.Opts'
      description:
        type: string
      etag:
        example: abc123
        type: string
      id:
        type: string
      mcp_count:
        type: integer
      mcps:
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      outputs:
        $ref: '#/definitions/core.Output'
      resource:
        type: string
      schedule:
        $ref: '#/definitions/workflow.Schedule'
      schemas:
        items:
          $ref: '#/definitions/schema.Schema'
        type: array
      task_count:
        type: integer
      task_ids:
        items:
          type: string
        type: array
      tasks:
        allOf:
          - $ref: '#/definitions/wfrouter.TasksOrDTOs'
        description: 'Expandable collections: marshaled as either []string or []<DTO>'
      tool_count:
        type: integer
      tools:
        $ref: '#/definitions/wfrouter.ToolsOrDTOs'
      triggers:
        items:
          $ref: '#/definitions/workflow.Trigger'
        type: array
      version:
        type: string
    type: object
  wfrouter.WorkflowSyncRequest:
    properties:
      input:
        $ref: '#/definitions/core.Input'
      task_id:
        type: string
      timeout:
        description: Timeout in seconds for synchronous execution.
        type: integer
    type: object
  wfrouter.WorkflowSyncResponse:
    properties:
      exec_id:
        example: 2Z4PVTL6K27XVT4A3NPKMDD5BG
        type: string
      output:
        $ref: '#/definitions/core.Output'
      workflow:
        $ref: '#/definitions/workflow.State'
    type: object
  wfrouter.WorkflowsListResponse:
    properties:
      page:
        $ref: '#/definitions/httpdto.PageInfoDTO'
      workflows:
        items:
          $ref: '#/definitions/wfrouter.WorkflowListItem'
        type: array
    type: object
  workflow.Config:
    properties:
      agents:
        description: |-
          AI agents with specific instructions and capabilities
          Configure LLM-powered agents with custom prompts, tools access, and behavior
          Agents can be referenced by tasks using $use: agent(...) syntax
          $ref: schema://agents
        items:
          $ref: '#/definitions/agent.Config'
        type: array
      author:
        allOf:
          - $ref: '#/definitions/core.Author'
        description: |-
          Author information for workflow attribution
          Helps track ownership and responsibility for workflow maintenance
      config:
        allOf:
          - $ref: '#/definitions/workflow.Opts'
        description: |-
          Configuration options including input schema and environment variables
          Controls workflow behavior, validation, and runtime environment
      cwd:
        allOf:
          - $ref: '#/definitions/core.PathCWD'
        description: Internal field for the current working directory context
      description:
        description: |-
          Human-readable description of the workflow's purpose
          Should clearly explain what the workflow does and when to use it
        type: string
      id:
        description: |-
          Unique identifier for the workflow (required)
          Must be unique within the project scope. Used for referencing and execution.
          - **Example**: "customer-support", "data-processing", "content-generation"
        type: string
      knowledge:
        description: Knowledge defines the default knowledge binding for the workflow context.
        items:
          $ref: '#/definitions/core.KnowledgeBinding'
        type: array
      knowledge_bases:
        description: KnowledgeBases declares workflow-scoped knowledge definitions.
        items:
          $ref: '#/definitions/knowledge.BaseConfig'
        type: array
      mcps:
        description: |-
          Model Context Protocol servers for extending AI capabilities
          MCP servers provide specialized tools and knowledge to agents
          Enable integration with external services and domain-specific functionality
          $ref: schema://mcp
        items:
          $ref: '#/definitions/mcp.Config'
        type: array
      outputs:
        allOf:
          - $ref: '#/definitions/core.Output'
        description: |-
          Output mappings to structure the final workflow results
          Use template expressions to extract and transform task outputs
          - **Example**: ticket_id: "{{ .tasks.create-ticket.output.id }}"
      resource:
        description: |-
          Resource reference for external workflow definitions
          Format: "compozy:workflow:<name>" - allows referencing pre-built workflows
        type: string
      schedule:
        allOf:
          - $ref: '#/definitions/workflow.Schedule'
        description: |-
          Schedule configuration for automated workflow execution
          Enable cron-based scheduling with timezone support and overlap policies
      schemas:
        description: |-
          JSON schemas for validating data structures used in the workflow
          Define reusable schemas that can be referenced throughout the workflow
          using $ref syntax (e.g., $ref: local::schemas.#(id="user_schema"))
        items:
          $ref: '#/definitions/schema.Schema'
        type: array
      tasks:
        description: |-
          Sequential tasks that define the workflow execution plan (required)
          Tasks are the core execution units, processed in order with conditional branching
          Each task uses either an agent or tool to perform its operation
          $ref: schema://tasks
        items:
          $ref: '#/definitions/task.Config'
        type: array
      tools:
        description: |-
          External tools that can be invoked by agents or tasks
          Define executable scripts or programs that perform specific operations
          Tools provide deterministic, non-AI functionality like API calls or data processing
          $ref: schema://tools
        items:
          $ref: '#/definitions/tool.Config'
        type: array
      triggers:
        description: |-
          Event triggers that can initiate workflow execution
          Define external events (webhooks, signals) that can start the workflow
          Each trigger can have its own input schema for validation
        items:
          $ref: '#/definitions/workflow.Trigger'
        type: array
      version:
        description: |-
          Version of the workflow for tracking changes
          Follows semantic versioning (e.g., "1.0.0", "2.1.3")
          Useful for managing workflow evolution and backwards compatibility
        type: string
    type: object
  workflow.Opts:
    properties:
      env:
        allOf:
          - $ref: '#/definitions/core.EnvMap'
        description: |-
          Environment variables available to the workflow and its components
          These variables are accessible to all tasks, agents, and tools within the workflow
      heartbeat_timeout:
        description: |-
          Interval for task heartbeat signals
          Used for long-running tasks to indicate progress

          - **Example**: "10s", "30s", "1m"
        type: string
      input:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: |-
          Input schema for validating workflow input parameters
          Uses JSON Schema format to define expected input structure and validation rules
      on_error:
        allOf:
          - $ref: '#/definitions/core.ErrorTransition'
        description: |-
          Error handler configuration
          Defines what happens when a task fails after all retries
      retry_policy:
        allOf:
          - $ref: '#/definitions/core.RetryPolicyConfig'
        description: |-
          Retry configuration for transient failures
          Automatically retries failed tasks with exponential backoff
      schedule_to_close_timeout:
        description: |-
          Total timeout from scheduling to completion
          Default: "6m"

          - **Example**: "1m", "15m", "2h"
        type: string
      schedule_to_start_timeout:
        description: |-
          Maximum time to wait for a task to start executing
          Default: "1m"

          - **Example**: "30s", "5m", "1h"
        type: string
      start_to_close_timeout:
        description: |-
          Maximum time for task execution once started
          Default: "5m"

          - **Example**: "30s", "10m", "1h"
        type: string
    type: object
  workflow.OverlapPolicy:
    enum:
      - skip
      - allow
      - buffer_one
      - cancel_other
    type: string
    x-enum-varnames:
      - OverlapSkip
      - OverlapAllow
      - OverlapBufferOne
      - OverlapCancelOther
  workflow.Schedule:
    properties:
      cron:
        description: |-
          Cron expression for scheduling (required)
          Supports standard cron format: "minute hour day month weekday"
          Special strings: @yearly, @monthly, @weekly, @daily, @hourly
        type: string
      enabled:
        description: |-
          Whether the schedule is enabled (optional, default true)
          Set to false to temporarily disable scheduled runs without removing the configuration
        type: boolean
      end_at:
        description: |-
          End date for the schedule (optional)
          Schedule will not run after this time
        type: string
      input:
        additionalProperties: {}
        description: |-
          Default input values for scheduled runs (optional)
          These inputs are merged with any trigger inputs when the workflow executes
        type: object
      jitter:
        description: |-
          Random delay to add to execution time (optional)
          Format: "5m", "1h", "30s" - helps distribute load when many workflows run at the same time
        type: string
      overlap_policy:
        allOf:
          - $ref: '#/definitions/workflow.OverlapPolicy'
        description: |-
          Policy for handling overlapping executions (optional, default skip)
          Options: skip, allow, buffer_one, cancel_other
      start_at:
        description: |-
          Start date for the schedule (optional)
          Schedule will not run before this time
        type: string
      timezone:
        description: |-
          Timezone for schedule execution (optional, default UTC)
          Uses IANA timezone names (e.g., "America/New_York", "Europe/London")
        type: string
    required:
      - cron
    type: object
  workflow.State:
    properties:
      error:
        $ref: '#/definitions/core.Error'
      input:
        $ref: '#/definitions/core.Input'
      output:
        $ref: '#/definitions/core.Output'
      status:
        $ref: '#/definitions/core.StatusType'
      tasks:
        additionalProperties:
          $ref: '#/definitions/task.State'
        type: object
      workflow_exec_id:
        type: string
      workflow_id:
        type: string
    type: object
  workflow.Trigger:
    properties:
      name:
        description: Unique name for identifying this trigger
        type: string
      schema:
        allOf:
          - $ref: '#/definitions/schema.Schema'
        description: Schema for validating trigger input data (optional)
      type:
        allOf:
          - $ref: '#/definitions/workflow.TriggerType'
        description: Type of trigger mechanism (e.g., "signal" for external signals)
      webhook:
        allOf:
          - $ref: '#/definitions/webhook.Config'
        description: Webhook holds configuration when Type==webhook
    type: object
  workflow.TriggerType:
    enum:
      - signal
      - webhook
    type: string
    x-enum-varnames:
      - TriggerTypeSignal
      - TriggerTypeWebhook

info:
  contact:
    email: support@compozy.com
    name: Compozy Support
    url: https://github.com/compozy/compozy
  description: Compozy is a Next-level Agentic Orchestration Platform, tasks, and tools. Authentication
    is configurable via the SERVER_AUTH_ENABLED environment variable. When enabled, all endpoints require
    Bearer token authentication. When disabled (typical for development), endpoints are accessible without
    authentication.
  license:
    name: BSL-1.1
    url: https://github.com/compozy/compozy/blob/main/LICENSE
  termsOfService: https://github.com/compozy/compozy
  title: Compozy API
  version: "1.0"

paths:
  /admin/mcps:
    get:
      description: Get a list of all configured Model Context Protocol servers
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List of MCPs with their status
          schema:
            $ref: '#/definitions/mcpproxy.ListMCPsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: List all MCP definitions
      tags:
        - MCP Management
    post:
      consumes:
        - application/json
      description: Add a new Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP definition to add
          in: body
          name: mcp
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.MCPDefinition'
      produces:
        - application/json
      responses:
        "201":
          description: MCP added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "409":
          description: MCP already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Add a new MCP definition
      tags:
        - MCP Management
  /admin/mcps/{name}:
    delete:
      description: Remove a Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCP removed successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Remove an MCP definition
      tags:
        - MCP Management
    get:
      description: Get details of a specific Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCP details with status
          schema:
            $ref: '#/definitions/mcpproxy.MCPDetailsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get an MCP definition
      tags:
        - MCP Management
    put:
      consumes:
        - application/json
      description: Update an existing Model Context Protocol server configuration
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Updated MCP definition
          in: body
          name: mcp
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.MCPDefinition'
      produces:
        - application/json
      responses:
        "200":
          description: MCP updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update an MCP definition
      tags:
        - MCP Management
  /admin/meta/{type}/{id}:
    get:
      parameters:
        - description: Resource type
          in: path
          name: type
          required: true
          type: string
        - description: Resource ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: object
                type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "403":
          description: Forbidden
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Not Found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get resource provenance metadata (admin)
      tags:
        - admin
  /admin/meta/changes:
    get:
      parameters:
        - description: Project override
          in: query
          name: project
          type: string
        - description: Max results (default 50)
          in: query
          name: limit
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: object
                type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "403":
          description: Forbidden
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List recent provenance changes (admin)
      tags:
        - admin
  /admin/reload:
    post:
      consumes:
        - application/json
      description: |-
        Rebuild compiled workflows from repo|builder and trigger schedule reconciliation. Admin only.
        Aliases: yaml -> repo, store -> builder.
      parameters:
        - description: 'Reload source (repo|builder). Aliases: yaml->repo, store->builder. Defaults to
            ''repo''.'
          enum:
            - repo
            - builder
          in: query
          name: source
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Reload completed
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Invalid parameters
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "403":
          description: Forbidden
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Reload configuration and reconcile schedules
      tags:
        - admin
  /admin/tools:
    get:
      description: Get a list of all tools available from all connected MCP servers
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List of available tools
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: List all available tools
      tags:
        - MCP Tools
  /admin/tools/call:
    post:
      consumes:
        - application/json
      description: Execute a specific tool with provided arguments on the specified MCP server
      parameters:
        - description: Admin authorization token
          in: header
          name: Authorization
          required: true
          type: string
        - description: Tool call request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/mcpproxy.CallToolRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Tool execution result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP or tool not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Tool execution failed
          schema:
            additionalProperties: true
            type: object
      summary: Call a tool on an MCP server
      tags:
        - MCP Tools
  /agents:
    get:
      consumes:
        - application/json
      description: List agents with cursor pagination. Optionally filter by workflow usage.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Return only agents referenced by the given workflow
          example: '"wf1"'
          in: query
          name: workflow_id
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by agent ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agents retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentsListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List agents
      tags:
        - agents
  /agents/{agent_id}:
    delete:
      description: Delete an agent configuration. Returns conflict when referenced.
      parameters:
        - description: Agent ID
          example: '"assistant"'
          in: path
          name: agent_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Agent referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete agent
      tags:
        - agents
    get:
      consumes:
        - application/json
      description: Retrieve an agent configuration by ID.
      parameters:
        - description: Agent ID
          example: '"assistant"'
          in: path
          name: agent_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agent retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get agent
      tags:
        - agents
    put:
      consumes:
        - application/json
      description: Create an agent when absent or update an existing one using strong ETag concurrency.
      parameters:
        - description: Agent ID
          example: '"assistant"'
          in: path
          name: agent_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Agent configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Agent updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentDTO'
                type: object
        "201":
          description: Agent created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Absolute URL for the agent
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Agent not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Agent referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update agent
      tags:
        - agents
  /agents/{agent_id}/executions:
    post:
      consumes:
        - application/json
      description: Execute an agent and wait for the output in the same HTTP response.
      parameters:
        - description: Agent ID
          example: '"assistant"'
          in: path
          name: agent_id
          required: true
          type: string
        - description: Optional idempotency key to prevent duplicate execution
          in: header
          name: X-Idempotency-Key
          type: string
        - description: Execution request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/agentrouter.AgentExecRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Agent executed
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentExecSyncResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Agent not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "408":
          description: Execution timeout
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Duplicate request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Execute agent synchronously
      tags:
        - agents
  /agents/{agent_id}/executions/async:
    post:
      consumes:
        - application/json
      description: Start an asynchronous agent execution and return a polling handle.
      parameters:
        - description: Agent ID
          example: '"assistant"'
          in: path
          name: agent_id
          required: true
          type: string
        - description: Optional correlation ID for request tracing
          in: header
          name: X-Correlation-ID
          type: string
        - description: Execution request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/agentrouter.AgentExecRequest'
      produces:
        - application/json
      responses:
        "202":
          description: Agent execution started
          headers:
            Location:
              description: Execution status URL
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.AgentExecAsyncResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Agent not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Duplicate request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Start agent execution asynchronously
      tags:
        - agents
  /agents/export:
    post:
      description: Write agent YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":2},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export agents
      tags:
        - agents
  /agents/import:
    post:
      description: Read agent YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":1,\"skipped\":1,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import agents
      tags:
        - agents
  /auth/generate:
    post:
      consumes:
        - application/json
      description: Generate a new API key for the authenticated user
      parameters:
        - description: Bearer token for authentication
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "201":
          description: contains data.api_key and message
          schema:
            $ref: '#/definitions/router.GenerateKeyResponse'
        "401":
          description: authentication failure
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: Generate a new API key
      tags:
        - auth
  /auth/keys:
    get:
      consumes:
        - application/json
      description: List all API keys for the authenticated user
      parameters:
        - description: Bearer token for authentication
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List user's API keys
      tags:
        - auth
  /auth/keys/{id}:
    delete:
      consumes:
        - application/json
      description: Revoke an API key by ID
      parameters:
        - description: Bearer token for authentication
          in: header
          name: Authorization
          required: true
          type: string
        - description: API Key ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Revoke an API key
      tags:
        - auth
  /events:
    post:
      consumes:
        - application/json
      description: Trigger workflows by sending events
      parameters:
        - description: Event data
          in: body
          name: event
          required: true
          schema:
            $ref: '#/definitions/wfrouter.EventRequest'
      produces:
        - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.EventResponse'
                type: object
        "400":
          description: Invalid event
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Conflict
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Send event
      tags:
        - events
  /executions/agents/{exec_id}:
    get:
      description: Retrieve the latest status for a direct agent execution.
      parameters:
        - description: Agent execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Execution status retrieved
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agentrouter.ExecutionStatusDTO'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Failed to load execution
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get agent execution status
      tags:
        - executions
  /executions/tasks/{exec_id}:
    get:
      description: Retrieve the latest status for a direct task execution.
      parameters:
        - description: Task execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Execution status retrieved
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskExecutionStatusDTO'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Failed to load execution
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get task execution status
      tags:
        - executions
  /executions/workflows:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all workflow executions across all workflows
      produces:
        - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      executions:
                        items:
                          $ref: '#/definitions/workflow.State'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all workflow executions
      tags:
        - executions
  /executions/workflows/{exec_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/workflow.State'
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get workflow execution by ID
      tags:
        - executions
  /executions/workflows/{exec_id}/cancel:
    post:
      consumes:
        - application/json
      description: Cancel a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution canceled successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Cancel workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/pause:
    post:
      consumes:
        - application/json
      description: Pause a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution paused successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Pause workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/resume:
    post:
      consumes:
        - application/json
      description: Resume a specific workflow execution by its execution ID
      parameters:
        - description: Workflow Execution ID
          example: '"workflowID_execID"'
          in: path
          name: exec_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution resumed successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    type: string
                type: object
        "400":
          description: Invalid execution ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Resume workflow execution
      tags:
        - executions
  /executions/workflows/{exec_id}/signals:
    post:
      consumes:
        - application/json
      description: Send a signal with payload to a specific workflow execution
      parameters:
        - description: Workflow Execution ID
          example: '"2Z4PVTL6K27XVT4A3NPKMDD5BG"'
          in: path
          name: exec_id
          required: true
          type: string
        - description: Signal data
          in: body
          name: signal
          required: true
          schema:
            $ref: '#/definitions/wfrouter.SignalRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Signal sent successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.SignalResponse'
                type: object
        "400":
          description: Invalid execution ID or signal data
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Execution not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Send signal to workflow execution
      tags:
        - executions
  /health:
    get:
      consumes:
        - application/json
      description: Returns overall service health, readiness and components status
      produces:
        - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service is not ready
          schema:
            additionalProperties: true
            type: object
      summary: Get server health
      tags:
        - health
        - diagnostics
  /hooks/{slug}:
    post:
      consumes:
        - application/json
      description: Accepts webhook payloads and triggers matching workflow events.
      parameters:
        - description: Webhook slug
          example: '"my-webhook"'
          in: path
          name: slug
          required: true
          type: string
        - description: Optional idempotency key to prevent duplicate processing
          example: '"idemp-123"'
          in: header
          name: X-Idempotency-Key
          type: string
        - description: Optional correlation ID for request tracing
          example: '"corr-456"'
          in: header
          name: X-Correlation-ID
          type: string
        - description: Optional HMAC signature header (configurable per webhook)
          example: '"sha256=abc123..."'
          in: header
          name: X-Sig
          type: string
        - description: Stripe webhook signature (when using stripe verification)
          example: '"t=123,v1=def..."'
          in: header
          name: Stripe-Signature
          type: string
        - description: GitHub webhook signature (when using github verification)
          example: '"sha256=ghi789..."'
          in: header
          name: X-Hub-Signature-256
          type: string
        - description: Arbitrary JSON payload
          in: body
          name: payload
          required: true
          schema:
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Processed successfully
          schema:
            $ref: '#/definitions/webhook.SuccessResponse'
        "202":
          description: Accepted and enqueued
          schema:
            $ref: '#/definitions/webhook.SuccessResponse'
        "400":
          description: Invalid or oversized payload
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "401":
          description: Signature verification failed
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "404":
          description: Webhook not found
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "409":
          description: Duplicate idempotency key
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/webhook.ErrorResponse'
      summary: Trigger webhook
      tags:
        - webhooks
      x-example-error:
        details: invalid JSON payload
        error: bad_request
      x-example-success:
        data:
          result: ok
        message: Success
  /knowledge-bases:
    get:
      consumes:
        - application/json
      description: List knowledge bases with cursor-based pagination.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Knowledge bases retrieved" example({"status":200,"message":"knowledge bases retrieved","data":{"knowledge_bases":[{"id":"support","embedder":"default-embedder","vector_db":"default-vector"}],"page":{"limit":1,"next_cursor":"eyJpZCI6ICJiIn0=","prev_cursor":""}},"error":null})
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeBaseListResponse'
                type: object
        "400":
          description: Invalid cursor parameter
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List knowledge bases
      tags:
        - knowledge
  /knowledge-bases/{kb_id}:
    delete:
      description: Delete a knowledge base and remove persisted vectors.
      parameters:
        - description: Knowledge base ID
          example: '"support-docs"'
          in: path
          name: kb_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"etag123\""'
          in: header
          name: If-Match
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Knowledge base not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Knowledge base referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete knowledge base
      tags:
        - knowledge
    get:
      consumes:
        - application/json
      description: Retrieve a knowledge base by ID.
      parameters:
        - description: Knowledge base ID
          example: '"support-docs"'
          in: path
          name: kb_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Knowledge base retrieved" example({"status":200,"message":"knowledge base retrieved","data":{"knowledge_base":{"id":"support","embedder":"default-embedder","vector_db":"default-vector","_etag":"etag-value"}},"error":null})
          headers:
            ETag:
              description: Strong entity tag for caching
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeBaseResponse'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Knowledge base not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get knowledge base
      tags:
        - knowledge
    put:
      consumes:
        - application/json
      description: Create a knowledge base when absent or update an existing one using strong ETag concurrency.
      parameters:
        - description: Knowledge base ID
          example: '"support-docs"'
          in: path
          name: kb_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"etag123\""'
          in: header
          name: If-Match
          type: string
        - description: Knowledge base definition
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Knowledge base updated" example({"status":200,"message":"knowledge base updated","data":{"knowledge_base":{"id":"support","embedder":"default-embedder","vector_db":"default-vector","description":"Support
            knowledge base","_etag":"etag-value"}},"error":null})
          headers:
            ETag:
              description: Strong entity tag
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeBaseResponse'
                type: object
        "201":
          description: Knowledge base created" example({"status":201,"message":"knowledge base created","data":{"knowledge_base":{"id":"support","embedder":"default-embedder","vector_db":"default-vector","description":"Support
            knowledge base","_etag":"etag-value"}},"error":null})
          headers:
            Location:
              description: Relative URL for the knowledge base
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeBaseResponse'
                type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Knowledge base not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update knowledge base
      tags:
        - knowledge
  /knowledge-bases/{kb_id}/ingest:
    post:
      consumes:
        - application/json
      description: Trigger ingestion for configured sources using the requested strategy.
      parameters:
        - description: Knowledge base ID
          example: '"support-docs"'
          in: path
          name: kb_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Ingestion request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/knowledgerouter.KnowledgeIngestRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Ingestion summary" example({"status":200,"message":"knowledge ingestion completed","data":{"knowledge_base_id":"support","binding_id":"binding-123","documents":2,"chunks":16,"persisted":16},"error":null})
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeIngestResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Knowledge base not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Ingest knowledge base
      tags:
        - knowledge
  /knowledge-bases/{kb_id}/query:
    post:
      consumes:
        - application/json
      description: Execute a dense similarity query against a knowledge base.
      parameters:
        - description: Knowledge base ID
          example: '"support-docs"'
          in: path
          name: kb_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Query request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/knowledgerouter.KnowledgeQueryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Query matches" example({"status":200,"message":"knowledge query completed","data":{"matches":[{"binding_id":"binding-123","content":"Reset
            your password from the account settings page.","score":0.83,"token_estimate":120}]},"error":null})
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/knowledgerouter.KnowledgeQueryResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Knowledge base not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Query knowledge base
      tags:
        - knowledge
  /mcp-proxy/{name}/sse:
    get:
      consumes:
        - '*/*'
      description: Proxy Server-Sent Events requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
        - text/event-stream
      responses:
        "200":
          description: SSE stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy SSE requests to MCP server
      tags:
        - MCP Proxy
  /mcp-proxy/{name}/sse/{path}:
    get:
      consumes:
        - '*/*'
      description: Proxy Server-Sent Events requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
        - text/event-stream
      responses:
        "200":
          description: SSE stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy SSE requests to MCP server
      tags:
        - MCP Proxy
  /mcp-proxy/{name}/stream:
    delete:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    get:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    patch:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    post:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    put:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
  /mcp-proxy/{name}/stream/{path}:
    delete:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    get:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    patch:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    post:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
    put:
      consumes:
        - '*/*'
      description: Proxy streamable HTTP requests to a specific MCP server
      parameters:
        - description: MCP name
          in: path
          name: name
          required: true
          type: string
        - description: Additional path
          in: path
          name: path
          type: string
      produces:
        - '*/*'
      responses:
        "200":
          description: HTTP stream
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: MCP not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Proxy streamable HTTP requests to MCP server
      tags:
        - MCP Proxy
  /mcps:
    get:
      consumes:
        - application/json
      description: List MCP server configurations with cursor pagination.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by MCP ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCPs retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/mcprouter.MCPsListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List MCP servers
      tags:
        - mcps
  /mcps/{mcp_id}:
    delete:
      description: Delete an MCP server configuration. Returns conflict when referenced.
      parameters:
        - description: MCP ID
          example: '"filesystem"'
          in: path
          name: mcp_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "404":
          description: MCP not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: MCP referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete MCP server
      tags:
        - mcps
    get:
      consumes:
        - application/json
      description: Retrieve an MCP server configuration by ID.
      parameters:
        - description: MCP ID
          example: '"filesystem"'
          in: path
          name: mcp_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MCP retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/mcprouter.MCPDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: MCP not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get MCP server
      tags:
        - mcps
    put:
      consumes:
        - application/json
      description: Create an MCP server when absent or update an existing one using strong ETag concurrency.
      parameters:
        - description: MCP ID
          example: '"filesystem"'
          in: path
          name: mcp_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: MCP configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: MCP updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/mcprouter.MCPDTO'
                type: object
        "201":
          description: MCP created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Relative URL for the MCP
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/mcprouter.MCPDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: MCP referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update MCP server
      tags:
        - mcps
  /mcps/export:
    post:
      description: Write MCP YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":3},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export MCPs
      tags:
        - mcps
  /mcps/import:
    post:
      description: Read MCP YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":1,\"skipped\":0,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import MCPs
      tags:
        - mcps
  /memories:
    get:
      consumes:
        - application/json
      description: List memory configurations with cursor pagination.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by memory ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Memories retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/memoryrouter.MemoriesListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List memories
      tags:
        - memories
  /memories/{memory_id}:
    delete:
      description: Delete a memory configuration. Returns conflict when referenced.
      parameters:
        - description: Memory ID
          example: '"conversation"'
          in: path
          name: memory_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "404":
          description: Memory not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Memory referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete memory
      tags:
        - memories
    get:
      consumes:
        - application/json
      description: Retrieve a memory configuration by ID.
      parameters:
        - description: Memory ID
          example: '"conversation"'
          in: path
          name: memory_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Memory retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/memoryrouter.MemoryDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Memory not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get memory
      tags:
        - memories
    put:
      consumes:
        - application/json
      description: Create a memory configuration when absent or update an existing one using strong ETag
        concurrency.
      parameters:
        - description: Memory ID
          example: '"conversation"'
          in: path
          name: memory_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Memory configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Memory updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/memoryrouter.MemoryDTO'
                type: object
        "201":
          description: Memory created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Absolute URL for the memory
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/memoryrouter.MemoryDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Memory referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update memory
      tags:
        - memories
  /memories/export:
    post:
      description: Write memory YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":5},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export memories
      tags:
        - memories
  /memories/import:
    post:
      description: Read memory YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":3,\"skipped\":1,\"overwritten\":1,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import memories
      tags:
        - memories
  /memory/{memory_ref}/append:
    post:
      consumes:
        - application/json
      description: Append messages to existing memory content
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Key and messages to append
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memrouter.AppendMemoryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Memory appended successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/service.AppendResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Append to memory
      tags:
        - memory
  /memory/{memory_ref}/clear:
    post:
      consumes:
        - application/json
      description: Clear all memory content with confirmation
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Key and clear options
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memrouter.ClearMemoryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Memory cleared successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.ClearMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Clear memory
      tags:
        - memory
  /memory/{memory_ref}/delete:
    post:
      consumes:
        - application/json
      description: Delete all memory content for a specific key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Key to delete
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memrouter.DeleteMemoryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Memory deleted successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/service.DeleteResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Delete memory
      tags:
        - memory
  /memory/{memory_ref}/flush:
    post:
      consumes:
        - application/json
      description: Flush memory content with optional summarization. The actual_strategy field in the
        response indicates which flush strategy was used.
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Key and flush options
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memrouter.FlushMemoryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Memory flushed successfully. Response includes actual_strategy field showing which
            strategy was used
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.FlushMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Flush memory
      tags:
        - memory
  /memory/{memory_ref}/health:
    get:
      consumes:
        - application/json
      description: Get health status and metrics for memory
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: query
          name: key
          required: true
          type: string
        - description: Include detailed stats
          example: true
          in: query
          name: include_stats
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: Memory health retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.HealthMemoryResult'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Check memory health
      tags:
        - memory
  /memory/{memory_ref}/read:
    get:
      consumes:
        - application/json
      description: Retrieve memory content for a specific memory reference and key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: query
          name: key
          required: true
          type: string
        - description: 'Maximum number of messages to return (default: 50, max: 1000)'
          example: 50
          in: query
          name: limit
          type: integer
        - description: Number of messages to skip (for pagination)
          example: 0
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Memory read successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      has_more:
                        type: boolean
                      key:
                        type: string
                      limit:
                        type: integer
                      messages:
                        items:
                          properties:
                            content:
                              type: string
                            role:
                              type: string
                          type: object
                        type: array
                      offset:
                        type: integer
                      total_count:
                        type: integer
                    type: object
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Memory not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Read memory content
      tags:
        - memory
  /memory/{memory_ref}/stats:
    get:
      consumes:
        - application/json
      description: Retrieve detailed statistics about memory content
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Memory key
          example: '"user:123:profile"'
          in: query
          name: key
          required: true
          type: string
        - description: 'Limit for role distribution calculation (default: 100, max: 10000)'
          example: 100
          in: query
          name: limit
          type: integer
        - description: Offset for role distribution calculation
          example: 0
          in: query
          name: offset
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Memory statistics retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/uc.StatsMemoryOutput'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get memory statistics
      tags:
        - memory
  /memory/{memory_ref}/write:
    post:
      consumes:
        - application/json
      description: Write or replace memory content for a specific memory reference and key
      parameters:
        - description: Memory reference
          example: '"user_memory"'
          in: path
          name: memory_ref
          required: true
          type: string
        - description: Key and messages to write
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/memrouter.WriteMemoryRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Memory written successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/service.WriteResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Write memory content
      tags:
        - memory
  /memory/health:
    get:
      consumes:
        - application/json
      description: Returns comprehensive health information for the memory system
      produces:
        - application/json
      responses:
        "200":
          description: Memory system is healthy
          schema:
            $ref: '#/definitions/memory.SystemHealth'
        "503":
          description: Memory system is unhealthy
          schema:
            $ref: '#/definitions/memory.SystemHealth'
      summary: Get memory system health
      tags:
        - memory
        - health
  /memory/health/{memory_id}:
    get:
      consumes:
        - application/json
      description: Returns health information for a specific memory instance
      parameters:
        - description: Memory Instance ID
          in: path
          name: memory_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Memory instance health retrieved
          schema:
            $ref: '#/definitions/memory.InstanceHealth'
        "404":
          description: Memory instance not found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get memory instance health
      tags:
        - memory
        - health
  /metrics:
    get:
      description: |-
        Exposes application metrics in Prometheus exposition format.
        This endpoint is used by Prometheus servers to scrape metrics.

        The response is in text/plain format following the Prometheus
        exposition format specification.

        Available metrics include:
        - HTTP request rates and latencies
        - Temporal workflow execution metrics
        - System health information
      produces:
        - text/plain
      responses:
        "200":
          description: Metrics in Prometheus format
          schema:
            type: string
        "503":
          description: Monitoring service unavailable
          schema:
            type: string
      summary: Prometheus metrics endpoint
      tags:
        - Operations
  /models:
    get:
      consumes:
        - application/json
      description: List models with cursor pagination.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by model ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Models retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/modelrouter.ModelsListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List models
      tags:
        - models
  /models/{model_id}:
    delete:
      description: Delete a model configuration. Returns conflict when referenced.
      parameters:
        - description: Model ID
          example: '"openai:gpt-4o-mini"'
          in: path
          name: model_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "404":
          description: Model not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Model referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete model
      tags:
        - models
    get:
      consumes:
        - application/json
      description: Retrieve a model configuration by ID.
      parameters:
        - description: Model ID
          example: '"openai:gpt-4o-mini"'
          in: path
          name: model_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Model retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/modelrouter.ModelDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Model not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get model
      tags:
        - models
    put:
      consumes:
        - application/json
      description: Create a model when absent or update an existing one using strong ETag concurrency.
      parameters:
        - description: Model ID
          example: '"openai:gpt-4o-mini"'
          in: path
          name: model_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Model configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Model updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/modelrouter.ModelDTO'
                type: object
        "201":
          description: Model created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Relative URL for the model
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/modelrouter.ModelDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Model referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update model
      tags:
        - models
  /models/export:
    post:
      description: Write model YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":4},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export models
      tags:
        - models
  /models/import:
    post:
      description: Read model YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":2,\"skipped\":0,\"overwritten\":1,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import models
      tags:
        - models
  /project:
    delete:
      description: Project deletion is not supported; returns 405.
      produces:
        - application/json
      responses:
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete project
      tags:
        - project
    get:
      consumes:
        - application/json
      description: Retrieve the active project configuration.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Project retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/projectrouter.ProjectDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get project
      tags:
        - project
    put:
      consumes:
        - application/json
      description: Create the project configuration when absent or update an existing one using strong
        ETag concurrency.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Project configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Project updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/projectrouter.ProjectDTO'
                type: object
        "201":
          description: Project created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Relative URL for the project
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/projectrouter.ProjectDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update project
      tags:
        - project
  /project/export:
    post:
      description: Write the project YAML file for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":1},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export project
      tags:
        - project
  /project/import:
    post:
      description: Read the project YAML file from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":1,\"skipped\":0,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import project
      tags:
        - project
  /schedules:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all scheduled workflows with their current status and override information
      produces:
        - application/json
      responses:
        "200":
          description: Schedules retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleListResponse'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all scheduled workflows
      tags:
        - schedules
  /schedules/{workflow_id}:
    delete:
      consumes:
        - application/json
      description: Remove a scheduled workflow from Temporal. The schedule will be recreated on the next
        YAML reload if still defined.
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: Schedule deleted successfully
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Delete schedule
      tags:
        - schedules
    get:
      consumes:
        - application/json
      description: Retrieve detailed information about a specific scheduled workflow including YAML configuration
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Schedule retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get schedule by workflow ID
      tags:
        - schedules
    patch:
      consumes:
        - application/json
      description: Update a scheduled workflow's enabled state and/or cron expression. At least one field
        must be provided. This creates a temporary override that persists until the next YAML reload.
      parameters:
        - description: Workflow ID
          example: '"daily-report"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Update request with at least one field (enabled or cron)
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/schedulerouter.UpdateScheduleRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Schedule updated successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schedulerouter.ScheduleInfoResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Schedule not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Update schedule
      tags:
        - schedules
  /schemas:
    get:
      consumes:
        - application/json
      description: List schemas with cursor pagination.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by schema ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Schemas retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schemarouter.SchemasListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List schemas
      tags:
        - schemas
  /schemas/{schema_id}:
    delete:
      description: Delete a schema configuration. Returns conflict when referenced.
      parameters:
        - description: Schema ID
          example: '"user-profile"'
          in: path
          name: schema_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "404":
          description: Schema not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Schema referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete schema
      tags:
        - schemas
    get:
      consumes:
        - application/json
      description: Retrieve a schema by ID.
      parameters:
        - description: Schema ID
          example: '"user-profile"'
          in: path
          name: schema_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Schema retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schemarouter.SchemaDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Schema not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get schema
      tags:
        - schemas
    put:
      consumes:
        - application/json
      description: Create a schema when absent or update an existing schema using strong ETag concurrency.
      parameters:
        - description: Schema ID
          example: '"user-profile"'
          in: path
          name: schema_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Schema definition payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Schema updated
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schemarouter.SchemaDTO'
                type: object
        "201":
          description: Schema created
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            Location:
              description: Absolute URL for the created schema
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/schemarouter.SchemaDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Schema not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Schema referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update schema
      tags:
        - schemas
  /schemas/export:
    post:
      description: Write schema YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":2},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export schemas
      tags:
        - schemas
  /schemas/import:
    post:
      description: Read schema YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":1,\"skipped\":1,\"overwritten\":0,\"strategy\":\"overwrite_conflicts\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import schemas
      tags:
        - schemas
  /tasks:
    get:
      consumes:
        - application/json
      description: List tasks with cursor pagination. Optionally filter by workflow usage.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Return only tasks referenced by the given workflow
          example: '"wf1"'
          in: query
          name: workflow_id
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by task ID prefix
          in: query
          name: q
          type: string
        - collectionFormat: csv
          description: Expand fields (repeatable). E.g., expand=tools&expand=subtasks
          in: query
          items:
            type: string
          name: expand
          type: array
      produces:
        - application/json
      responses:
        "200":
          description: Tasks retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TasksListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List tasks
      tags:
        - tasks
  /tasks/{task_id}:
    delete:
      description: Delete a task configuration. Returns conflict when referenced.
      parameters:
        - description: Task ID
          example: '"approve-request"'
          in: path
          name: task_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Task referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete task
      tags:
        - tasks
    get:
      consumes:
        - application/json
      description: Retrieve a task configuration by ID.
      parameters:
        - description: Task ID
          example: '"approve-request"'
          in: path
          name: task_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - collectionFormat: csv
          description: Expand fields (repeatable). E.g., expand=tools&expand=subtasks
          in: query
          items:
            type: string
          name: expand
          type: array
      produces:
        - application/json
      responses:
        "200":
          description: Task retrieved
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get task
      tags:
        - tasks
    put:
      consumes:
        - application/json
      description: Create a task configuration when absent or update an existing one using strong ETag
        concurrency.
      parameters:
        - description: Task ID
          example: '"approve-request"'
          in: path
          name: task_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - collectionFormat: csv
          description: Expand fields (repeatable). E.g., expand=tools&expand=subtasks
          in: query
          items:
            type: string
          name: expand
          type: array
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Task configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Task updated
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskDTO'
                type: object
        "201":
          description: Task created
          headers:
            Location:
              description: Relative URL for the task
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Task referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update task
      tags:
        - tasks
  /tasks/{task_id}/executions:
    post:
      consumes:
        - application/json
      description: Execute a task and wait for the output in the same HTTP response.
      parameters:
        - description: Task ID
          example: '"task-build-artifact"'
          in: path
          name: task_id
          required: true
          type: string
        - description: Optional idempotency key to prevent duplicate execution
          in: header
          name: X-Idempotency-Key
          type: string
        - description: Execution request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/tkrouter.TaskExecRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Task executed
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskExecSyncResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Task not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "408":
          description: Execution timeout
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Duplicate request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Execute task synchronously
      tags:
        - tasks
  /tasks/{task_id}/executions/async:
    post:
      consumes:
        - application/json
      description: Start an asynchronous task execution and return a polling handle.
      parameters:
        - description: Task ID
          example: '"task-build-artifact"'
          in: path
          name: task_id
          required: true
          type: string
        - description: Optional correlation ID for request tracing
          in: header
          name: X-Correlation-ID
          type: string
        - description: Execution request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/tkrouter.TaskExecRequest'
      produces:
        - application/json
      responses:
        "202":
          description: Task execution started
          headers:
            Location:
              description: Execution status URL
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskExecAsyncResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Task not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Duplicate request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Start task execution asynchronously
      tags:
        - tasks
  /tasks/export:
    post:
      description: Write task YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":6},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export tasks
      tags:
        - tasks
  /tasks/import:
    post:
      description: Read task YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":4,\"skipped\":1,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import tasks
      tags:
        - tasks
  /tools:
    get:
      consumes:
        - application/json
      description: List tools with cursor pagination. Optionally filter by workflow usage.
      parameters:
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Return only tools referenced by the given workflow
          example: '"wf1"'
          in: query
          name: workflow_id
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          in: query
          name: cursor
          type: string
        - description: Filter by tool ID prefix
          in: query
          name: q
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tools retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/toolrouter.ToolsListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List tools
      tags:
        - tools
  /tools/{tool_id}:
    delete:
      description: Delete a tool configuration. Returns conflict when referenced.
      parameters:
        - description: Tool ID
          example: '"http-client"'
          in: path
          name: tool_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Tool not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Tool referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete tool
      tags:
        - tools
    get:
      consumes:
        - application/json
      description: Retrieve a tool configuration by ID.
      parameters:
        - description: Tool ID
          example: '"http-client"'
          in: path
          name: tool_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tool retrieved
          headers:
            ETag:
              description: Strong ETag for the resource
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/toolrouter.ToolDTO'
                type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Tool not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get tool
      tags:
        - tools
    put:
      consumes:
        - application/json
      description: Create a tool configuration when absent or update an existing one using strong ETag
        concurrency.
      parameters:
        - description: Tool ID
          example: '"http-client"'
          in: path
          name: tool_id
          required: true
          type: string
        - description: Project override
          example: '"demo"'
          in: query
          name: project
          type: string
        - description: Strong ETag for optimistic concurrency
          example: '"\"abc123\""'
          in: header
          name: If-Match
          type: string
        - description: Tool configuration payload
          in: body
          name: payload
          required: true
          schema:
            additionalProperties: true
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Tool updated
          headers:
            ETag:
              description: Strong ETag for the resource
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/toolrouter.ToolDTO'
                type: object
        "201":
          description: Tool created
          headers:
            ETag:
              description: Strong ETag for the resource
              type: string
            Location:
              description: Relative URL for the tool
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/toolrouter.ToolDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Tool not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "409":
          description: Tool referenced
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update tool
      tags:
        - tools
  /tools/export:
    post:
      description: Write tool YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":3},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export tools
      tags:
        - tools
  /tools/import:
    post:
      description: Read tool YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":2,\"skipped\":1,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import tools
      tags:
        - tools
  /users:
    get:
      consumes:
        - application/json
      description: List all users in the system
      parameters:
        - description: Bearer token for authentication (admin required)
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all users (admin only)
      tags:
        - users
    post:
      consumes:
        - application/json
      description: Create a new user with the specified email and role
      parameters:
        - description: Bearer token for authentication (admin required)
          in: header
          name: Authorization
          required: true
          type: string
        - description: User details
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/router.CreateUserRequest'
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user (admin only)
      tags:
        - users
  /users/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a user by ID
      parameters:
        - description: Bearer token for authentication (admin required)
          in: header
          name: Authorization
          required: true
          type: string
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user (admin only)
      tags:
        - users
    patch:
      consumes:
        - application/json
      description: Update a user's email or role
      parameters:
        - description: Bearer token for authentication (admin required)
          in: header
          name: Authorization
          required: true
          type: string
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: User update details
          in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/router.UpdateUserRequest'
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user (admin only)
      tags:
        - users
  /workflows:
    get:
      consumes:
        - application/json
      description: List workflows with cursor pagination, optional prefix search, field selection, or
        expansion.
      parameters:
        - description: Project override
          example: '"staging"'
          in: query
          name: project
          type: string
        - description: Page size (max 500)
          example: 50
          in: query
          name: limit
          type: integer
        - description: Opaque pagination cursor
          example: '"djI6YWZ0ZXI6d29ya2Zsb3ctMDAwMQ=="'
          in: query
          name: cursor
          type: string
        - description: Filter by workflow ID prefix
          example: '"data-"'
          in: query
          name: q
          type: string
        - description: Comma-separated child collections to expand (tasks,agents,tools)
          in: query
          name: expand
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: workflows retrieved
          headers:
            Link:
              description: RFC 8288 pagination links for next/prev
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.WorkflowsListResponse'
                type: object
        "400":
          description: Invalid cursor
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: List workflows
      tags:
        - workflows
  /workflows/{workflow_id}:
    delete:
      description: Delete a workflow configuration using strong ETag concurrency.
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Project override
          example: '"staging"'
          in: query
          name: project
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
          headers:
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Delete workflow
      tags:
        - workflows
    get:
      consumes:
        - application/json
      description: Retrieve a workflow configuration with optional field selection and expansion.
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Project override
          example: '"staging"'
          in: query
          name: project
          type: string
        - description: Comma-separated child collections to expand (tasks,agents,tools)
          in: query
          name: expand
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow retrieved
          headers:
            ETag:
              description: Strong entity tag for concurrency control
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.WorkflowDTO'
                type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Get workflow
      tags:
        - workflows
    put:
      consumes:
        - application/json
      description: Create a workflow when absent or update an existing workflow using strong ETag concurrency.
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Project override
          example: '"staging"'
          in: query
          name: project
          type: string
        - description: Comma-separated child collections to expand (tasks,agents,tools)
          in: query
          name: expand
          type: string
        - description: Strong ETag for optimistic concurrency
          in: header
          name: If-Match
          type: string
        - description: Workflow definition payload
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/workflow.Config'
      produces:
        - application/json
      responses:
        "200":
          description: workflow updated
          headers:
            ETag:
              description: Strong entity tag for the stored workflow
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.WorkflowDTO'
                type: object
        "201":
          description: workflow created
          headers:
            ETag:
              description: Strong entity tag for the stored workflow
              type: string
            Location:
              description: Relative URL for the created workflow
              type: string
            RateLimit-Limit:
              description: Requests allowed in the current window
              type: string
            RateLimit-Remaining:
              description: Remaining requests in the current window
              type: string
            RateLimit-Reset:
              description: Seconds until the window resets
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.WorkflowDTO'
                type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "404":
          description: Workflow not found
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "412":
          description: ETag mismatch
          schema:
            $ref: '#/definitions/core.ProblemDocument'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/core.ProblemDocument'
      summary: Create or update workflow
      tags:
        - workflows
  /workflows/{workflow_id}/agents:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all available agent configurations
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agents retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      agents:
                        items:
                          $ref: '#/definitions/agent.Config'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all agents
      tags:
        - workflows
  /workflows/{workflow_id}/agents/{agent_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific agent configuration by its ID
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Agent ID
          example: '"code-assistant"'
          in: path
          name: agent_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Agent retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/agent.Config'
                type: object
        "400":
          description: Invalid agent ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Agent not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get agent by ID
      tags:
        - workflows
  /workflows/{workflow_id}/executions:
    get:
      consumes:
        - application/json
      description: Retrieve all executions for a specific workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Workflow executions retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      executions:
                        items:
                          $ref: '#/definitions/workflow.State'
                        type: array
                    type: object
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List executions by workflow ID
      tags:
        - workflows
    post:
      consumes:
        - application/json
      description: Trigger the execution of a workflow with provided input data
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Workflow input data
          in: body
          name: input
          required: true
          schema:
            type: object
        - description: Optional correlation ID for request tracing
          in: header
          name: X-Correlation-ID
          type: string
      produces:
        - application/json
      responses:
        "202":
          description: Workflow triggered successfully
          headers:
            Location:
              description: Execution status URL
              type: string
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.ExecuteWorkflowResponse'
                type: object
        "400":
          description: Invalid input or workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Execute workflow
      tags:
        - workflows
  /workflows/{workflow_id}/executions/sync:
    post:
      consumes:
        - application/json
      description: Execute a workflow and wait for completion within the provided timeout.
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Optional correlation ID for request tracing
          in: header
          name: X-Correlation-ID
          type: string
        - description: Execution request
          in: body
          name: payload
          required: true
          schema:
            $ref: '#/definitions/wfrouter.WorkflowSyncRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Workflow execution completed
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/wfrouter.WorkflowSyncResponse'
                type: object
        "400":
          description: Invalid request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "408":
          description: Execution timeout
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "409":
          description: Duplicate request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "503":
          description: Worker unavailable
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Execute workflow synchronously
      tags:
        - workflows
  /workflows/{workflow_id}/tasks:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all tasks within a specific workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      tasks:
                        items:
                          $ref: '#/definitions/tkrouter.TaskResponse'
                        type: array
                    type: object
                type: object
        "400":
          description: Invalid workflow ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Workflow not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List tasks for a workflow
      tags:
        - workflows
  /workflows/{workflow_id}/tasks/{task_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific task configuration by its ID within a workflow
      parameters:
        - description: Workflow ID
          example: '"data-processing"'
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Task ID
          example: '"validate-input"'
          in: path
          name: task_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Task retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tkrouter.TaskResponse'
                type: object
        "400":
          description: Invalid workflow or task ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Task not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get task by ID
      tags:
        - workflows
  /workflows/{workflow_id}/tools:
    get:
      consumes:
        - application/json
      description: Retrieve a list of all available tool configurations
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tools retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    properties:
                      tools:
                        items:
                          $ref: '#/definitions/tool.Config'
                        type: array
                    type: object
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: List all tools
      tags:
        - workflows
  /workflows/{workflow_id}/tools/{tool_id}:
    get:
      consumes:
        - application/json
      description: Retrieve a specific tool configuration by its ID
      parameters:
        - description: Workflow ID
          in: path
          name: workflow_id
          required: true
          type: string
        - description: Tool ID
          example: '"format-code"'
          in: path
          name: tool_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Tool retrieved successfully
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    $ref: '#/definitions/tool.Config'
                type: object
        "400":
          description: Invalid tool ID
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "404":
          description: Tool not found
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal server error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      summary: Get tool by ID
      tags:
        - workflows
  /workflows/export:
    post:
      description: Write workflow YAML files for the active project.
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"written\":2},\"message\":\"export completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties:
                      type: integer
                    type: object
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Export workflows
      tags:
        - workflows
  /workflows/import:
    post:
      description: Read workflow YAML files from the project directory.
      parameters:
        - description: seed_only|overwrite_conflicts
          enum:
            - seed_only
            - overwrite_conflicts
          in: query
          name: strategy
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: 'Example: {\"data\":{\"imported\":2,\"skipped\":0,\"overwritten\":0,\"strategy\":\"seed_only\"},\"message\":\"import
            completed\"}'
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  data:
                    additionalProperties: true
                    type: object
                type: object
        "400":
          description: Bad Request
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
              - $ref: '#/definitions/router.Response'
              - properties:
                  error:
                    $ref: '#/definitions/router.ErrorInfo'
                type: object
      security:
        - ApiKeyAuth: []
      summary: Import workflows
      tags:
        - workflows

securityDefinitions:
  BearerAuth:
    description: Bearer token authentication (Optional - controlled by SERVER_AUTH_ENABLED environment
      variable. When enabled, all API endpoints require valid authentication. In development/testing,
      authentication may be disabled.)
    in: header
    name: Authorization
    type: apiKey

swagger: "2.0"

tags:
  - description: Workflow management operations
    name: workflows
  - description: Task management operations
    name: tasks
  - description: Agent management operations
    name: agents
  - description: Tool management operations
    name: tools
  - description: Schedule management operations
    name: schedules
  - description: Memory management operations
    name: memory
  - description: Authentication and API key management operations
    name: auth
  - description: User management operations (admin only)
    name: users
  - description: Operational endpoints for monitoring and health
    name: Operations
