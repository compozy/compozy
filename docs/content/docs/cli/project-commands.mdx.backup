---
title: Project Commands
description: Initialize and manage Compozy projects
icon: Settings
---

# Project Commands

Project commands help you create, configure, and manage Compozy projects. The primary command is `init` for initializing new projects.

<Callout type="info">
The `init` command creates a complete project structure with sensible defaults, making it easy to get started with Compozy.
</Callout>

## Initialize Project

### compozy init

Create a new Compozy project with the standard directory structure and configuration files:

```bash
# Initialize in current directory
compozy init

# Initialize in a new directory
compozy init my-project

# Initialize with project details
compozy init my-project --name "My AI Workflow" --description "Automated data processing"

# Skip interactive prompts
compozy init my-project --name "My Project" --template basic
```

**Features:**
- üìÅ **Complete Structure**: Creates workflows/, tools/, and agents/ directories
- üöÄ **Quick Start**: Generates example workflow and tool files
- üé® **Interactive Setup**: Friendly prompts for project configuration
- üìù **Documentation**: Creates README with getting started instructions

**Flags:**
- `--name` - Project name (required in non-interactive mode)
- `--description` - Project description
- `--version` - Initial version (default: 0.1.0)
- `--template` - Project template (default: basic)
- `--author` - Author name
- `--author-url` - Author website/URL
- `--interactive` - Force interactive mode even with flags

### Interactive Mode

When run without flags or with `--interactive`, the init command presents a friendly form:

```
üöÄ Initialize New Compozy Project

‚ùØ Project Name:
  my-awesome-workflow

  Description:
  AI-powered workflow automation system

  Version:
  0.1.0

  Author:
  Jane Developer

  Author URL:
  https://github.com/janedev

  Template:
  basic

Press Enter to continue, Tab to navigate, Ctrl+C to quit
```

### Project Structure

The init command creates this structure:

```
my-project/
‚îú‚îÄ‚îÄ compozy.yaml          # Project configuration
‚îú‚îÄ‚îÄ entrypoint.ts         # Tool entrypoint
‚îú‚îÄ‚îÄ README.md             # Project documentation
‚îú‚îÄ‚îÄ workflows/            # Workflow definitions
‚îÇ   ‚îî‚îÄ‚îÄ main.yaml        # Example workflow
‚îú‚îÄ‚îÄ tools/               # TypeScript tools
‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îî‚îÄ‚îÄ agents/              # Agent configurations
    ‚îî‚îÄ‚îÄ .gitkeep
```

### Generated Files

<Tabs>
  <Tab title="compozy.yaml">
    ```yaml
name: "my-project"
version: "0.1.0"
description: "AI-powered workflow automation"

author:
  name: "Jane Developer"
  url: "https://github.com/janedev"

workflows:
  - source: "./workflows/main.yaml"

models:
  - provider: "groq"
    model: "llama-3.3-70b-versatile"
    api_key: "{{ .env.GROQ_API_KEY }}"

runtime:
  type: "bun"
  entrypoint: "./entrypoint.ts"
  permissions:
    - --allow-read
    - --allow-net
    - --allow-write

autoload:
  enabled: true
  strict: true
  include:
    - "agents/*.yaml"
    - "tools/*.yaml"
  exclude:
    - "**/*~"
    - "**/*.bak"
    - "**/*.tmp"
    ```
  </Tab>
  <Tab title="entrypoint.ts">
    ```typescript
    #!/usr/bin/env bun
    
    /**
     * Tool Entrypoint for my-project
     * 
     * This file is the main entry point for all tools in your project.
     * Export your tool functions as either:
     * 1. Default export: export default { "tool-name": toolFunction }
     * 2. Named exports: export { toolFunction as tool_name }
     */
    
    // Example tool function
    async function exampleTool(input: { message: string }) {
      console.log(`Processing: ${input.message}`);
      
      return {
        success: true,
        result: `Processed: ${input.message}`,
        timestamp: new Date().toISOString()
      };
    }
    
    // Export tools using the default export pattern (recommended)
    export default {
      "example-tool": exampleTool,
    };
    ```
  </Tab>
  <Tab title="workflows/main.yaml">
    ```yaml
    resource: "workflow"
    id: "main"
    name: "Main Workflow"
    description: "Example workflow for my-project"
    
    inputs:
      message:
        type: string
        description: "Input message to process"
        default: "Hello, Compozy!"
    
    tasks:
      - id: process-message
        type: tool
        tool: example-tool
        input:
          message: "{{ .inputs.message }}"
      
      - id: show-result
        type: basic
        input:
          result: "{{ .tasks.process-message.result }}"
    
    outputs:
      result: "{{ .tasks.show-result.result }}"
      processed_at: "{{ .tasks.process-message.timestamp }}"
    ```
  </Tab>
  <Tab title="README.md">
    ```markdown
    # my-project
    
    AI-powered workflow automation
    
    ## Getting Started
    
    1. Install dependencies:
       ```bash
       bun install
       ```
    
    2. Set up your environment:
       ```bash
       cp .env.example .env
       # Edit .env with your API keys
       ```
    
    3. Start the development server:
       ```bash
       compozy dev
       ```
    
    4. Execute the example workflow:
       ```bash
       compozy workflow execute main --input '{"message": "Hello!"}'
       ```
    
    ## Project Structure
    
    - `workflows/` - Workflow definitions
    - `tools/` - TypeScript tool implementations
    - `agents/` - AI agent configurations
    - `compozy.yaml` - Project configuration
    - `entrypoint.ts` - Tool entrypoint file
    
    ## Development
    
    The development server (`compozy dev`) provides hot reload functionality.
    Any changes to workflows, tools, or configuration files will automatically
    restart the server.
    
    ## Author
    
    Jane Developer - https://github.com/janedev
    ```
  </Tab>
</Tabs>

## Templates

Different templates provide starting points for various use cases:

### Basic Template (Default)

The minimal template with example workflow and tool:
- Simple project structure
- One example workflow
- One example tool
- Basic configuration

### Advanced Templates (Coming Soon)

<List>
  <ListItem title="Data Processing">
    Template for ETL and data transformation workflows
  </ListItem>
  <ListItem title="API Integration">
    Template with API client tools and authentication patterns
  </ListItem>
  <ListItem title="Multi-Agent">
    Template demonstrating agent collaboration patterns
  </ListItem>
  <ListItem title="MCP Integration">
    Template with MCP server configuration and tools
  </ListItem>
</List>

## Common Patterns

### Starting a New Project

<Steps>
  <Step>
    **Initialize the project**
    ```bash
    compozy init my-ai-assistant \
      --name "AI Assistant" \
      --description "Intelligent automation assistant"
    ```
  </Step>
  <Step>
    **Navigate to project directory**
    ```bash
    cd my-ai-assistant
    ```
  </Step>
  <Step>
    **Install dependencies (if any)**
    ```bash
    bun install
    ```
  </Step>
  <Step>
    **Configure environment**
    ```bash
    # Create .env file
    echo "GROQ_API_KEY=your-api-key" > .env
    ```
  </Step>
  <Step>
    **Start development server**
    ```bash
    compozy dev
    ```
  </Step>
</Steps>

### Converting Existing Project

If you have existing workflows or tools:

```bash
# Initialize in current directory
compozy init .

# Move existing files to proper locations
mv *.yaml workflows/
mv *.ts tools/

# Update compozy.yaml with your workflows
# Edit workflow sources in compozy.yaml
```

### CI/CD Setup

Initialize project for automated deployment:

```bash
# Create project with CI-friendly settings
compozy init deployment-project \
  --name "Automated Workflows" \
  --version "1.0.0" \
  --author "CI Bot" \
  --template basic

# Add to git
cd deployment-project
git init
git add .
git commit -m "Initial project setup"
```

## Configuration Options

### Project Metadata

Configure project information in `compozy.yaml`:

```yaml
name: "project-name"        # Required, used for identification
version: "1.0.0"           # Semantic versioning recommended
description: "Purpose"      # Clear project description

author:
  name: "Your Name"        # Optional author information
  url: "https://..."       # Optional website/profile
```

### Runtime Configuration

Control how tools execute:

```yaml
runtime:
  type: "bun"              # Runtime engine (currently only bun)
  entrypoint: "./main.ts"  # Tool entrypoint file
  permissions:             # Bun permissions
    - --allow-read        # File system read access
    - --allow-write       # File system write access
    - --allow-net         # Network access
    - --allow-env         # Environment variable access
```

### Model Configuration

Configure AI models:

```yaml
models:
  - provider: "openai"
    model: "gpt-4"
    api_key: "{{ .env.OPENAI_API_KEY }}"
    
  - provider: "anthropic"
    model: "claude-3-opus"
    api_key: "{{ .env.ANTHROPIC_API_KEY }}"
    
  - provider: "groq"
    model: "llama-3.3-70b-versatile"
    api_key: "{{ .env.GROQ_API_KEY }}"
```

### Autoload Configuration

Control automatic file discovery:

```yaml
autoload:
  enabled: true            # Enable/disable autoloading
  strict: true            # Fail on invalid files
  include:                # Glob patterns to include
    - "agents/*.yaml"
    - "tools/*.yaml"
    - "workflows/**/*.yaml"
  exclude:                # Glob patterns to exclude
    - "**/*.test.yaml"
    - "**/*.bak"
    - "**/drafts/*"
```

## Best Practices

<List>
  <ListItem title="Use Semantic Versioning">
    Start with 0.1.0 and increment following semver principles
  </ListItem>
  <ListItem title="Clear Naming">
    Use descriptive names for projects that indicate their purpose
  </ListItem>
  <ListItem title="Environment Variables">
    Always use environment variables for sensitive data like API keys
  </ListItem>
  <ListItem title="Documentation">
    Keep README.md updated with setup instructions and examples
  </ListItem>
  <ListItem title="Version Control">
    Initialize git immediately after project creation
  </ListItem>
</List>

## Troubleshooting

### Common Issues

<Tabs>
  <Tab title="Permission Denied">
    ```bash
    # Check directory permissions
    ls -la
    
    # Create with sudo if needed
    sudo compozy init my-project
    sudo chown -R $USER:$USER my-project
    ```
  </Tab>
  <Tab title="Template Not Found">
    ```bash
    # List available templates
    compozy init --list-templates
    
    # Use default template
    compozy init my-project --template basic
    ```
  </Tab>
  <Tab title="Directory Exists">
    ```bash
    # Initialize in existing directory
    compozy init . --force
    
    # Or remove and recreate
    rm -rf my-project
    compozy init my-project
    ```
  </Tab>
</Tabs>

## Next Steps

<ReferenceCardList>
  <ReferenceCard
    title="Development Server"
    description="Start developing with hot reload"
    href="/docs/cli/dev-commands"
  />
  <ReferenceCard
    title="Workflow Commands"
    description="Execute and manage workflows"
    href="/docs/cli/workflow-commands"
  />
  <ReferenceCard
    title="First Workflow"
    description="Create your first workflow"
    href="/docs/core/getting-started/first-workflow"
  />
</ReferenceCardList>