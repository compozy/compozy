// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/compozy/compozy",
        "contact": {
            "name": "Compozy Support",
            "url": "https://github.com/compozy/compozy",
            "email": "support@compozy.com"
        },
        "license": {
            "name": "BSL-1.1",
            "url": "https://github.com/compozy/compozy/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/mcps": {
            "get": {
                "description": "Get a list of all configured Model Context Protocol servers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Management"
                ],
                "summary": "List all MCP definitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of MCPs with their status",
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.ListMCPsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new Model Context Protocol server configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Management"
                ],
                "summary": "Add a new MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "MCP definition to add",
                        "name": "mcp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDefinition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MCP added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "MCP already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/mcps/{name}": {
            "get": {
                "description": "Get details of a specific Model Context Protocol server configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Management"
                ],
                "summary": "Get an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP details with status",
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDetailsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing Model Context Protocol server configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Management"
                ],
                "summary": "Update an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated MCP definition",
                        "name": "mcp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.MCPDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a Model Context Protocol server configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Management"
                ],
                "summary": "Remove an MCP definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP removed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/meta/changes": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List recent provenance changes (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Max results (default 50)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/admin/meta/{type}/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get resource provenance metadata (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource type",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/admin/reload": {
            "post": {
                "description": "Rebuild compiled workflows from repo|builder and trigger schedule reconciliation. Admin only.\nAliases: yaml -\u003e repo, store -\u003e builder.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Reload configuration and reconcile schedules",
                "parameters": [
                    {
                        "enum": [
                            "repo",
                            "builder"
                        ],
                        "type": "string",
                        "description": "Reload source. yaml-\u003erepo, store-\u003ebuilder. Default repo.",
                        "name": "source",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reload completed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/admin/tools": {
            "get": {
                "description": "Get a list of all tools available from all connected MCP servers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Tools"
                ],
                "summary": "List all available tools",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available tools",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/tools/call": {
            "post": {
                "description": "Execute a specific tool with provided arguments on the specified MCP server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCP Tools"
                ],
                "summary": "Call a tool on an MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Tool call request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mcpproxy.CallToolRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool execution result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP or tool not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Tool execution failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/agents": {
            "get": {
                "description": "List agents with cursor pagination. Optionally filter by workflow usage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List agents",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"wf1\"",
                        "description": "Return only agents referenced by the given workflow",
                        "name": "workflow_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by agent ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agents retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentsListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/agents/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write agent YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Export agents",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":2},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/agents/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read agent YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Import agents",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":1,\\\"skipped\\\":1,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/agents/{agent_id}": {
            "get": {
                "description": "Retrieve an agent configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get agent",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create an agent when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Create or update agent",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Agent configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Agent created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Absolute URL for the agent"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Agent referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an agent configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete agent",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Agent referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/agents/{agent_id}/executions": {
            "post": {
                "description": "Start an asynchronous agent execution and return a polling handle.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Start agent execution asynchronously",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional correlation ID for request tracing",
                        "name": "X-Correlation-ID",
                        "in": "header"
                    },
                    {
                        "description": "Execution request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agentrouter.AgentExecRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Agent execution started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentExecAsyncResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Execution status URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Duplicate request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/agents/{agent_id}/executions/sync": {
            "post": {
                "description": "Execute an agent and wait for the output in the same HTTP response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Execute agent synchronously",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional idempotency key to prevent duplicate execution",
                        "name": "X-Idempotency-Key",
                        "in": "header"
                    },
                    {
                        "description": "Execution request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/agentrouter.AgentExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent executed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.AgentExecSyncResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "408": {
                        "description": "Execution timeout",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Duplicate request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/generate": {
            "post": {
                "description": "Generate a new API key for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate a new API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "contains data.api_key and message",
                        "schema": {
                            "$ref": "#/definitions/router.GenerateKeyResponse"
                        }
                    },
                    "401": {
                        "description": "authentication failure",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/router.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/keys": {
            "get": {
                "description": "List all API keys for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "List user's API keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/keys/{id}": {
            "delete": {
                "description": "Revoke an API key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Revoke an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "description": "Trigger workflows by sending events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Send event",
                "parameters": [
                    {
                        "description": "Event data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wfrouter.EventRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.EventResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/agents/{exec_id}": {
            "get": {
                "description": "Retrieve the latest status for a direct agent execution. The response includes a usage field containing aggregated LLM token counts grouped by provider and model.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Get agent execution status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Agent execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Execution status retrieved. The data.usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agentrouter.ExecutionStatusDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to load execution",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/agents/{exec_id}/stream": {
            "get": {
                "description": "Streams agent execution updates over Server-Sent Events, emitting structured JSON or llm_chunk text depending on the output schema.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Stream agent execution events",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Agent execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"42\"",
                        "description": "Resume the stream from the provided event id",
                        "name": "Last-Event-ID",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "example": 500,
                        "description": "Polling interval (milliseconds). Default 500, min 250, max 2000.",
                        "name": "poll_ms",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"agent_status,llm_chunk,complete\"",
                        "description": "Comma-separated list of event types to emit (default: all events).",
                        "name": "events",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Pub/Sub provider unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/tasks/{exec_id}": {
            "get": {
                "description": "Retrieve the latest status for a direct task execution. The response includes a usage field containing aggregated LLM token counts grouped by provider and model.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Get task execution status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Task execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Execution status retrieved. The data.usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskExecutionStatusDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to load execution",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/tasks/{exec_id}/stream": {
            "get": {
                "description": "Streams task execution updates over Server-Sent Events, emitting structured JSON or llm_chunk text depending on the task output schema.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Stream task execution events",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Task execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"42\"",
                        "description": "Resume the stream from the provided event id",
                        "name": "Last-Event-ID",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "example": 500,
                        "description": "Polling interval (milliseconds). Default 500, min 250, max 2000.",
                        "name": "poll_ms",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"task_status,llm_chunk,complete\"",
                        "description": "Comma-separated list of event types to emit (default: all events).",
                        "name": "events",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Pub/Sub provider unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows": {
            "get": {
                "description": "Retrieve a list of all workflow executions across all workflows. Each execution includes a usage field containing aggregated LLM token counts grouped by provider and model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "List all workflow executions",
                "responses": {
                    "200": {
                        "description": "Workflow executions retrieved successfully. Each execution's usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "executions": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/wfrouter.WorkflowExecutionDTO"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}": {
            "get": {
                "description": "Retrieve a specific workflow execution by its execution ID. The response includes a usage field containing aggregated LLM token counts grouped by provider and model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Get workflow execution by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution retrieved successfully. The data.usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowExecutionDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/cancel": {
            "post": {
                "description": "Cancel a specific workflow execution by its execution ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Cancel workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution canceled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/pause": {
            "post": {
                "description": "Pause a specific workflow execution by its execution ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Pause workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution paused successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/resume": {
            "post": {
                "description": "Resume a specific workflow execution by its execution ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Resume workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"workflowID_execID\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution resumed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/signals": {
            "post": {
                "description": "Send a signal with payload to a specific workflow execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Send signal to workflow execution",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Workflow Execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signal data",
                        "name": "signal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wfrouter.SignalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signal sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.SignalResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid execution ID or signal data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/executions/workflows/{exec_id}/stream": {
            "get": {
                "description": "Streams workflow progress over Server-Sent Events with Last-Event-ID resume support and configurable polling.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "executions"
                ],
                "summary": "Stream workflow execution events",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2Z4PVTL6K27XVT4A3NPKMDD5BG\"",
                        "description": "Workflow execution ID",
                        "name": "exec_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"42\"",
                        "description": "Resume the stream from the provided event id",
                        "name": "Last-Event-ID",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "example": 500,
                        "description": "Polling interval (milliseconds). Default 500, min 250, max 2000.",
                        "name": "poll_ms",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"workflow_start,workflow_status,complete,error\"",
                        "description": "Comma-separated list of event types to emit (default: all events).",
                        "name": "events",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Execution not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns overall service health, readiness and components status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health",
                    "diagnostics"
                ],
                "summary": "Get server health",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service is not ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/hooks/{slug}": {
            "post": {
                "description": "Accepts webhook payloads and triggers matching workflow events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Trigger webhook",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"my-webhook\"",
                        "description": "Webhook slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"idemp-123\"",
                        "description": "Optional idempotency key to prevent duplicate processing",
                        "name": "X-Idempotency-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "\"corr-456\"",
                        "description": "Optional correlation ID for request tracing",
                        "name": "X-Correlation-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "\"sha256=abc123...\"",
                        "description": "Optional HMAC signature header (configurable per webhook)",
                        "name": "X-Sig",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "\"t=123,v1=def...\"",
                        "description": "Stripe webhook signature (when using stripe verification)",
                        "name": "Stripe-Signature",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "example": "\"sha256=ghi789...\"",
                        "description": "GitHub webhook signature (when using github verification)",
                        "name": "X-Hub-Signature-256",
                        "in": "header"
                    },
                    {
                        "description": "Arbitrary JSON payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Processed successfully",
                        "schema": {
                            "$ref": "#/definitions/webhook.SuccessResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted and enqueued",
                        "schema": {
                            "$ref": "#/definitions/webhook.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or oversized payload",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Signature verification failed",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Webhook not found",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Duplicate idempotency key",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/webhook.ErrorResponse"
                        }
                    }
                },
                "x-example-error": {
                    "details": "invalid JSON payload",
                    "error": "bad_request"
                },
                "x-example-success": {
                    "data": {
                        "result": "ok"
                    },
                    "message": "Success"
                }
            }
        },
        "/knowledge-bases": {
            "get": {
                "description": "List knowledge bases with cursor-based pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "List knowledge bases",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Knowledge bases retrieved. Example: {\\\"status\\\":200,\\\"message\\\":\\\"knowledge bases retrieved\\\",\\\"data\\\":{\\\"knowledge_bases\\\":[{\\\"id\\\":\\\"support\\\",\\\"embedder\\\":\\\"default-embedder\\\",\\\"vector_db\\\":\\\"default-vector\\\",\\\"ingest\\\":\\\"manual\\\"}],\\\"page\\\":{\\\"limit\\\":1,\\\"next_cursor\\\":\\\"eyJpZCI6ICJiIn0=\\\",\\\"prev_cursor\\\":\\\"\\\"}},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeBaseListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor parameter",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/knowledge-bases/{kb_id}": {
            "get": {
                "description": "Retrieve a knowledge base by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Get knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"support-docs\"",
                        "description": "Knowledge base ID",
                        "name": "kb_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Knowledge base retrieved. Example: {\\\"status\\\":200,\\\"message\\\":\\\"knowledge base retrieved\\\",\\\"data\\\":{\\\"knowledge_base\\\":{\\\"id\\\":\\\"support\\\",\\\"embedder\\\":\\\"default-embedder\\\",\\\"vector_db\\\":\\\"default-vector\\\",\\\"ingest\\\":\\\"manual\\\",\\\"_etag\\\":\\\"etag-value\\\"}},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeBaseResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for caching"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Knowledge base not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a knowledge base when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Create or update knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"support-docs\"",
                        "description": "Knowledge base ID",
                        "name": "kb_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"etag123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Knowledge base definition",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Knowledge base updated. Example: {\\\"status\\\":200,\\\"message\\\":\\\"knowledge base updated\\\",\\\"data\\\":{\\\"knowledge_base\\\":{\\\"id\\\":\\\"support\\\",\\\"embedder\\\":\\\"default-embedder\\\",\\\"vector_db\\\":\\\"default-vector\\\",\\\"ingest\\\":\\\"manual\\\",\\\"description\\\":\\\"Support knowledge base\\\",\\\"_etag\\\":\\\"etag-value\\\"}},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeBaseResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag"
                            }
                        }
                    },
                    "201": {
                        "description": "Knowledge base created. Example: {\\\"status\\\":201,\\\"message\\\":\\\"knowledge base created\\\",\\\"data\\\":{\\\"knowledge_base\\\":{\\\"id\\\":\\\"support\\\",\\\"embedder\\\":\\\"default-embedder\\\",\\\"vector_db\\\":\\\"default-vector\\\",\\\"ingest\\\":\\\"manual\\\",\\\"description\\\":\\\"Support knowledge base\\\",\\\"_etag\\\":\\\"etag-value\\\"}},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeBaseResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the knowledge base"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Knowledge base not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a knowledge base and remove persisted vectors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Delete knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"support-docs\"",
                        "description": "Knowledge base ID",
                        "name": "kb_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"etag123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Knowledge base not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Knowledge base referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/knowledge-bases/{kb_id}/ingest": {
            "post": {
                "description": "Trigger ingestion for configured sources using the requested strategy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Ingest knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"support-docs\"",
                        "description": "Knowledge base ID",
                        "name": "kb_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "description": "Ingestion request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/knowledgerouter.KnowledgeIngestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ingestion summary. Example: {\\\"status\\\":200,\\\"message\\\":\\\"knowledge ingestion completed\\\",\\\"data\\\":{\\\"knowledge_base_id\\\":\\\"support\\\",\\\"binding_id\\\":\\\"binding-123\\\",\\\"documents\\\":2,\\\"chunks\\\":16,\\\"persisted\\\":16},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeIngestResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Knowledge base not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/knowledge-bases/{kb_id}/query": {
            "post": {
                "description": "Execute a dense similarity query against a knowledge base.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "knowledge"
                ],
                "summary": "Query knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"support-docs\"",
                        "description": "Knowledge base ID",
                        "name": "kb_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "description": "Query request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/knowledgerouter.KnowledgeQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query matches. Example: {\\\"status\\\":200,\\\"message\\\":\\\"knowledge query completed\\\",\\\"data\\\":{\\\"matches\\\":[{\\\"binding_id\\\":\\\"binding-123\\\",\\\"content\\\":\\\"Reset your password from the account settings page.\\\",\\\"score\\\":0.83,\\\"token_estimate\\\":120}]},\\\"error\\\":null}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/knowledgerouter.KnowledgeQueryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Knowledge base not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/mcp-proxy/{name}/sse": {
            "get": {
                "description": "Proxy Server-Sent Events requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*",
                    "text/event-stream"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy SSE requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/mcp-proxy/{name}/sse/{path}": {
            "get": {
                "description": "Proxy Server-Sent Events requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*",
                    "text/event-stream"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy SSE requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/mcp-proxy/{name}/stream": {
            "get": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/mcp-proxy/{name}/stream/{path}": {
            "get": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Proxy streamable HTTP requests to a specific MCP server",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "*/*"
                ],
                "tags": [
                    "MCP Proxy"
                ],
                "summary": "Proxy streamable HTTP requests to MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCP name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional path",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTTP stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/mcps": {
            "get": {
                "description": "List MCP server configurations with cursor pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "List MCP servers",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by MCP ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCPs retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/mcprouter.MCPsListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/mcps/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write MCP YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "Export MCPs",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":3},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/mcps/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read MCP YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "Import MCPs",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":1,\\\"skipped\\\":0,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/mcps/{mcp_id}": {
            "get": {
                "description": "Retrieve an MCP server configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "Get MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"filesystem\"",
                        "description": "MCP ID",
                        "name": "mcp_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/mcprouter.MCPDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create an MCP server when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "Create or update MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"filesystem\"",
                        "description": "MCP ID",
                        "name": "mcp_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "MCP configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MCP updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/mcprouter.MCPDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "MCP created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/mcprouter.MCPDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the MCP"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "MCP referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an MCP server configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mcps"
                ],
                "summary": "Delete MCP server",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"filesystem\"",
                        "description": "MCP ID",
                        "name": "mcp_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "404": {
                        "description": "MCP not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "MCP referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/memories": {
            "get": {
                "description": "List memory configurations with cursor pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "List memories",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by memory ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memories retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/memoryrouter.MemoriesListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/memories/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write memory YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Export memories",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":5},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memories/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read memory YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Import memories",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":3,\\\"skipped\\\":1,\\\"overwritten\\\":1,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memories/{memory_id}": {
            "get": {
                "description": "Retrieve a memory configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Get memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"conversation\"",
                        "description": "Memory ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/memoryrouter.MemoryDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Memory not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a memory configuration when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Create or update memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"conversation\"",
                        "description": "Memory ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Memory configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/memoryrouter.MemoryDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Memory created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/memoryrouter.MemoryDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Absolute URL for the memory"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Memory referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a memory configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memories"
                ],
                "summary": "Delete memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"conversation\"",
                        "description": "Memory ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "404": {
                        "description": "Memory not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Memory referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/memory/health": {
            "get": {
                "description": "Returns comprehensive health information for the memory system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory",
                    "health"
                ],
                "summary": "Get memory system health",
                "responses": {
                    "200": {
                        "description": "Memory system is healthy",
                        "schema": {
                            "$ref": "#/definitions/memory.SystemHealth"
                        }
                    },
                    "503": {
                        "description": "Memory system is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/memory.SystemHealth"
                        }
                    }
                }
            }
        },
        "/memory/health/{memory_id}": {
            "get": {
                "description": "Returns health information for a specific memory instance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory",
                    "health"
                ],
                "summary": "Get memory instance health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Memory Instance ID",
                        "name": "memory_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory instance health retrieved",
                        "schema": {
                            "$ref": "#/definitions/memory.InstanceHealth"
                        }
                    },
                    "404": {
                        "description": "Memory instance not found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/append": {
            "post": {
                "description": "Append messages to existing memory content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Append to memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and messages to append",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.AppendMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory appended successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.AppendResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/clear": {
            "post": {
                "description": "Clear all memory content with confirmation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Clear memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and clear options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.ClearMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory cleared successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.ClearMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/delete": {
            "post": {
                "description": "Delete all memory content for a specific key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Delete memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.DeleteMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.DeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/flush": {
            "post": {
                "description": "Flush memory content with optional summarization. The actual_strategy field in the response indicates which flush strategy was used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Flush memory",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and flush options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.FlushMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory flushed successfully. Response includes actual_strategy field showing which strategy was used",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.FlushMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/health": {
            "get": {
                "description": "Get health status and metrics for memory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Check memory health",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Include detailed stats",
                        "name": "include_stats",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory health retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.HealthMemoryResult"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/read": {
            "get": {
                "description": "Retrieve memory content for a specific memory reference and key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Read memory content",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Maximum number of messages to return (default: 50, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Number of messages to skip (for pagination)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory read successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "has_more": {
                                                    "type": "boolean"
                                                },
                                                "key": {
                                                    "type": "string"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "content": {
                                                                "type": "string"
                                                            },
                                                            "role": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "total_count": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Memory not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/stats": {
            "get": {
                "description": "Retrieve detailed statistics about memory content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Get memory statistics",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user:123:profile\"",
                        "description": "Memory key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 100,
                        "description": "Limit for role distribution calculation (default: 100, max: 10000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Offset for role distribution calculation",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory statistics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/uc.StatsMemoryOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/memory/{memory_ref}/write": {
            "post": {
                "description": "Write or replace memory content for a specific memory reference and key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memory"
                ],
                "summary": "Write memory content",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user_memory\"",
                        "description": "Memory reference",
                        "name": "memory_ref",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Key and messages to write",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/memrouter.WriteMemoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Memory written successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/service.WriteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Exposes application metrics in Prometheus exposition format.\nThis endpoint is used by Prometheus servers to scrape metrics.\n\nThe response is in text/plain format following the Prometheus\nexposition format specification.\n\nAvailable metrics include:\n- HTTP request rates and latencies\n- Temporal workflow execution metrics\n- System health information",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Prometheus metrics endpoint",
                "responses": {
                    "200": {
                        "description": "Metrics in Prometheus format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "Monitoring service unavailable",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/models": {
            "get": {
                "description": "List models with cursor pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "List models",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by model ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Models retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/modelrouter.ModelsListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/models/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write model YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Export models",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":4},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/models/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read model YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Import models",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":2,\\\"skipped\\\":0,\\\"overwritten\\\":1,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/models/{model_id}": {
            "get": {
                "description": "Retrieve a model configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Get model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"openai:gpt-4o-mini\"",
                        "description": "Model ID",
                        "name": "model_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/modelrouter.ModelDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Model not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a model when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Create or update model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"openai:gpt-4o-mini\"",
                        "description": "Model ID",
                        "name": "model_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Model configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/modelrouter.ModelDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Model created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/modelrouter.ModelDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the model"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Model referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a model configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Delete model",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"openai:gpt-4o-mini\"",
                        "description": "Model ID",
                        "name": "model_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "404": {
                        "description": "Model not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Model referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/project": {
            "get": {
                "description": "Retrieve the active project configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Get project",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/projectrouter.ProjectDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create the project configuration when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Create or update project",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency (required for updates)",
                        "name": "If-Match",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Project configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/projectrouter.ProjectDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Project created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/projectrouter.ProjectDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the project"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Project deletion is not supported; returns 405.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Delete project",
                "responses": {
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/project/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write the project YAML file for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Export project",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":1},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/project/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read the project YAML file from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "project"
                ],
                "summary": "Import project",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":1,\\\"skipped\\\":0,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Retrieve a list of all scheduled workflows with their current status and override information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "List all scheduled workflows",
                "responses": {
                    "200": {
                        "description": "Schedules retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schedules/{workflow_id}": {
            "get": {
                "description": "Retrieve detailed information about a specific scheduled workflow including YAML configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Get schedule by workflow ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a scheduled workflow from Temporal. The schedule will be recreated on the next YAML reload if still defined.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Delete schedule",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Schedule deleted successfully"
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a scheduled workflow's enabled state and/or cron expression. At least one field must be provided. This creates a temporary override that persists until the next YAML reload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "Update schedule",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"daily-report\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request with at least one field (enabled or cron)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schedulerouter.UpdateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schemas": {
            "get": {
                "description": "List schemas with cursor pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "List schemas",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by schema ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schemas retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemarouter.SchemasListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/schemas/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write schema YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Export schemas",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":2},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schemas/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read schema YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Import schemas",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":1,\\\"skipped\\\":1,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"overwrite_conflicts\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/schemas/{schema_id}": {
            "get": {
                "description": "Retrieve a schema by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Get schema",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user-profile\"",
                        "description": "Schema ID",
                        "name": "schema_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemarouter.SchemaDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Schema not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a schema when absent or update an existing schema using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Create or update schema",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user-profile\"",
                        "description": "Schema ID",
                        "name": "schema_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Schema definition payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schema updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemarouter.SchemaDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Schema created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemarouter.SchemaDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Absolute URL for the created schema"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Schema not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Schema referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a schema configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemas"
                ],
                "summary": "Delete schema",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user-profile\"",
                        "description": "Schema ID",
                        "name": "schema_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "404": {
                        "description": "Schema not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Schema referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "List tasks with cursor pagination. Optionally filter by workflow usage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "List tasks",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"wf1\"",
                        "description": "Return only tasks referenced by the given workflow",
                        "name": "workflow_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task ID prefix",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Expand fields (repeatable). E.g., expand=tools\u0026expand=subtasks",
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TasksListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/tasks/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write task YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Export tasks",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":6},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read task YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Import tasks",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":4,\\\"skipped\\\":1,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/{task_id}": {
            "get": {
                "description": "Retrieve a task configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"approve-request\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Expand fields (repeatable). E.g., expand=tools\u0026expand=subtasks",
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a task configuration when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create or update task",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"approve-request\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Expand fields (repeatable). E.g., expand=tools\u0026expand=subtasks",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Task configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Task created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the task"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Task referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a task configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete task",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"approve-request\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Task referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/tasks/{task_id}/executions": {
            "post": {
                "description": "Start an asynchronous task execution and return a polling handle.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Start task execution asynchronously",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"task-build-artifact\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional correlation ID for request tracing",
                        "name": "X-Correlation-ID",
                        "in": "header"
                    },
                    {
                        "description": "Execution request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tkrouter.TaskExecRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task execution started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskExecAsyncResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Execution status URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Duplicate request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/{task_id}/executions/sync": {
            "post": {
                "description": "Execute a task and wait for the output in the same HTTP response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Execute task synchronously",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"task-build-artifact\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional idempotency key to prevent duplicate execution",
                        "name": "X-Idempotency-Key",
                        "in": "header"
                    },
                    {
                        "description": "Execution request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tkrouter.TaskExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task executed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskExecSyncResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "408": {
                        "description": "Execution timeout",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Duplicate request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tools": {
            "get": {
                "description": "List tools with cursor pagination. Optionally filter by workflow usage.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "List tools",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"wf1\"",
                        "description": "Return only tools referenced by the given workflow",
                        "name": "workflow_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by tool ID prefix",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tools retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/toolrouter.ToolsListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/tools/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write tool YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "Export tools",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":3},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tools/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read tool YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "Import tools",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":2,\\\"skipped\\\":1,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tools/{tool_id}": {
            "get": {
                "description": "Retrieve a tool configuration by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "Get tool",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"http-client\"",
                        "description": "Tool ID",
                        "name": "tool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/toolrouter.ToolDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong ETag for the resource"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Tool not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a tool configuration when absent or update an existing one using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "Create or update tool",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"http-client\"",
                        "description": "Tool ID",
                        "name": "tool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"\\\"abc123\\\"\"",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Tool configuration payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/toolrouter.ToolDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong ETag for the resource"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "Tool created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/toolrouter.ToolDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong ETag for the resource"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the tool"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Tool not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Tool referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a tool configuration. Returns conflict when referenced.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tools"
                ],
                "summary": "Delete tool",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"http-client\"",
                        "description": "Tool ID",
                        "name": "tool_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"demo\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tool not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "409": {
                        "description": "Tool referenced",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "List all users in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication (admin required)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the specified email and role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication (admin required)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication (admin required)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a user's email or role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication (admin required)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/router.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "description": "List workflows with cursor pagination, optional prefix search, field selection, or expansion.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List workflows",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"staging\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Page size (max 500)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"djI6YWZ0ZXI6d29ya2Zsb3ctMDAwMQ==\"",
                        "description": "Opaque pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"data-\"",
                        "description": "Filter by workflow ID prefix",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated child collections to expand (tasks,agents,tools)",
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "workflows retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowsListResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Link": {
                                "type": "string",
                                "description": "RFC 8288 pagination links for next/prev"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cursor",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/workflows/export": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Write workflow YAML files for the active project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Export workflows",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"written\\\":2},\\\"message\\\":\\\"export completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Read workflow YAML files from the project directory.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Import workflows",
                "parameters": [
                    {
                        "enum": [
                            "seed_only",
                            "overwrite_conflicts"
                        ],
                        "type": "string",
                        "description": "seed_only|overwrite_conflicts",
                        "name": "strategy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"data\\\":{\\\"imported\\\":2,\\\"skipped\\\":0,\\\"overwritten\\\":0,\\\"strategy\\\":\\\"seed_only\\\"},\\\"message\\\":\\\"import completed\\\"}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}": {
            "get": {
                "description": "Retrieve a workflow configuration with optional field selection and expansion.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Get workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"staging\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated child collections to expand (tasks,agents,tools)",
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for concurrency control"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "put": {
                "description": "Create a workflow when absent or update an existing workflow using strong ETag concurrency.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Create or update workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"staging\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated child collections to expand (tasks,agents,tools)",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Strong ETag for optimistic concurrency",
                        "name": "If-Match",
                        "in": "header"
                    },
                    {
                        "description": "Workflow definition payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workflow.Config"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "workflow updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for the stored workflow"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "201": {
                        "description": "workflow created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowDTO"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "ETag": {
                                "type": "string",
                                "description": "Strong entity tag for the stored workflow"
                            },
                            "Location": {
                                "type": "string",
                                "description": "Relative URL for the created workflow"
                            },
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a workflow configuration using strong ETag concurrency.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Delete workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"staging\"",
                        "description": "Project override",
                        "name": "project",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "RateLimit-Limit": {
                                "type": "string",
                                "description": "Requests allowed in the current window"
                            },
                            "RateLimit-Remaining": {
                                "type": "string",
                                "description": "Remaining requests in the current window"
                            },
                            "RateLimit-Reset": {
                                "type": "string",
                                "description": "Seconds until the window resets"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "412": {
                        "description": "ETag mismatch",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/core.ProblemDocument"
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/agents": {
            "get": {
                "description": "Retrieve a list of all available agent configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List all agents",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agents retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "agents": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/agent.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/agents/{agent_id}": {
            "get": {
                "description": "Retrieve a specific agent configuration by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Get agent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"code-assistant\"",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/agent.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid agent ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Agent not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/executions": {
            "get": {
                "description": "Retrieve all executions for a specific workflow. Each execution includes a usage field containing aggregated LLM token counts grouped by provider and model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List executions by workflow ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow executions retrieved successfully. Each execution's usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "executions": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/wfrouter.WorkflowExecutionDTO"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "description": "Trigger the execution of a workflow with provided input data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Execute workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Workflow input data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Optional correlation ID for request tracing",
                        "name": "X-Correlation-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Workflow triggered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.ExecuteWorkflowResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Execution status URL"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/executions/sync": {
            "post": {
                "description": "Execute a workflow and wait for completion within the provided timeout. The response includes a workflow.usage field containing aggregated LLM token counts grouped by provider and model.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Execute workflow synchronously",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional correlation ID for request tracing",
                        "name": "X-Correlation-ID",
                        "in": "header"
                    },
                    {
                        "description": "Execution request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wfrouter.WorkflowSyncRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workflow execution completed. The data.workflow.usage field is an array of usage entries with prompt_tokens, completion_tokens, total_tokens, and optional reasoning_tokens, cached_prompt_tokens, input_audio_tokens, and output_audio_tokens per provider/model combination.",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/wfrouter.WorkflowSyncResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "408": {
                        "description": "Execution timeout",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "409": {
                        "description": "Duplicate request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Worker unavailable",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tasks": {
            "get": {
                "description": "Retrieve a list of all tasks within a specific workflow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List tasks for a workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tasks": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/tkrouter.TaskResponse"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Workflow not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tasks/{task_id}": {
            "get": {
                "description": "Retrieve a specific task configuration by its ID within a workflow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Get task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"data-processing\"",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"validate-input\"",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tkrouter.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid workflow or task ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tools": {
            "get": {
                "description": "Retrieve a list of all available tool configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "List all tools",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tools retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tools": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/tool.Config"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/workflows/{workflow_id}/tools/{tool_id}": {
            "get": {
                "description": "Retrieve a specific tool configuration by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workflows"
                ],
                "summary": "Get tool by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflow_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"format-code\"",
                        "description": "Tool ID",
                        "name": "tool_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tool retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/tool.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid tool ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Tool not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/router.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/router.ErrorInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "agent.ActionConfig": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "attachments": {
                    "description": "Attachments at action scope",
                    "type": "array",
                    "items": {}
                },
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "id": {
                    "description": "Unique identifier for the action within the agent's scope.\nUsed to invoke specific actions programmatically.\n\n- **Examples:** ` + "`" + `\"analyze-code\"` + "`" + `, ` + "`" + `\"generate-summary\"` + "`" + `, ` + "`" + `\"validate-data\"` + "`" + `",
                    "type": "string"
                },
                "input": {
                    "description": "JSON Schema defining the expected input parameters for this action.\nEnables validation and type checking of inputs before execution.\n\nIf ` + "`" + `nil` + "`" + `, the action accepts any input format without validation.\n\n**Schema format:** JSON Schema Draft 7",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "output": {
                    "description": "JSON Schema defining the expected output format from this action.\nUsed for validating agent responses and ensuring consistent output structure.\n\nIf ` + "`" + `nil` + "`" + `, no output validation is performed.\n\n**Schema format:** JSON Schema Draft 7",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "prompt": {
                    "description": "Detailed instructions for the agent when executing this action.\nShould clearly define the expected behavior, output format, and any constraints.\n\n**Best practices:**\n- Be specific about the desired outcome\n- Include examples if complex formatting is required\n- Define clear success criteria\n- Specify any limitations or boundaries",
                    "type": "string"
                },
                "with": {
                    "description": "Default parameters to provide to the action.\nThese are merged with runtime parameters, with runtime values taking precedence.\n\n**Use cases:**\n- Setting default configuration options\n- Providing constant context values\n- Pre-filling common parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "agent.Config": {
            "type": "object",
            "required": [
                "id",
                "instructions"
            ],
            "properties": {
                "actions": {
                    "description": "Structured actions the agent can perform with defined input/output schemas.\nActions provide type-safe interfaces for specific agent capabilities.\n\n**Example:**\n` + "`" + `` + "`" + `` + "`" + `yaml\nactions:\n  - id: \"review-code\"\n    prompt: |\n      Analyze code {{.input.code}} for quality and improvements\n    input:\n      type: \"object\"\n      properties:\n        code:\n          type: \"string\"\n          description: \"The code to review\"\n    output:\n      type: \"object\"\n      properties:\n        quality:\n          type: \"string\"\n          description: \"The quality of the code\"\n` + "`" + `` + "`" + `` + "`" + `\n\n$ref: inline:#action-configuration",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agent.ActionConfig"
                    }
                },
                "attachments": {
                    "description": "Attachments declared at the agent scope.",
                    "type": "array",
                    "items": {}
                },
                "cwd": {
                    "$ref": "#/definitions/core.PathCWD"
                },
                "env": {
                    "description": "Environment variables available during agent execution.\nUsed for configuration, secrets, and runtime settings.\n\n**Example:**\n` + "`" + `` + "`" + `` + "`" + `yaml\nenv:\n  API_KEY: \"{{.env.OPENAI_API_KEY}}\"\n  DEBUG_MODE: \"true\"\n` + "`" + `` + "`" + `` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvMap"
                        }
                    ]
                },
                "id": {
                    "description": "Unique identifier for the agent within the project scope.\nUsed for referencing the agent in workflows and other configurations.\n\n- **Examples:** ` + "`" + `\"code-assistant\"` + "`" + `, ` + "`" + `\"data-analyst\"` + "`" + `, ` + "`" + `\"customer-support\"` + "`" + `",
                    "type": "string"
                },
                "instructions": {
                    "description": "Provider configuration is now expressed through the polymorphic ` + "`" + `Model` + "`" + ` field.\nThe previous ` + "`" + `Config core.ProviderConfig` + "`" + ` field has been removed.\nSystem instructions that define the agent's personality, behavior, and constraints.\nThese instructions guide how the agent interprets tasks and generates responses.\n\n**Best practices:**\n- Be clear and specific about the agent's role\n- Define boundaries and ethical guidelines\n- Include domain-specific knowledge or constraints\n- Use markdown formatting for better structure",
                    "type": "string"
                },
                "knowledge": {
                    "description": "Knowledge declares knowledge bindings scoped to this agent.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.KnowledgeBinding"
                    }
                },
                "max_iterations": {
                    "description": "Maximum number of reasoning iterations the agent can perform.\nThe agent may self-correct and refine its response across multiple iterations\nto improve accuracy and address complex multi-step problems.\n\n**Default:** ` + "`" + `5` + "`" + ` iterations\n\n**Trade-offs:**\n- Higher values enable more thorough problem-solving and self-correction\n- Each iteration consumes additional tokens and increases response latency\n- Configure based on task complexity, accuracy requirements, and cost constraints",
                    "type": "integer"
                },
                "mcps": {
                    "description": "Model Context Protocol (MCP) server configurations.\nMCPs provide standardized interfaces for extending agent capabilities\nwith external services and data sources through protocol-based communication.\n\n**Common MCP integrations:**\n- Database connectors (PostgreSQL, Redis, MongoDB)\n- Search engines (Elasticsearch, Solr)\n- Knowledge bases (vector databases, documentation systems)\n- External APIs (REST, GraphQL, gRPC services)\n\nMCPs support both stdio and HTTP transport protocols.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "description": "Memory references enabling the agent to access persistent context.\nMemory provides stateful interactions across workflow steps and sessions.\n\n**Configuration format:**\n` + "`" + `` + "`" + `` + "`" + `yaml\nmemory:\n  - id: \"user_context\"           # Memory resource ID\n    key: \"user:{{.user_id}}\"     # Dynamic key with template\n    mode: \"read-write\"           # Access mode (default: \"read-write\")\n` + "`" + `` + "`" + `` + "`" + `\n\n**Access modes:**\n- ` + "`" + `\"read-write\"` + "`" + `: Full access to read and modify memory\n- ` + "`" + `\"read-only\"` + "`" + `: Can only read existing memory entries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "model": {
                    "description": "Model selects which LLM model to use.\nSupports two forms:\n  - string: a model ID to be resolved via the ResourceStore (e.g. \"openai-gpt-4o-mini\")\n  - object: an inline core.ProviderConfig with provider/model/params\n\nDuring compile/link, string refs are resolved and merged with inline\nfields following project precedence rules. Defaults are filled from the\nproject when neither ref nor inline identity is provided.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/agent.Model"
                        }
                    ]
                },
                "resource": {
                    "description": "Resource identifier for the autoloader system (must be ` + "`" + `\"agent\"` + "`" + `).\nThis field enables automatic discovery and registration of agent configurations.",
                    "type": "string"
                },
                "tools": {
                    "description": "Tools available to the agent for extending its capabilities.\nWhen tools are defined, the agent automatically has ` + "`" + `toolChoice` + "`" + ` set to ` + "`" + `\"auto\"` + "`" + `,\nenabling autonomous tool selection and invocation during task execution.\n\n**Tool types supported:**\n- File system operations (read, write, list)\n- API integrations (HTTP requests, webhooks)\n- Data processing utilities (parsing, transformation)\n- Custom business logic (TypeScript/JavaScript execution)\n\nTools are referenced by ID and can be shared across multiple agents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "with": {
                    "description": "Default input parameters passed to the agent on every invocation.\nThese values are merged with runtime inputs, with runtime values taking precedence.\n\n**Use cases:**\n- Setting default configuration values\n- Providing constant context or settings\n- Injecting workflow-level parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "agent.Model": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config holds an inline provider configuration when specified as a mapping.\nWhen Ref is set, Config may be merged with the resolved model during linking.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ProviderConfig"
                        }
                    ]
                }
            }
        },
        "agentrouter.AgentActionDTO": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "prompt": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "agentrouter.AgentDTO": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agentrouter.AgentActionDTO"
                    }
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "model": {
                    "$ref": "#/definitions/agentrouter.AgentModelDTO"
                },
                "resource": {
                    "type": "string"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "agentrouter.AgentExecAsyncResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "exec_url": {
                    "type": "string",
                    "example": "https://api.compozy.dev/api/v0/executions/agents/2Z4PVTL6K27XVT4A3NPKMDD5BG"
                }
            }
        },
        "agentrouter.AgentExecRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action selects a predefined agent action to execute.",
                    "type": "string"
                },
                "prompt": {
                    "description": "Prompt supplies an ad-hoc prompt for the agent when no action is provided.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout in seconds for synchronous execution.",
                    "type": "integer"
                },
                "with": {
                    "description": "With passes structured input parameters to the agent execution.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "agentrouter.AgentExecSyncResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "usage": {
                    "$ref": "#/definitions/router.UsageSummary"
                }
            }
        },
        "agentrouter.AgentListItem": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agentrouter.AgentActionDTO"
                    }
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "id": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "model": {
                    "$ref": "#/definitions/agentrouter.AgentModelDTO"
                },
                "resource": {
                    "type": "string"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "agentrouter.AgentModelDTO": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/core.ProviderConfig"
                },
                "ref": {
                    "type": "string"
                }
            }
        },
        "agentrouter.AgentsListResponse": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agentrouter.AgentListItem"
                    }
                },
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                }
            }
        },
        "agentrouter.ExecutionStatusDTO": {
            "type": "object",
            "properties": {
                "component": {
                    "$ref": "#/definitions/core.ComponentType"
                },
                "created_at": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "exec_id": {
                    "type": "string"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "task_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/router.UsageSummary"
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "apitypes.UsageEntry": {
            "type": "object",
            "properties": {
                "agent_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cached_prompt_tokens": {
                    "type": "integer"
                },
                "captured_at": {
                    "type": "string"
                },
                "completion_tokens": {
                    "type": "integer"
                },
                "input_audio_tokens": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "output_audio_tokens": {
                    "type": "integer"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "reasoning_tokens": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "total_tokens": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "core.Author": {
            "type": "object",
            "properties": {
                "contributors": {
                    "description": "Additional contributors who helped develop the project.\n\nUse this to acknowledge team members, collaborators, or external contributors.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Contributor"
                    }
                },
                "email": {
                    "description": "Email contact for project-related communication.\n\nUse team emails for shared ownership: ` + "`" + `\"ai-team@company.com\"` + "`" + `",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the author or team responsible for the project.\n\nExamples: ` + "`" + `\"Jane Smith\"` + "`" + `, ` + "`" + `\"AI Platform Team\"` + "`" + `, ` + "`" + `\"Data Science Division\"` + "`" + `",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization or company affiliation.\n\nExamples: ` + "`" + `\"ACME Corporation\"` + "`" + `, ` + "`" + `\"AI Research Lab\"` + "`" + `, ` + "`" + `\"Engineering Division\"` + "`" + `",
                    "type": "string"
                },
                "url": {
                    "description": "URL to author's profile, repository, or team page.\n\nExamples: ` + "`" + `\"https://github.com/username\"` + "`" + `, ` + "`" + `\"https://company.com/team/ai\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "core.CircuitBreakerConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "max_failures": {
                    "type": "integer"
                },
                "reset_timeout": {
                    "description": "e.g., \"30s\"",
                    "type": "string"
                },
                "timeout": {
                    "description": "e.g., \"100ms\"",
                    "type": "string"
                }
            }
        },
        "core.ComponentType": {
            "type": "string",
            "enum": [
                "workflow",
                "task",
                "agent",
                "tool",
                "log"
            ],
            "x-enum-varnames": [
                "ComponentWorkflow",
                "ComponentTask",
                "ComponentAgent",
                "ComponentTool",
                "ComponentLog"
            ]
        },
        "core.Contributor": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address for contributor contact.",
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the contributor.",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization or team the contributor belongs to.",
                    "type": "string"
                },
                "url": {
                    "description": "URL to contributor's profile or portfolio.\n\nExamples: ` + "`" + `\"https://github.com/username\"` + "`" + `, ` + "`" + `\"https://linkedin.com/in/name\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "core.EnvMap": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "core.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "core.ErrorTransition": {
            "type": "object",
            "properties": {
                "next": {
                    "description": "ID of the error handler task\n\n- **Example**: \"handle-error\", \"retry-with-fallback\"",
                    "type": "string"
                },
                "with": {
                    "description": "Error context passed to the handler\nIncludes error details: { \"error\": \"{{ .error }}\", \"attempt\": \"{{ .retryCount }}\" }",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "core.FlushingStrategyConfig": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "summarize_oldest_percent": {
                    "description": "SummarizeOldestPercent is the percentage of the oldest messages to summarize. Only for hybrid_summary.\nE.g., 0.3 means summarize the oldest 30% of messages.",
                    "type": "number",
                    "maximum": 1
                },
                "summarize_threshold": {
                    "description": "SummarizeThreshold is the percentage of MaxTokens/MaxMessages at which summarization should trigger.\nE.g., 0.8 means trigger summarization when memory is 80% full. Only for hybrid_summary.",
                    "type": "number",
                    "maximum": 1
                },
                "summary_tokens": {
                    "description": "SummaryTokens is the target token count for generated summaries. Only for hybrid_summary.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is the kind of flushing strategy to apply (e.g., hybrid_summary).",
                    "enum": [
                        "hybrid_summary",
                        "simple_fifo",
                        "lru",
                        "token_aware_lru"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.FlushingStrategyType"
                        }
                    ]
                }
            }
        },
        "core.FlushingStrategyType": {
            "type": "string",
            "enum": [
                "token_count",
                "message_count",
                "hybrid_summary",
                "simple_fifo",
                "time_based",
                "fifo",
                "lru",
                "token_aware_lru",
                "simple_fifo"
            ],
            "x-enum-comments": {
                "TokenAwareLRUFlushing": "#nosec G101"
            },
            "x-enum-descriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "#nosec G101",
                ""
            ],
            "x-enum-varnames": [
                "TokenCountFlushing",
                "MessageCountFlushing",
                "HybridSummaryFlushing",
                "SimpleFIFOFlushing",
                "TimeBased",
                "FIFOFlushing",
                "LRUFlushing",
                "TokenAwareLRUFlushing",
                "DefaultFlushingStrategy"
            ]
        },
        "core.GlobalOpts": {
            "type": "object",
            "properties": {
                "heartbeat_timeout": {
                    "description": "Interval for task heartbeat signals\nUsed for long-running tasks to indicate progress\n\n- **Example**: \"10s\", \"30s\", \"1m\"",
                    "type": "string"
                },
                "on_error": {
                    "description": "Error handler configuration\nDefines what happens when a task fails after all retries",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ErrorTransition"
                        }
                    ]
                },
                "retry_policy": {
                    "description": "Retry configuration for transient failures\nAutomatically retries failed tasks with exponential backoff",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.RetryPolicyConfig"
                        }
                    ]
                },
                "schedule_to_close_timeout": {
                    "description": "Total timeout from scheduling to completion\nDefault: \"6m\"\n\n- **Example**: \"1m\", \"15m\", \"2h\"",
                    "type": "string"
                },
                "schedule_to_start_timeout": {
                    "description": "Maximum time to wait for a task to start executing\nDefault: \"1m\"\n\n- **Example**: \"30s\", \"5m\", \"1h\"",
                    "type": "string"
                },
                "start_to_close_timeout": {
                    "description": "Maximum time for task execution once started\nDefault: \"5m\"\n\n- **Example**: \"30s\", \"10m\", \"1h\"",
                    "type": "string"
                }
            }
        },
        "core.Input": {
            "type": "object",
            "additionalProperties": {}
        },
        "core.KnowledgeBinding": {
            "type": "object",
            "properties": {
                "fallback": {
                    "type": "string"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "inject_as": {
                    "type": "string"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "min_score": {
                    "type": "number"
                },
                "top_k": {
                    "type": "integer"
                }
            }
        },
        "core.LockConfig": {
            "type": "object",
            "properties": {
                "append_ttl": {
                    "description": "AppendTTL is the lock timeout for append operations (default: \"30s\")",
                    "type": "string"
                },
                "clear_ttl": {
                    "description": "ClearTTL is the lock timeout for clear operations (default: \"10s\")",
                    "type": "string"
                },
                "flush_ttl": {
                    "description": "FlushTTL is the lock timeout for flush operations (default: \"5m\")",
                    "type": "string"
                }
            }
        },
        "core.MemoryReference": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "description": "Key is a template string that resolves to the actual memory instance key.\ne.g., \"support-{{ .workflow.input.conversationId }}\"",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode defines access permissions (e.g., \"read-write\", \"read-only\").",
                    "type": "string",
                    "enum": [
                        "read-write",
                        "read-only"
                    ]
                }
            }
        },
        "core.Output": {
            "type": "object",
            "additionalProperties": {}
        },
        "core.PathCWD": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path holds the absolute working directory.",
                    "type": "string"
                }
            }
        },
        "core.PersistenceConfig": {
            "type": "object",
            "required": [
                "ttl",
                "type"
            ],
            "properties": {
                "circuit_breaker": {
                    "description": "CircuitBreaker configures resilience for persistence operations.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.CircuitBreakerConfig"
                        }
                    ]
                },
                "ttl": {
                    "description": "TTL is the time-to-live for memory instances in this resource.\nParsed as a duration string (e.g., \"24h\", \"30m\").",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "redis",
                        "in_memory"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PersistenceType"
                        }
                    ]
                }
            }
        },
        "core.PersistenceType": {
            "type": "string",
            "enum": [
                "redis",
                "in_memory"
            ],
            "x-enum-varnames": [
                "RedisPersistence",
                "InMemoryPersistence"
            ]
        },
        "core.PrivacyPolicyConfig": {
            "type": "object",
            "properties": {
                "default_redaction_string": {
                    "description": "DefaultRedactionString is the string to replace redacted content with. Defaults to \"[REDACTED]\".",
                    "type": "string"
                },
                "non_persistable_message_types": {
                    "description": "NonPersistableMessageTypes is a list of message types/roles that should not be persisted.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "redact_patterns": {
                    "description": "RedactPatterns is a list of regex patterns to apply for redacting content.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "core.ProblemDocument": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "invalid_cursor"
                },
                "details": {
                    "type": "string",
                    "example": "Invalid cursor parameter"
                },
                "error": {
                    "type": "string",
                    "example": "Bad Request"
                },
                "instance": {
                    "type": "string",
                    "example": "/api/v0/workflows"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "type": {
                    "type": "string",
                    "example": "about:blank"
                }
            }
        },
        "core.PromptParams": {
            "type": "object",
            "properties": {
                "candidate_count": {
                    "description": "CandidateCount specifies the number of response candidates to generate.\nSimilar to N but used by Google AI models.\n- **Range**: 1 to provider-specific maximum\n- **Provider Support**: Google AI (Gemini)",
                    "type": "integer"
                },
                "frequency_penalty": {
                    "description": "FrequencyPenalty penalizes tokens based on their frequency in the text so far.\nPositive values reduce repetition, negative values encourage it.\n- **Range**: -2.0 to 2.0\n- **Recommended**: 0.0 (no penalty) to 0.5 (moderate penalty)\n- **Provider Support**: OpenAI, Groq",
                    "type": "number"
                },
                "max_length": {
                    "description": "MaxLength provides an alternative way to specify maximum response length.\nTypically used by providers that distinguish between length and token limits.\n- **Range**: MinLength to provider-specific maximum\n- **Provider Support**: Primarily local models and some API providers",
                    "type": "integer"
                },
                "max_tokens": {
                    "description": "MaxTokens limits the maximum number of tokens in the generated response.\nThis parameter is crucial for cost control and response time management.\n- **Range**: 1 to model-specific maximum (e.g., 8192 for GPT-4)\n- **Default**: Provider-specific default (typically 1000-2000)",
                    "type": "integer"
                },
                "metadata": {
                    "description": "Metadata contains backend-specific parameters not covered by standard fields.\nUse this for provider-specific features or experimental parameters.\n- **Example**: Custom headers, request tracking, A/B test variants\n- **Provider Support**: Varies by provider",
                    "type": "object",
                    "additionalProperties": {}
                },
                "min_length": {
                    "description": "MinLength specifies the minimum number of tokens that must be generated.\nPrevents the model from generating responses that are too short.\n- **Range**: 1 to MaxTokens\n- **Provider Support**: Limited; primarily local models",
                    "type": "integer"
                },
                "n": {
                    "description": "N specifies how many completion choices to generate for each prompt.\nUseful for generating multiple alternatives and selecting the best one.\n- **Range**: 1 to provider-specific maximum (typically 1-10)\n- **Default**: 1\n- **Provider Support**: OpenAI",
                    "type": "integer"
                },
                "presence_penalty": {
                    "description": "PresencePenalty penalizes tokens that have already appeared in the text.\nPositive values encourage the model to talk about new topics.\n- **Range**: -2.0 to 2.0\n- **Recommended**: 0.0 (no penalty) to 0.5 (moderate penalty)\n- **Provider Support**: OpenAI, Groq",
                    "type": "number"
                },
                "repetition_penalty": {
                    "description": "RepetitionPenalty reduces the likelihood of repeating the same tokens.\nValues \u003e 1.0 penalize repetition, values \u003c 1.0 encourage it.\n- **Range**: 0.1 to 2.0\n- **Recommended**: 1.0 (no penalty) to 1.2 (moderate penalty)\n- **Provider Support**: Primarily local models (Ollama, etc.)",
                    "type": "number"
                },
                "seed": {
                    "description": "Seed provides a random seed for reproducible outputs.\nWhen set, the same input with the same parameters will generate identical responses.\n- **Use Cases**: Testing, debugging, demonstration, A/B testing\n\u003e **Note:**: Not all providers support seeding; OpenAI and some others do",
                    "type": "integer"
                },
                "stop_words": {
                    "description": "StopWords defines a list of strings that will halt text generation when encountered.\nUseful for creating structured outputs or preventing unwanted content patterns.\n\n- **Example**: ` + "`" + `[\"END\", \"STOP\", \"\\n\\n---\"]` + "`" + ` for section-based content\n\u003e **Note:**: Not all providers support stop words; check provider documentation",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "temperature": {
                    "description": "Temperature controls the randomness of the generated text.\nLower values produce more deterministic, focused responses.\nHigher values increase creativity and variation but may reduce coherence.\n- **Range**: 0.0 (deterministic) to 1.0 (maximum randomness)\n- **Recommended**: 0.1-0.3 for factual tasks, 0.7-0.9 for creative tasks",
                    "type": "number"
                },
                "top_k": {
                    "description": "TopK limits the number of highest probability tokens considered during sampling.\nLower values focus on the most likely tokens, higher values allow more variety.\n- **Range**: 1 to vocabulary size (typically 1-100)\n- **Provider Support**: Primarily Google models and some local models",
                    "type": "integer"
                },
                "top_p": {
                    "description": "TopP (nucleus sampling) considers only tokens with cumulative probability up to this value.\nDynamically adjusts the vocabulary size based on probability distribution.\n- **Range**: 0.0 to 1.0\n- **Recommended**: 0.9 for balanced outputs, 0.95 for more variety",
                    "type": "number"
                }
            }
        },
        "core.ProviderConfig": {
            "type": "object",
            "properties": {
                "api_key": {
                    "description": "APIKey contains the authentication key for the AI provider.\n\n- **Security**: Use template references to environment variables.\n- **Examples**: ` + "`" + `\"{{ .env.OPENAI_API_KEY }}\"` + "`" + `, ` + "`" + `\"{{ .secrets.ANTHROPIC_KEY }}\"` + "`" + `\n\u003e **Note:**: Required for most cloud providers, optional for local providers",
                    "type": "string"
                },
                "api_url": {
                    "description": "APIURL specifies a custom API endpoint for the provider.\n**Use Cases**:\n  - Local model hosting (Ollama, OpenAI-compatible servers)\n  - Enterprise API gateways\n  - Regional API endpoints\n  - Custom proxy servers\n\n**Examples**: ` + "`" + `\"http://localhost:11434\"` + "`" + `, ` + "`" + `\"https://api.openai.com/v1\"` + "`" + `",
                    "type": "string"
                },
                "context_window": {
                    "description": "ContextWindow optionally overrides the provider's default context window size.\nWhen \u003e 0, this value replaces the provider's default ContextWindowTokens capability.\nUseful for providers like OpenRouter that support multiple models with varying limits.\n- **Example**: 200000 for Claude 3.5 Sonnet via OpenRouter\n- **Default**: Uses provider's default when not specified or \u003c= 0",
                    "type": "integer",
                    "minimum": 0
                },
                "default": {
                    "description": "Default indicates that this model should be used as the fallback when no explicit\nmodel configuration is provided at the task or agent level.\n\n**Behavior**:\n  - Only one model per project can be marked as default\n  - When set to true, this model will be used for tasks/agents without explicit model config\n  - Validation ensures at most one default model per project\n\n**Example**:\n` + "`" + `` + "`" + `` + "`" + `yaml\nmodels:\n  - provider: openai\n    model: gpt-4\n    default: true  # This will be used by default\n` + "`" + `` + "`" + `` + "`" + `",
                    "type": "boolean"
                },
                "max_tool_iterations": {
                    "description": "MaxToolIterations optionally caps the maximum number of tool-call iterations\nduring a single LLM request when tools are available.\nWhen \u003e 0, overrides the global default for this model; 0 uses the global default.",
                    "type": "integer",
                    "minimum": 0
                },
                "model": {
                    "description": "Model defines the specific model identifier to use with the provider.\nModel names are provider-specific and determine capabilities and pricing.\n\n- **Examples**:\n  - OpenAI: ` + "`" + `\"gpt-4-turbo\"` + "`" + `, ` + "`" + `\"gpt-3.5-turbo\"` + "`" + `\n  - Anthropic: ` + "`" + `\"claude-4-opus\"` + "`" + `, ` + "`" + `\"claude-3-5-haiku-latest\"` + "`" + `\n  - Google: ` + "`" + `\"gemini-pro\"` + "`" + `, ` + "`" + `\"gemini-pro-vision\"` + "`" + `\n  - Ollama: ` + "`" + `\"llama2:13b\"` + "`" + `, ` + "`" + `\"mistral:7b\"` + "`" + `",
                    "type": "string"
                },
                "organization": {
                    "description": "Organization specifies the organization ID for providers that support it.\n- **Primary Use**: OpenAI organization management for billing and access control\n\n- **Example**: ` + "`" + `\"org-123456789abcdef\"` + "`" + `\n\u003e **Note:**: Optional for most providers",
                    "type": "string"
                },
                "params": {
                    "description": "Params contains the generation parameters that control LLM behavior.\nThese parameters are applied to all requests using this provider configuration.\nCan be overridden at the task or action level for specific requirements.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PromptParams"
                        }
                    ]
                },
                "provider": {
                    "description": "Provider specifies which AI service to use for LLM operations.\nMust match one of the supported ProviderName constants.\n\n- **Examples**: ` + "`" + `\"openai\"` + "`" + `, ` + "`" + `\"anthropic\"` + "`" + `, ` + "`" + `\"google\"` + "`" + `, ` + "`" + `\"ollama\"` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ProviderName"
                        }
                    ]
                },
                "rate_limit": {
                    "description": "RateLimit overrides concurrency limits and queue size for this provider.\nWhen omitted the orchestrator applies the global defaults.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ProviderRateLimitConfig"
                        }
                    ]
                }
            }
        },
        "core.ProviderName": {
            "type": "string",
            "enum": [
                "openai",
                "groq",
                "anthropic",
                "google",
                "ollama",
                "deepseek",
                "xai",
                "cerebras",
                "openrouter",
                "mock"
            ],
            "x-enum-comments": {
                "ProviderAnthropic": "Anthropic Claude models",
                "ProviderCerebras": "Cerebras fast inference platform",
                "ProviderDeepSeek": "DeepSeek AI models",
                "ProviderGoogle": "Google Gemini models",
                "ProviderGroq": "Groq fast inference platform",
                "ProviderMock": "Mock provider for testing",
                "ProviderOllama": "Ollama local model hosting",
                "ProviderOpenAI": "OpenAI GPT models (GPT-4, GPT-3.5, etc.)",
                "ProviderOpenRouter": "OpenRouter multi-model gateway",
                "ProviderXAI": "xAI Grok models"
            },
            "x-enum-descriptions": [
                "OpenAI GPT models (GPT-4, GPT-3.5, etc.)",
                "Groq fast inference platform",
                "Anthropic Claude models",
                "Google Gemini models",
                "Ollama local model hosting",
                "DeepSeek AI models",
                "xAI Grok models",
                "Cerebras fast inference platform",
                "OpenRouter multi-model gateway",
                "Mock provider for testing"
            ],
            "x-enum-varnames": [
                "ProviderOpenAI",
                "ProviderGroq",
                "ProviderAnthropic",
                "ProviderGoogle",
                "ProviderOllama",
                "ProviderDeepSeek",
                "ProviderXAI",
                "ProviderCerebras",
                "ProviderOpenRouter",
                "ProviderMock"
            ]
        },
        "core.ProviderRateLimitConfig": {
            "type": "object",
            "properties": {
                "concurrency": {
                    "type": "integer",
                    "minimum": 0
                },
                "queue_size": {
                    "type": "integer",
                    "minimum": 0
                },
                "release_slot_before_token_wait": {
                    "description": "ReleaseSlotBeforeTokenWait releases concurrency slots before token waits when true; nil inherits defaults.",
                    "type": "boolean"
                },
                "request_burst": {
                    "type": "integer",
                    "minimum": 0
                },
                "requests_per_minute": {
                    "type": "integer",
                    "minimum": 0
                },
                "token_burst": {
                    "type": "integer",
                    "minimum": 0
                },
                "tokens_per_minute": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "core.RetryPolicyConfig": {
            "type": "object",
            "properties": {
                "backoff_coefficient": {
                    "description": "Multiplier for exponential backoff\n- **Default:** ` + "`" + `2.0` + "`" + ` (doubles each time)\n- **Example:** ` + "`" + `1.5` + "`" + `, ` + "`" + `2.0` + "`" + `, ` + "`" + `3.0` + "`" + `",
                    "type": "number"
                },
                "initial_interval": {
                    "description": "Initial delay before first retry\n- **Default:** ` + "`" + `\"1s\"` + "`" + `\n- **Example:** ` + "`" + `\"500ms\"` + "`" + `, ` + "`" + `\"2s\"` + "`" + `, ` + "`" + `\"1m\"` + "`" + `",
                    "type": "string"
                },
                "maximum_attempts": {
                    "description": "Maximum retry attempts\n- **Default:** ` + "`" + `3` + "`" + `\n- **Example:** ` + "`" + `5` + "`" + ` for critical operations",
                    "type": "integer"
                },
                "maximum_interval": {
                    "description": "Maximum delay between retries\n- **Default:** ` + "`" + `\"1m\"` + "`" + `\n- **Example:** ` + "`" + `\"30s\"` + "`" + `, ` + "`" + `\"5m\"` + "`" + `, ` + "`" + `\"1h\"` + "`" + `",
                    "type": "string"
                },
                "non_retryable_error_types": {
                    "description": "Error types that should not trigger retries\n- **Example:** ` + "`" + `[\"ValidationError\", \"AuthenticationError\"]` + "`" + `",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "core.StatusType": {
            "type": "string",
            "enum": [
                "PENDING",
                "RUNNING",
                "SUCCESS",
                "FAILED",
                "TIMED_OUT",
                "CANCELED",
                "WAITING",
                "PAUSED"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusRunning",
                "StatusSuccess",
                "StatusFailed",
                "StatusTimedOut",
                "StatusCanceled",
                "StatusWaiting",
                "StatusPaused"
            ]
        },
        "core.SuccessTransition": {
            "type": "object",
            "properties": {
                "next": {
                    "description": "ID of the next task to execute\n- **Example:** ` + "`" + `\"process-results\"` + "`" + `, ` + "`" + `\"send-notification\"` + "`" + `",
                    "type": "string"
                },
                "with": {
                    "description": "Input parameters to pass to the next task\n- **Supports:** Template expressions like ` + "`" + `{ \"data\": \"{{ .output.result }}\" }` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "core.TokenAllocation": {
            "type": "object",
            "properties": {
                "long_term": {
                    "description": "LongTerm is the percentage of tokens allocated for summarized or older important context.",
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "short_term": {
                    "description": "ShortTerm is the percentage of tokens allocated for recent messages.",
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "system": {
                    "description": "System is the percentage of tokens reserved for system prompts or critical instructions.",
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "user_defined": {
                    "description": "UserDefined is a map for additional custom allocations if needed.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "float64"
                    }
                }
            }
        },
        "core.TokenProviderConfig": {
            "type": "object",
            "properties": {
                "api_key": {
                    "description": "API key for real-time counting (can be env var reference like ${OPENAI_API_KEY})",
                    "type": "string"
                },
                "api_key_env": {
                    "description": "Environment variable name containing the API key",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Optional custom endpoint",
                    "type": "string"
                },
                "fallback": {
                    "description": "Fallback strategy",
                    "type": "string"
                },
                "model": {
                    "description": "Model name",
                    "type": "string"
                },
                "provider": {
                    "description": "\"openai\", \"anthropic\", etc.",
                    "type": "string"
                },
                "settings": {
                    "description": "Provider-specific settings",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "core.Type": {
            "type": "string",
            "enum": [
                "token_based",
                "message_count_based",
                "buffer"
            ],
            "x-enum-varnames": [
                "TokenBasedMemory",
                "MessageCountBasedMemory",
                "BufferMemory"
            ]
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "httpdto.PageInfoDTO": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 50
                },
                "next_cursor": {
                    "type": "string",
                    "example": "v2:after:tool-001"
                },
                "prev_cursor": {
                    "type": "string",
                    "example": "v2:before:tool-000"
                },
                "total": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "knowledge.BaseConfig": {
            "type": "object",
            "properties": {
                "chunking": {
                    "$ref": "#/definitions/knowledge.ChunkingConfig"
                },
                "description": {
                    "type": "string"
                },
                "embedder": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ingest": {
                    "$ref": "#/definitions/knowledge.IngestMode"
                },
                "metadata": {
                    "$ref": "#/definitions/knowledge.MetadataConfig"
                },
                "preprocess": {
                    "$ref": "#/definitions/knowledge.PreprocessConfig"
                },
                "retrieval": {
                    "$ref": "#/definitions/knowledge.RetrievalConfig"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/knowledge.SourceConfig"
                    }
                },
                "vector_db": {
                    "type": "string"
                }
            }
        },
        "knowledge.ChunkStrategy": {
            "type": "string",
            "enum": [
                "recursive_text_splitter"
            ],
            "x-enum-varnames": [
                "ChunkStrategyRecursiveTextSplitter"
            ]
        },
        "knowledge.ChunkingConfig": {
            "type": "object",
            "properties": {
                "overlap": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "strategy": {
                    "$ref": "#/definitions/knowledge.ChunkStrategy"
                }
            }
        },
        "knowledge.IngestMode": {
            "type": "string",
            "enum": [
                "manual",
                "on_start"
            ],
            "x-enum-varnames": [
                "IngestManual",
                "IngestOnStart"
            ]
        },
        "knowledge.MetadataConfig": {
            "type": "object",
            "properties": {
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "knowledge.PreprocessConfig": {
            "type": "object",
            "properties": {
                "dedupe": {
                    "type": "boolean"
                },
                "remove_html": {
                    "type": "boolean"
                }
            }
        },
        "knowledge.RetrievalConfig": {
            "type": "object",
            "properties": {
                "fallback": {
                    "type": "string"
                },
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "inject_as": {
                    "type": "string"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "min_results": {
                    "type": "integer"
                },
                "min_score": {
                    "type": "number"
                },
                "tool_fallback": {
                    "$ref": "#/definitions/knowledge.ToolFallbackMode"
                },
                "top_k": {
                    "type": "integer"
                }
            }
        },
        "knowledge.SourceConfig": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "prefix": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/knowledge.SourceType"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "video_id": {
                    "type": "string"
                }
            }
        },
        "knowledge.SourceType": {
            "type": "string",
            "enum": [
                "url",
                "markdown_glob"
            ],
            "x-enum-varnames": [
                "SourceTypeURL",
                "SourceTypeMarkdownGlob"
            ]
        },
        "knowledge.ToolFallbackMode": {
            "type": "string",
            "enum": [
                "never",
                "escalate",
                "auto"
            ],
            "x-enum-varnames": [
                "ToolFallbackNever",
                "ToolFallbackEscalate",
                "ToolFallbackAuto"
            ]
        },
        "knowledgerouter.KnowledgeBaseListResponse": {
            "type": "object",
            "properties": {
                "knowledge_bases": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                }
            }
        },
        "knowledgerouter.KnowledgeBaseResponse": {
            "type": "object",
            "properties": {
                "knowledge_base": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "knowledgerouter.KnowledgeIngestRequest": {
            "type": "object",
            "properties": {
                "strategy": {
                    "type": "string",
                    "example": "replace"
                }
            }
        },
        "knowledgerouter.KnowledgeIngestResponse": {
            "type": "object",
            "properties": {
                "binding_id": {
                    "type": "string",
                    "example": "binding-123"
                },
                "chunks": {
                    "type": "integer",
                    "example": 16
                },
                "documents": {
                    "type": "integer",
                    "example": 2
                },
                "knowledge_base_id": {
                    "type": "string",
                    "example": "support"
                },
                "persisted": {
                    "type": "integer",
                    "example": 16
                }
            }
        },
        "knowledgerouter.KnowledgeMatch": {
            "type": "object",
            "properties": {
                "binding_id": {
                    "type": "string",
                    "example": "binding-123"
                },
                "content": {
                    "type": "string",
                    "example": "Reset your password by visiting the account settings page."
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "score": {
                    "type": "number",
                    "example": 0.83
                },
                "token_estimate": {
                    "type": "integer",
                    "example": 120
                }
            }
        },
        "knowledgerouter.KnowledgeQueryRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "min_score": {
                    "type": "number",
                    "example": 0.4
                },
                "query": {
                    "type": "string",
                    "example": "How do I reset my password?"
                },
                "top_k": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "knowledgerouter.KnowledgeQueryResponse": {
            "type": "object",
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/knowledgerouter.KnowledgeMatch"
                    }
                }
            }
        },
        "mcp.Config": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Args supplies additional arguments passed to the command when spawning local MCP processes.\n\nOnly used when ` + "`" + `command` + "`" + ` is provided (stdio transport). Ignored when ` + "`" + `url` + "`" + ` is configured.\nRuntime validation enforces that ` + "`" + `command` + "`" + ` and ` + "`" + `url` + "`" + ` are mutually exclusive.\nUse this to provide flags or subcommands while keeping Command focused on the executable.\nExample:\ncommand: \"uvx\"\nargs: [\"mcp-server-fetch\", \"--port\", \"9000\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Command is the **executable command** to spawn a local MCP server process.\n\nUsed for stdio transport to run MCP servers as child processes.\nSupports both direct executables and complex commands with arguments.\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\n# Simple executable\ncommand: \"mcp-server-filesystem\"\n\n# Command with arguments\ncommand: \"python /app/mcp_server.py --mode production\"\n\n# Docker container\ncommand: \"docker run --rm -i mcp/postgres:latest\"\n` + "`" + `` + "`" + `` + "`" + `\n\n**Security Note**: Commands are parsed using shell lexing for safety.\nAvoid user-provided input in commands.",
                    "type": "string"
                },
                "env": {
                    "description": "Env contains **environment variables** to pass to the MCP server process.\n\nOnly used when ` + "`" + `command` + "`" + ` is specified for spawning local processes.\nUseful for passing configuration, secrets, or runtime parameters.\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\nenv:\n  DATABASE_URL: \"postgres://user:pass@localhost/db\"\n  API_KEY: \"{{ .env.GITHUB_TOKEN }}\"\n  LOG_LEVEL: \"debug\"\n  WORKSPACE_DIR: \"/data/workspace\"\n` + "`" + `` + "`" + `` + "`" + `\n\n**Template Support**: Values can use Go template syntax to reference\nenvironment variables from the host system.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "description": "Headers contains HTTP headers to include when connecting to remote MCP servers (SSE/HTTP).\nUseful for passing Authorization tokens, custom auth headers, or version negotiation.\nExample:\nheaders:\n  Authorization: \"Bearer {{ .env.GITHUB_MCP_OAUTH_TOKEN }}\"",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "description": "ID is the **unique identifier** for this MCP server configuration.\n\nThis identifier is used throughout the system to reference this specific MCP server.\nChoose descriptive IDs that reflect the server's purpose.\n\n- **Examples**:\n- ` + "`" + `filesystem` + "`" + ` - for file system operations\n- ` + "`" + `postgres-db` + "`" + ` - for PostgreSQL database access\n- ` + "`" + `github-api` + "`" + ` - for GitHub integration\n- ` + "`" + `python-runtime` + "`" + ` - for Python code execution",
                    "type": "string"
                },
                "max_sessions": {
                    "description": "MaxSessions defines the **maximum number of concurrent sessions** allowed.\n\nHelps manage resource usage and prevent server overload.\nEach agent connection typically creates one session.\n\n**Values**:\n- ` + "`" + `0` + "`" + ` or negative: Unlimited sessions (default)\n- Positive number: Maximum concurrent sessions\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\nmax_sessions: 10  # Allow up to 10 concurrent connections\nmax_sessions: 1   # Single session only (useful for stateful servers)\nmax_sessions: 0   # Unlimited sessions\n` + "`" + `` + "`" + `` + "`" + `",
                    "type": "integer"
                },
                "proto": {
                    "description": "Proto specifies the **MCP protocol version** to use.\n\nDifferent protocol versions may support different features, message formats,\nor capabilities. Always use the version compatible with your MCP server.\n\n**Format**: ` + "`" + `YYYY-MM-DD` + "`" + ` (e.g., \"2025-03-26\")\n\n**Default**: ` + "`" + `DefaultProtocolVersion` + "`" + ` (\"2025-03-26\")\n\n**Version History**:\n- ` + "`" + `2025-03-26` + "`" + ` - Latest version with streaming support\n- ` + "`" + `2024-12-01` + "`" + ` - Initial protocol release",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource reference for the MCP server (optional)\n\nIf not specified, defaults to the value of ID.\nUsed for resource identification and referencing in Compozy's resource system.",
                    "type": "string"
                },
                "start_timeout": {
                    "description": "StartTimeout is the **maximum time to wait** for the MCP server to start.\n\nOnly applicable when using ` + "`" + `command` + "`" + ` to spawn local processes.\nHelps detect and handle startup failures gracefully.\n\n**Format**: Go duration string (e.g., \"30s\", \"1m\", \"500ms\")\n\n**Default**: No timeout (waits indefinitely)\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\nstart_timeout: 30s   # Wait up to 30 seconds\nstart_timeout: 2m    # Wait up to 2 minutes\nstart_timeout: 500ms # Wait up to 500 milliseconds\n` + "`" + `` + "`" + `` + "`" + `\n\n**Recommendation**: Set to at least 10-30s for Docker-based servers.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "transport": {
                    "description": "Transport defines the **communication transport mechanism**.\n\nChoose the transport based on your MCP server's capabilities and deployment model.\n\n**Supported Values**:\n\n| Transport | Description | Use Case |\n|-----------|-------------|----------|\n| ` + "`" + `sse` + "`" + ` | Server-Sent Events | HTTP servers with real-time streaming |\n| ` + "`" + `streamable-http` + "`" + ` | HTTP with streaming | Large responses, file transfers |\n| ` + "`" + `stdio` + "`" + ` | Standard I/O | Local processes, Docker containers |\n\n**Default**: ` + "`" + `sse` + "`" + `\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\n# Remote server with SSE\ntransport: sse\n\n# Local process with stdio\ntransport: stdio\n\n# HTTP server with large file support\ntransport: streamable-http\n` + "`" + `` + "`" + `` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcpproxy.TransportType"
                        }
                    ]
                },
                "url": {
                    "description": "URL is the **endpoint for remote MCP servers**.\n\nRequired for HTTP-based transports (SSE, streamable-http).\nMust be a valid HTTP or HTTPS URL pointing to an MCP-compatible endpoint.\n\n**Format**: ` + "`" + `http[s]://host[:port]/path` + "`" + `\n\n- **Examples**:\n` + "`" + `` + "`" + `` + "`" + `yaml\nurl: \"http://localhost:3000/mcp\"\nurl: \"https://api.example.com/v1/mcp\"\nurl: \"http://mcp-proxy:6001/filesystem\"\n` + "`" + `` + "`" + `` + "`" + `\n\n**Note**: Mutually exclusive with ` + "`" + `command` + "`" + ` - use either URL or Command, not both.",
                    "type": "string"
                }
            }
        },
        "mcpproxy.CallToolRequest": {
            "type": "object",
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "mcpName": {
                    "type": "string"
                },
                "toolName": {
                    "type": "string"
                }
            }
        },
        "mcpproxy.ConnectionStatus": {
            "type": "string",
            "enum": [
                "disconnected",
                "connecting",
                "connected",
                "error"
            ],
            "x-enum-varnames": [
                "StatusDisconnected",
                "StatusConnecting",
                "StatusConnected",
                "StatusError"
            ]
        },
        "mcpproxy.ListMCPsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcpproxy.MCPDetailsResponse"
                    }
                }
            }
        },
        "mcpproxy.MCPDefinition": {
            "type": "object",
            "required": [
                "name",
                "transport"
            ],
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autoReconnect": {
                    "description": "Behavior configuration",
                    "type": "boolean"
                },
                "command": {
                    "description": "Stdio transport configuration",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "healthCheckEnabled": {
                    "type": "boolean"
                },
                "healthCheckInterval": {
                    "$ref": "#/definitions/time.Duration"
                },
                "logEnabled": {
                    "type": "boolean"
                },
                "maxReconnects": {
                    "type": "integer"
                },
                "name": {
                    "description": "Core identification",
                    "type": "string",
                    "minLength": 1
                },
                "reconnectDelay": {
                    "$ref": "#/definitions/time.Duration"
                },
                "tags": {
                    "description": "Metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "toolFilter": {
                    "description": "Tool filtering",
                    "allOf": [
                        {
                            "$ref": "#/definitions/mcpproxy.ToolFilter"
                        }
                    ]
                },
                "transport": {
                    "$ref": "#/definitions/mcpproxy.TransportType"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "description": "HTTP-based transport configuration (SSE and streamable-http)",
                    "type": "string"
                }
            }
        },
        "mcpproxy.MCPDetailsResponse": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/mcpproxy.MCPDefinition"
                },
                "status": {
                    "$ref": "#/definitions/mcpproxy.MCPStatus"
                }
            }
        },
        "mcpproxy.MCPStatus": {
            "type": "object",
            "properties": {
                "avgResponseTime": {
                    "$ref": "#/definitions/time.Duration"
                },
                "lastConnected": {
                    "type": "string"
                },
                "lastError": {
                    "type": "string"
                },
                "lastErrorTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reconnectAttempts": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/mcpproxy.ConnectionStatus"
                },
                "totalErrors": {
                    "type": "integer"
                },
                "totalRequests": {
                    "type": "integer"
                },
                "upTime": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "mcpproxy.ToolFilter": {
            "type": "object",
            "required": [
                "mode"
            ],
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mode": {
                    "$ref": "#/definitions/mcpproxy.ToolFilterMode"
                }
            }
        },
        "mcpproxy.ToolFilterMode": {
            "type": "string",
            "enum": [
                "allow",
                "block"
            ],
            "x-enum-varnames": [
                "ToolFilterAllow",
                "ToolFilterBlock"
            ]
        },
        "mcpproxy.TransportType": {
            "type": "string",
            "enum": [
                "stdio",
                "sse",
                "streamable-http"
            ],
            "x-enum-varnames": [
                "TransportStdio",
                "TransportSSE",
                "TransportStreamableHTTP"
            ]
        },
        "mcprouter.MCPDTO": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Args lists additional command arguments when the MCP server runs via stdio transport.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "max_sessions": {
                    "type": "integer"
                },
                "proto": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "start_timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "transport": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "mcprouter.MCPListItem": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Args lists additional command arguments when the MCP server runs via stdio transport.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "max_sessions": {
                    "type": "integer"
                },
                "proto": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "start_timeout": {
                    "$ref": "#/definitions/time.Duration"
                },
                "transport": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "mcprouter.MCPsListResponse": {
            "type": "object",
            "properties": {
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcprouter.MCPListItem"
                    }
                },
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                }
            }
        },
        "memory.InstanceHealth": {
            "type": "object",
            "properties": {
                "consecutive_failures": {
                    "type": "integer"
                },
                "error_message": {
                    "type": "string"
                },
                "healthy": {
                    "type": "boolean"
                },
                "last_checked": {
                    "type": "string"
                },
                "memory_id": {
                    "type": "string"
                },
                "token_usage": {
                    "$ref": "#/definitions/memory.TokenUsageHealth"
                }
            }
        },
        "memory.SystemHealth": {
            "type": "object",
            "properties": {
                "healthy": {
                    "type": "boolean"
                },
                "healthy_instances": {
                    "type": "integer"
                },
                "instance_health": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/memory.InstanceHealth"
                    }
                },
                "last_checked": {
                    "type": "string"
                },
                "system_errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "total_instances": {
                    "type": "integer"
                },
                "unhealthy_instances": {
                    "type": "integer"
                }
            }
        },
        "memory.TokenUsageHealth": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "near_limit": {
                    "type": "boolean"
                },
                "usage_percentage": {
                    "type": "number"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "memoryrouter.MemoriesListResponse": {
            "type": "object",
            "properties": {
                "memories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/memoryrouter.MemoryListItem"
                    }
                },
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                }
            }
        },
        "memoryrouter.MemoryDTO": {
            "type": "object",
            "properties": {
                "default_key_template": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "flushing": {
                    "$ref": "#/definitions/core.FlushingStrategyConfig"
                },
                "id": {
                    "type": "string"
                },
                "locking": {
                    "$ref": "#/definitions/core.LockConfig"
                },
                "max_context_ratio": {
                    "type": "number"
                },
                "max_messages": {
                    "type": "integer"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "persistence": {
                    "$ref": "#/definitions/core.PersistenceConfig"
                },
                "privacy_policy": {
                    "$ref": "#/definitions/core.PrivacyPolicyConfig"
                },
                "resource": {
                    "type": "string"
                },
                "token_allocation": {
                    "$ref": "#/definitions/core.TokenAllocation"
                },
                "token_provider": {
                    "$ref": "#/definitions/core.TokenProviderConfig"
                },
                "type": {
                    "$ref": "#/definitions/core.Type"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "memoryrouter.MemoryListItem": {
            "type": "object",
            "properties": {
                "default_key_template": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "flushing": {
                    "$ref": "#/definitions/core.FlushingStrategyConfig"
                },
                "id": {
                    "type": "string"
                },
                "locking": {
                    "$ref": "#/definitions/core.LockConfig"
                },
                "max_context_ratio": {
                    "type": "number"
                },
                "max_messages": {
                    "type": "integer"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "persistence": {
                    "$ref": "#/definitions/core.PersistenceConfig"
                },
                "privacy_policy": {
                    "$ref": "#/definitions/core.PrivacyPolicyConfig"
                },
                "resource": {
                    "type": "string"
                },
                "token_allocation": {
                    "$ref": "#/definitions/core.TokenAllocation"
                },
                "token_provider": {
                    "$ref": "#/definitions/core.TokenProviderConfig"
                },
                "type": {
                    "$ref": "#/definitions/core.Type"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "memrouter.AppendMemoryRequest": {
            "type": "object",
            "required": [
                "key",
                "messages"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "memrouter.ClearMemoryRequest": {
            "type": "object",
            "required": [
                "confirm",
                "key"
            ],
            "properties": {
                "backup": {
                    "type": "boolean"
                },
                "confirm": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "memrouter.DeleteMemoryRequest": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "memrouter.FlushMemoryRequest": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "dry_run": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "max_keys": {
                    "type": "integer"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "memrouter.WriteMemoryRequest": {
            "type": "object",
            "required": [
                "key",
                "messages"
            ],
            "properties": {
                "key": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "modelrouter.ModelDTO": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_url": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "max_tool_iterations": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/core.PromptParams"
                },
                "provider": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                }
            }
        },
        "modelrouter.ModelListItem": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_url": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean"
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "id": {
                    "type": "string"
                },
                "max_tool_iterations": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/core.PromptParams"
                },
                "provider": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                }
            }
        },
        "modelrouter.ModelsListResponse": {
            "type": "object",
            "properties": {
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/modelrouter.ModelListItem"
                    }
                },
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                }
            }
        },
        "projectrouter.ProjectDTO": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/core.Author"
                },
                "autoload": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "config": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "description": {
                    "type": "string"
                },
                "memories": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "models": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "monitoring": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string"
                },
                "runtime": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "version": {
                    "type": "string"
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "router.CreateUserRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "router.ErrorInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "router.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "router.GenerateKeyData": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string"
                }
            }
        },
        "router.GenerateKeyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/router.GenerateKeyData"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "router.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/router.ErrorInfo"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "router.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "router.UsageSummary": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apitypes.UsageEntry"
                    }
                }
            }
        },
        "schedulerouter.ScheduleInfoResponse": {
            "type": "object",
            "properties": {
                "cron": {
                    "type": "string",
                    "example": "0 0 9 * * 1-5"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "is_override": {
                    "type": "boolean",
                    "example": false
                },
                "last_run_status": {
                    "type": "string",
                    "example": "success"
                },
                "last_run_time": {
                    "type": "string",
                    "example": "2024-01-14T09:00:00-05:00"
                },
                "next_run_time": {
                    "type": "string",
                    "example": "2024-01-15T09:00:00-05:00"
                },
                "schedule_id": {
                    "type": "string",
                    "example": "schedule-my-project-daily-report"
                },
                "timezone": {
                    "type": "string",
                    "example": "America/New_York"
                },
                "workflow_id": {
                    "type": "string",
                    "example": "daily-report"
                },
                "yaml_config": {
                    "$ref": "#/definitions/workflow.Schedule"
                }
            }
        },
        "schedulerouter.ScheduleListResponse": {
            "type": "object",
            "properties": {
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schedulerouter.ScheduleInfoResponse"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "schedulerouter.UpdateScheduleRequest": {
            "type": "object",
            "properties": {
                "cron": {
                    "type": "string",
                    "example": "0 0 */10 * * *"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "schema.Schema": {
            "type": "object",
            "additionalProperties": {}
        },
        "schemarouter.SchemaDTO": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "schemarouter.SchemaListItem": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                }
            }
        },
        "schemarouter.SchemasListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemarouter.SchemaListItem"
                    }
                }
            }
        },
        "service.AppendResponse": {
            "type": "object",
            "properties": {
                "appended": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "service.DeleteResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "service.WriteResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "task.ClearConfig": {
            "type": "object",
            "properties": {
                "backup": {
                    "description": "Backup data before clearing\nImplementation-dependent, may not be available for all backends",
                    "type": "boolean"
                },
                "confirm": {
                    "description": "Confirm must be true to execute clear operation\nRequired safety check to prevent accidental data loss",
                    "type": "boolean"
                }
            }
        },
        "task.CollectionMode": {
            "type": "string",
            "enum": [
                "parallel",
                "sequential"
            ],
            "x-enum-varnames": [
                "CollectionModeParallel",
                "CollectionModeSequential"
            ]
        },
        "task.Config": {
            "type": "object",
            "properties": {
                "CWD": {
                    "description": "Current working directory for file operations within the task\nInherited from parent context if not explicitly set",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PathCWD"
                        }
                    ]
                },
                "action": {
                    "description": "Action identifier that describes what this task does\nUsed for logging and debugging purposes\n- **Example**: \"process-user-data\", \"send-notification\"",
                    "type": "string"
                },
                "agent": {
                    "description": "Agent configuration for AI-powered task execution\nOnly used when the task needs to interact with an LLM agent\nMutually exclusive with Tool field\n$ref: schema://agents",
                    "allOf": [
                        {
                            "$ref": "#/definitions/agent.Config"
                        }
                    ]
                },
                "attachments": {
                    "description": "Attachments declared at the task scope are available to all nested agents/actions.",
                    "type": "array",
                    "items": {}
                },
                "batch": {
                    "description": "Batch size for processing items in groups (0 = no batching)\nUseful for rate limiting or managing resource usage\n- **Example**: 10 means process 10 items at a time",
                    "type": "integer"
                },
                "batch_size": {
                    "description": "BatchSize for operations that process multiple keys\nControls how many keys are processed in each batch\nDefault: 100, Maximum: 10,000",
                    "type": "integer"
                },
                "clear_config": {
                    "description": "Configuration for clear operations\nOnly used when operation is \"clear\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.ClearConfig"
                        }
                    ]
                },
                "condition": {
                    "description": "CEL expression for conditional task execution or routing decisions\nTask only executes if condition evaluates to true\n- **Example**: \"input.status == 'approved' \u0026\u0026 input.amount \u003e 1000\"",
                    "type": "string"
                },
                "config": {
                    "description": "Global configuration options inherited from parent contexts\nIncludes provider settings, API keys, and other global parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.GlobalOpts"
                        }
                    ]
                },
                "env": {
                    "description": "Environment variables available during task execution\nCan override or extend workflow-level environment variables\n- **Example**: { \"API_KEY\": \"{{ .env.SECRET_KEY }}\" }",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvMap"
                        }
                    ]
                },
                "file_path": {
                    "description": "Absolute file path where this task configuration was loaded from\nSet automatically during configuration loading",
                    "type": "string"
                },
                "filter": {
                    "description": "Filter is an optional CEL expression to filter items before processing\nEach item is available as 'item' in the expression\n- **Example**: \"item.status != 'inactive'\" or \"item.age \u003e 18\"",
                    "type": "string"
                },
                "final": {
                    "description": "Marks this task as a terminal node in the workflow\nNo subsequent tasks will execute after a final task",
                    "type": "boolean"
                },
                "flush_config": {
                    "description": "Configuration for flush operations\nOnly used when operation is \"flush\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.FlushConfig"
                        }
                    ]
                },
                "health_config": {
                    "description": "Configuration for health check operations\nOnly used when operation is \"health\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.HealthConfig"
                        }
                    ]
                },
                "id": {
                    "description": "Unique identifier for the task instance within a workflow\nMust be unique within the workflow scope",
                    "type": "string"
                },
                "index_var": {
                    "description": "IndexVar is the variable name for the current index (default: \"index\")\nAvailable in task templates as {{ .index }} or custom name\nZero-based index of the current item",
                    "type": "string"
                },
                "input": {
                    "description": "Schema definition for validating task input parameters\nFollows JSON Schema specification for type validation\nFormat:\n  type: object\n  properties:\n    user_id: { type: string, description: \"User identifier\" }\n  required: [\"user_id\"]",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "item_var": {
                    "description": "ItemVar is the variable name for the current item (default: \"item\")\nAvailable in task templates as {{ .item }} or custom name\n- **Example**: Set to \"user\" to access as {{ .user }} in templates",
                    "type": "string"
                },
                "items": {
                    "description": "Items is a template expression that evaluates to an array\nThe expression should resolve to a list of items to iterate over\n- **Example**: \"{{ .workflow.input.users }}\" or \"{{ range(1, 10) }}\"",
                    "type": "string"
                },
                "key_template": {
                    "description": "KeyTemplate is a template expression for the memory key\nSupports template variables for dynamic key generation\n- **Example**: \"user:{{ .workflow.input.user_id }}:profile\"",
                    "type": "string"
                },
                "knowledge": {
                    "description": "Knowledge declares task-scoped knowledge bindings (MVP single binding).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.KnowledgeBinding"
                    }
                },
                "max_iterations": {
                    "description": "Maximum number of reasoning iterations the agent can perform.\nThe agent may self-correct and refine its response across multiple iterations\nto improve accuracy and address complex multi-step problems.\n\n**Default:** ` + "`" + `5` + "`" + ` iterations\n\n**Trade-offs:**\n- Higher values enable more thorough problem-solving and self-correction\n- Each iteration consumes additional tokens and increases response latency\n- Configure based on task complexity, accuracy requirements, and cost constraints",
                    "type": "integer"
                },
                "max_keys": {
                    "description": "MaxKeys limits the number of keys processed\nSafety limit to prevent runaway operations\nDefault: 1,000, Maximum: 50,000",
                    "type": "integer"
                },
                "max_workers": {
                    "description": "MaxWorkers limits the number of concurrent task executions\n0 means no limit (all tasks run concurrently)\n- **Example**: 5 means at most 5 tasks run at the same time",
                    "type": "integer"
                },
                "mcps": {
                    "description": "Model Context Protocol (MCP) server configurations.\nMCPs provide standardized interfaces for extending agent capabilities\nwith external services and data sources through protocol-based communication.\n\n**Common MCP integrations:**\n- Database connectors (PostgreSQL, Redis, MongoDB)\n- Search engines (Elasticsearch, Solr)\n- Knowledge bases (vector databases, documentation systems)\n- External APIs (REST, GraphQL, gRPC services)\n\nMCPs support both stdio and HTTP transport protocols.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "description": "Memory references enabling the agent to access persistent context.\nMemory provides stateful interactions across workflow steps and sessions.\n\n**Configuration format:**\n` + "`" + `` + "`" + `` + "`" + `yaml\nmemory:\n  - id: \"user_context\"           # Memory resource ID\n    key: \"user:{{.user_id}}\"     # Dynamic key with template\n    mode: \"read-write\"           # Access mode (default: \"read-write\")\n` + "`" + `` + "`" + `` + "`" + `\n\n**Access modes:**\n- ` + "`" + `\"read-write\"` + "`" + `: Full access to read and modify memory\n- ` + "`" + `\"read-only\"` + "`" + `: Can only read existing memory entries",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "memory_ref": {
                    "description": "MemoryRef identifies which memory store to use\nReferences a memory configuration defined at the project level\n- **Example**: \"user-sessions\", \"workflow-state\", \"cache\"",
                    "type": "string"
                },
                "mode": {
                    "description": "Mode determines if items are processed in parallel or sequentially\nDefaults to \"parallel\"\nOptions: parallel, sequential",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.CollectionMode"
                        }
                    ]
                },
                "model_config": {
                    "description": "LLM provider configuration defining which AI model to use and its parameters.\nSupports multiple providers including OpenAI, Anthropic, Google, Groq, and local models.\n\n**Required fields:** provider, model\n**Optional fields:** api_key, api_url, params (temperature, max_tokens, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ProviderConfig"
                        }
                    ]
                },
                "on_error": {
                    "description": "Error handling configuration\nDefines fallback behavior when task execution fails\nCan specify error task ID or retry configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ErrorTransition"
                        }
                    ]
                },
                "on_success": {
                    "description": "Task execution control\nDefines what happens after successful task completion\nCan specify next task ID or conditional routing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.SuccessTransition"
                        }
                    ]
                },
                "on_timeout": {
                    "description": "OnTimeout specifies the next task to execute if the wait times out\nUses the timeout value from BaseConfig\nIf not specified, the task fails on timeout",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation type to perform on memory\nRequired field that determines the action to take",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.MemoryOpType"
                        }
                    ]
                },
                "output": {
                    "description": "Schema definition for validating task output data\nEnsures task results conform to expected structure\nUses same format as InputSchema",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "outputs": {
                    "description": "Output mappings that define what data this task exposes to subsequent tasks\nUses template expressions to transform task results\n- **Example**: { \"processed_data\": \"{{ .task.output.result }}\" }",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                },
                "payload": {
                    "description": "Payload data for write/append operations\nCan be any JSON-serializable data structure\nRequired for write and append operations"
                },
                "processor": {
                    "description": "Processor is an optional task configuration to process received signals\nAllows custom handling of signal data before continuing\nThe processor receives the signal payload as input\n$ref: inline:#",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.Config"
                        }
                    ]
                },
                "prompt": {
                    "description": "Prompt provides direct instruction to agents when no specific action is needed\nUsed for ad-hoc agent interactions without predefined action definitions\n- **Example**: \"Analyze this code for security issues\", \"Summarize the following text\"",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource reference for the task\nFormat: \"compozy:task:\u003cname\u003e\" (e.g., \"compozy:task:process-data\")",
                    "type": "string"
                },
                "retries": {
                    "description": "Number of retry attempts for failed task executions\nDefault: 0 (no retries)",
                    "type": "integer"
                },
                "routes": {
                    "description": "Routes maps condition values to task IDs or inline task configurations\nThe condition field in BaseConfig is evaluated, and its result is used\nas the key to select the appropriate route\nValues can be:\n  - Task ID (string): References an existing task\n  - Inline task config (object): Defines task configuration directly\n- **Example**:\n  routes:\n    approved: \"process-payment\"  # Task ID reference\n    rejected:                    # Inline task config\n      type: basic\n      agent: { id: rejection-handler }\n    pending: \"wait-for-approval\"",
                    "type": "object",
                    "additionalProperties": {}
                },
                "signal": {
                    "description": "Signal configuration containing the signal ID and payload",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.SignalConfig"
                        }
                    ]
                },
                "sleep": {
                    "description": "Sleep duration after task completion\nFormat: \"5s\", \"1m\", \"500ms\", \"1h30m\"\nUseful for rate limiting or giving external systems time to process",
                    "type": "string"
                },
                "stats_config": {
                    "description": "Configuration for statistics operations\nOnly used when operation is \"stats\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.StatsConfig"
                        }
                    ]
                },
                "strategy": {
                    "description": "Strategy determines how the parallel execution handles task completion\nDefaults to \"wait_all\" if not specified\nOptions: wait_all, fail_fast, best_effort, race",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.ParallelStrategy"
                        }
                    ]
                },
                "timeout": {
                    "description": "Maximum execution time for parallel or composite tasks\nFormat: \"30s\", \"5m\", \"1h\"\nTask will be canceled if it exceeds this duration",
                    "type": "string"
                },
                "tool": {
                    "description": "Tool configuration for executing specific tool operations\nUsed when the task needs to execute a predefined tool\nMutually exclusive with Agent field\n$ref: schema://tools",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tool.Config"
                        }
                    ]
                },
                "tools": {
                    "description": "Tools available to the agent for extending its capabilities.\nWhen tools are defined, the agent automatically has ` + "`" + `toolChoice` + "`" + ` set to ` + "`" + `\"auto\"` + "`" + `,\nenabling autonomous tool selection and invocation during task execution.\n\n**Tool types supported:**\n- File system operations (read, write, list)\n- API integrations (HTTP requests, webhooks)\n- Data processing utilities (parsing, transformation)\n- Custom business logic (TypeScript/JavaScript execution)\n\nTools are referenced by ID and can be shared across multiple agents.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "type": {
                    "description": "Type of task that determines execution behavior\nIf not specified, defaults to \"basic\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.Type"
                        }
                    ]
                },
                "wait_for": {
                    "description": "WaitFor specifies the signal ID to wait for\nThe task will pause until a signal with this ID is received\nMust match the ID used in a SignalTask\n- **Example**: \"user-approved\", \"payment-completed\"",
                    "type": "string"
                },
                "with": {
                    "description": "Input parameters passed to the task at execution time\nCan include references to workflow inputs, previous task outputs, etc.\n- **Example**: { \"user_id\": \"{{ .workflow.input.user_id }}\" }",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "task.ExecutionType": {
            "type": "string",
            "enum": [
                "basic",
                "router",
                "parallel",
                "collection",
                "composite",
                "wait",
                "signal",
                "aggregate",
                "memory"
            ],
            "x-enum-varnames": [
                "ExecutionBasic",
                "ExecutionRouter",
                "ExecutionParallel",
                "ExecutionCollection",
                "ExecutionComposite",
                "ExecutionWait",
                "ExecutionSignal",
                "ExecutionAggregate",
                "ExecutionMemory"
            ]
        },
        "task.FlushConfig": {
            "type": "object",
            "properties": {
                "dry_run": {
                    "description": "DryRun simulates flush without actually removing data\nUseful for testing what would be removed",
                    "type": "boolean"
                },
                "force": {
                    "description": "Force flush even if below threshold\nBypasses normal threshold checks",
                    "type": "boolean"
                },
                "max_keys": {
                    "description": "Maximum number of keys to flush in one operation\nDefault: 100",
                    "type": "integer"
                },
                "strategy": {
                    "description": "Strategy for selecting keys to flush\nOptions: \"simple_fifo\" (oldest first), \"lru\" (least recently used)\nDefault: \"simple_fifo\"",
                    "type": "string"
                },
                "threshold": {
                    "description": "Threshold (0-1) for triggering flush based on memory usage\n- **Example**: 0.8 means flush when 80% full",
                    "type": "number"
                }
            }
        },
        "task.HealthConfig": {
            "type": "object",
            "properties": {
                "check_connectivity": {
                    "description": "CheckConnectivity verifies connection to memory backend\nTests actual read/write operations",
                    "type": "boolean"
                },
                "include_stats": {
                    "description": "IncludeStats adds memory statistics to health check results\nProvides additional diagnostic information",
                    "type": "boolean"
                }
            }
        },
        "task.MemoryOpType": {
            "type": "string",
            "enum": [
                "read",
                "write",
                "append",
                "delete",
                "flush",
                "health",
                "clear",
                "stats"
            ],
            "x-enum-varnames": [
                "MemoryOpRead",
                "MemoryOpWrite",
                "MemoryOpAppend",
                "MemoryOpDelete",
                "MemoryOpFlush",
                "MemoryOpHealth",
                "MemoryOpClear",
                "MemoryOpStats"
            ]
        },
        "task.ParallelStrategy": {
            "type": "string",
            "enum": [
                "wait_all",
                "fail_fast",
                "best_effort",
                "race"
            ],
            "x-enum-varnames": [
                "StrategyWaitAll",
                "StrategyFailFast",
                "StrategyBestEffort",
                "StrategyRace"
            ]
        },
        "task.SignalConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier for the signal\nWait tasks with matching wait_for values will receive this signal\n- **Example**: \"user-approved\", \"payment-completed\", \"data-ready\"",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload contains data to send with the signal\nThis data is available to the receiving wait task for processing\nCan be any JSON-serializable data structure\n- **Example**: { \"user_id\": \"123\", \"status\": \"approved\", \"timestamp\": \"2024-01-01T00:00:00Z\" }",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "task.State": {
            "type": "object",
            "properties": {
                "action_id": {
                    "type": "string"
                },
                "agent_id": {
                    "description": "Basic execution fields (for single tasks)",
                    "type": "string"
                },
                "component": {
                    "description": "Core identification",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ComponentType"
                        }
                    ]
                },
                "created_at": {
                    "description": "Timestamps for audit trails and progress tracking",
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "execution_type": {
                    "description": "Execution type and strategy",
                    "allOf": [
                        {
                            "$ref": "#/definitions/task.ExecutionType"
                        }
                    ]
                },
                "input": {
                    "$ref": "#/definitions/core.Input"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "parent_state_id": {
                    "description": "Parent-child relationship for hierarchical tasks",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "task_exec_id": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "tool_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "description": "Aggregated usage information keyed by provider/model.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/usage.Summary"
                        }
                    ]
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "task.StatsConfig": {
            "type": "object",
            "properties": {
                "group_by": {
                    "description": "GroupBy field for aggregating statistics\n- **Example**: \"user\", \"session\", \"workflow\"\nGroups stats by the specified field in stored data",
                    "type": "string"
                },
                "include_content": {
                    "description": "IncludeContent includes actual memory content in stats\nWARNING: May return large amounts of data",
                    "type": "boolean"
                }
            }
        },
        "task.Type": {
            "type": "string",
            "enum": [
                "basic",
                "router",
                "parallel",
                "collection",
                "aggregate",
                "composite",
                "signal",
                "wait",
                "memory"
            ],
            "x-enum-varnames": [
                "TaskTypeBasic",
                "TaskTypeRouter",
                "TaskTypeParallel",
                "TaskTypeCollection",
                "TaskTypeAggregate",
                "TaskTypeComposite",
                "TaskTypeSignal",
                "TaskTypeWait",
                "TaskTypeMemory"
            ]
        },
        "time.Duration": {
            "type": "integer",
            "format": "int64",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "tkrouter.TaskDTO": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "agent": {
                    "$ref": "#/definitions/agent.Config"
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "batch": {
                    "type": "integer"
                },
                "batch_size": {
                    "type": "integer"
                },
                "clear_config": {
                    "$ref": "#/definitions/task.ClearConfig"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/core.GlobalOpts"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "filter": {
                    "type": "string"
                },
                "final": {
                    "type": "boolean"
                },
                "flush_config": {
                    "$ref": "#/definitions/task.FlushConfig"
                },
                "has_subtasks": {
                    "type": "boolean"
                },
                "health_config": {
                    "$ref": "#/definitions/task.HealthConfig"
                },
                "id": {
                    "type": "string"
                },
                "index_var": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "item_var": {
                    "type": "string"
                },
                "items": {},
                "key_template": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "max_keys": {
                    "type": "integer"
                },
                "max_workers": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "memory_ref": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "model_config": {
                    "$ref": "#/definitions/core.ProviderConfig"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "on_success": {
                    "$ref": "#/definitions/core.SuccessTransition"
                },
                "on_timeout": {
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/task.MemoryOpType"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "outputs": {
                    "$ref": "#/definitions/core.Input"
                },
                "payload": {},
                "prompt": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "routes": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "signal": {
                    "$ref": "#/definitions/task.SignalConfig"
                },
                "signal_name": {
                    "type": "string"
                },
                "sleep": {
                    "type": "string"
                },
                "stats_config": {
                    "$ref": "#/definitions/task.StatsConfig"
                },
                "strategy": {
                    "type": "string"
                },
                "subtask_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task": {
                    "$ref": "#/definitions/tkrouter.TaskDTO"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tkrouter.TaskDTO"
                    }
                },
                "timeout": {
                    "type": "string"
                },
                "tool": {
                    "$ref": "#/definitions/tool.Config"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "type": {
                    "$ref": "#/definitions/task.Type"
                },
                "wait_for": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "tkrouter.TaskExecAsyncResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "exec_url": {
                    "type": "string",
                    "example": "https://api.compozy.dev/api/v0/executions/tasks/2Z4PVTL6K27XVT4A3NPKMDD5BG"
                }
            }
        },
        "tkrouter.TaskExecRequest": {
            "type": "object",
            "properties": {
                "timeout": {
                    "description": "Timeout in seconds for synchronous execution.",
                    "type": "integer"
                },
                "with": {
                    "description": "With passes structured input parameters to the task execution.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "tkrouter.TaskExecSyncResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "usage": {
                    "$ref": "#/definitions/router.UsageSummary"
                }
            }
        },
        "tkrouter.TaskExecutionStatusDTO": {
            "type": "object",
            "properties": {
                "component": {
                    "$ref": "#/definitions/core.ComponentType"
                },
                "created_at": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "exec_id": {
                    "type": "string"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "task_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/router.UsageSummary"
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "tkrouter.TaskListItem": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "agent": {
                    "$ref": "#/definitions/agent.Config"
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "batch": {
                    "type": "integer"
                },
                "batch_size": {
                    "type": "integer"
                },
                "clear_config": {
                    "$ref": "#/definitions/task.ClearConfig"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/core.GlobalOpts"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "filter": {
                    "type": "string"
                },
                "final": {
                    "type": "boolean"
                },
                "flush_config": {
                    "$ref": "#/definitions/task.FlushConfig"
                },
                "has_subtasks": {
                    "type": "boolean"
                },
                "health_config": {
                    "$ref": "#/definitions/task.HealthConfig"
                },
                "id": {
                    "type": "string"
                },
                "index_var": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "item_var": {
                    "type": "string"
                },
                "items": {},
                "key_template": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "max_keys": {
                    "type": "integer"
                },
                "max_workers": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "memory_ref": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "model_config": {
                    "$ref": "#/definitions/core.ProviderConfig"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "on_success": {
                    "$ref": "#/definitions/core.SuccessTransition"
                },
                "on_timeout": {
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/task.MemoryOpType"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "outputs": {
                    "$ref": "#/definitions/core.Input"
                },
                "payload": {},
                "prompt": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "routes": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "signal": {
                    "$ref": "#/definitions/task.SignalConfig"
                },
                "signal_name": {
                    "type": "string"
                },
                "sleep": {
                    "type": "string"
                },
                "stats_config": {
                    "$ref": "#/definitions/task.StatsConfig"
                },
                "strategy": {
                    "type": "string"
                },
                "subtask_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task": {
                    "$ref": "#/definitions/tkrouter.TaskDTO"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tkrouter.TaskDTO"
                    }
                },
                "timeout": {
                    "type": "string"
                },
                "tool": {
                    "$ref": "#/definitions/tool.Config"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "type": {
                    "$ref": "#/definitions/task.Type"
                },
                "wait_for": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "tkrouter.TaskResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "agent": {
                    "$ref": "#/definitions/agent.Config"
                },
                "attachments": {
                    "type": "array",
                    "items": {}
                },
                "batch": {
                    "type": "integer"
                },
                "batch_size": {
                    "type": "integer"
                },
                "clear_config": {
                    "$ref": "#/definitions/task.ClearConfig"
                },
                "condition": {
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/core.GlobalOpts"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "filter": {
                    "type": "string"
                },
                "final": {
                    "type": "boolean"
                },
                "flush_config": {
                    "$ref": "#/definitions/task.FlushConfig"
                },
                "has_subtasks": {
                    "type": "boolean"
                },
                "health_config": {
                    "$ref": "#/definitions/task.HealthConfig"
                },
                "id": {
                    "type": "string"
                },
                "index_var": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "item_var": {
                    "type": "string"
                },
                "items": {},
                "key_template": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "max_keys": {
                    "type": "integer"
                },
                "max_workers": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "memory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.MemoryReference"
                    }
                },
                "memory_ref": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "model_config": {
                    "$ref": "#/definitions/core.ProviderConfig"
                },
                "on_error": {
                    "$ref": "#/definitions/core.ErrorTransition"
                },
                "on_success": {
                    "$ref": "#/definitions/core.SuccessTransition"
                },
                "on_timeout": {
                    "type": "string"
                },
                "operation": {
                    "$ref": "#/definitions/task.MemoryOpType"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "outputs": {
                    "$ref": "#/definitions/core.Input"
                },
                "payload": {},
                "prompt": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "routes": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "signal": {
                    "$ref": "#/definitions/task.SignalConfig"
                },
                "signal_name": {
                    "type": "string"
                },
                "sleep": {
                    "type": "string"
                },
                "stats_config": {
                    "$ref": "#/definitions/task.StatsConfig"
                },
                "strategy": {
                    "type": "string"
                },
                "subtask_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "type": "string"
                },
                "tool": {
                    "$ref": "#/definitions/tool.Config"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "type": {
                    "$ref": "#/definitions/task.Type"
                },
                "wait_for": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "tkrouter.TasksListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tkrouter.TaskListItem"
                    }
                }
            }
        },
        "tool.Config": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Configuration parameters passed to the tool separately from input data.\nProvides static configuration that tools can use for initialization and behavior control.\nUnlike input parameters, config is not meant to change between tool invocations.\n\n- **Use cases:** API base URLs, retry policies, timeout settings, feature flags\n- **Separation:** Keeps configuration separate from runtime input data\n- **Override:** Can be overridden at workflow or agent level\n- **Example:**\n  ` + "`" + `` + "`" + `` + "`" + `yaml\n  config:\n    base_url: \"https://api.example.com\"\n    timeout: 30\n    retry_count: 3\n    headers:\n      User-Agent: \"Compozy/1.0\"\n  ` + "`" + `` + "`" + `` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                },
                "cwd": {
                    "description": "CWD defines the working directory for tool execution.\nUsed for resolving relative file paths and setting process working directory.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PathCWD"
                        }
                    ]
                },
                "description": {
                    "description": "Human-readable description of the tool's functionality and purpose.\nThis description is used by AI agents to understand when and how to use the tool.\nShould clearly explain capabilities, limitations, and expected use cases.\n\n- **Best practices:** Be specific about what the tool does and its constraints\n- **Example:** ` + "`" + `\"Read and parse various file formats including JSON, YAML, and CSV with size limits\"` + "`" + `",
                    "type": "string"
                },
                "env": {
                    "description": "Environment variables available during tool execution.\nVariables are isolated to the tool's execution context for security.\nUsed for configuration, API keys, and runtime settings.\n\n- **Security:** Variables are only accessible within the tool's execution\n- **Template support:** Values can use template expressions for dynamic configuration\n- **Example:**\n  ` + "`" + `` + "`" + `` + "`" + `yaml\n  env:\n    API_KEY: \"{{ .env.SECRET_API_KEY }}\"\n    BASE_URL: \"https://api.example.com\"\n    DEBUG: \"{{ .project.debug | default(false) }}\"\n  ` + "`" + `` + "`" + `` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvMap"
                        }
                    ]
                },
                "id": {
                    "description": "Unique identifier for the tool within the project scope.\nUsed for referencing the tool in agent configurations, workflows, and function calls.\nMust be unique across all tools in the project.\n\n- **Examples:** ` + "`" + `\"file-reader\"` + "`" + `, ` + "`" + `\"api-client\"` + "`" + `, ` + "`" + `\"data-processor\"` + "`" + `\n- **Naming:** Use kebab-case for consistency with other Compozy identifiers",
                    "type": "string"
                },
                "input": {
                    "description": "JSON schema defining the expected input parameters for the tool.\nUsed for validation before execution and to generate LLM function call definitions.\nMust follow JSON Schema Draft 7 specification for compatibility.\n\n- **When nil:** Tool accepts any input format (no validation performed)\n- **Use cases:** Parameter validation, type safety, auto-generated documentation\n- **Integration:** Automatically converts to LLM function parameters",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "output": {
                    "description": "JSON schema defining the expected output format from the tool.\nUsed for validation after execution and documentation purposes.\nMust follow JSON Schema Draft 7 specification for compatibility.\n\n- **When nil:** No output validation is performed\n- **Use cases:** Response validation, type safety, workflow data flow verification\n- **Best practice:** Define output schema for tools used in critical workflows",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "resource": {
                    "description": "Resource identifier for the autoloader system (must be ` + "`" + `\"tool\"` + "`" + `).\nThis field enables automatic discovery and registration of tool configurations.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Maximum execution time for the tool in Go duration format.\nIf not specified, uses the global tool timeout from project configuration.\nThis timeout applies to the entire tool execution lifecycle.\n\n- **Examples:** ` + "`" + `\"30s\"` + "`" + `, ` + "`" + `\"5m\"` + "`" + `, ` + "`" + `\"1h\"` + "`" + `, ` + "`" + `\"500ms\"` + "`" + `\n- **Constraints:** Must be positive; zero or negative values cause validation errors\n- **Default fallback:** Uses project-level tool timeout when empty",
                    "type": "string"
                },
                "with": {
                    "description": "Default input parameters merged with runtime parameters provided by agents.\nProvides a way to set tool defaults while allowing runtime customization.\n\n- **Merge strategy:** Runtime parameters override defaults (shallow merge)\n- **Use cases:** Default API URLs, fallback configurations, preset options\n- **Security note:** Avoid storing secrets here; use environment variables instead",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                }
            }
        },
        "toolrouter.ToolDTO": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/core.Input"
                },
                "cwd": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "resource": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "toolrouter.ToolListItem": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/core.Input"
                },
                "cwd": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "env": {
                    "$ref": "#/definitions/core.EnvMap"
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "output": {
                    "$ref": "#/definitions/schema.Schema"
                },
                "resource": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "with": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "toolrouter.ToolsListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                },
                "tools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/toolrouter.ToolListItem"
                    }
                }
            }
        },
        "uc.ClearMemoryResult": {
            "type": "object",
            "properties": {
                "backup_created": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "messages_cleared": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "uc.FlushMemoryResult": {
            "type": "object",
            "properties": {
                "actual_strategy": {
                    "type": "string"
                },
                "dry_run": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "summary_generated": {
                    "type": "boolean"
                },
                "token_count": {
                    "type": "integer"
                },
                "would_flush": {
                    "type": "boolean"
                }
            }
        },
        "uc.HealthMemoryResult": {
            "type": "object",
            "properties": {
                "actual_strategy": {
                    "type": "string"
                },
                "current_tokens": {
                    "type": "integer"
                },
                "healthy": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "last_flush": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "token_count": {
                    "type": "integer"
                }
            }
        },
        "uc.PaginationInfo": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "uc.StatsMemoryOutput": {
            "type": "object",
            "properties": {
                "context_window_used": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "pagination_info": {
                    "$ref": "#/definitions/uc.PaginationInfo"
                },
                "role_distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "token_count": {
                    "type": "integer"
                },
                "token_limit": {
                    "type": "integer"
                },
                "token_utilization": {
                    "type": "number"
                }
            }
        },
        "usage.Entry": {
            "type": "object",
            "properties": {
                "agent_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cached_prompt_tokens": {
                    "type": "integer"
                },
                "captured_at": {
                    "type": "string"
                },
                "completion_tokens": {
                    "type": "integer"
                },
                "input_audio_tokens": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "output_audio_tokens": {
                    "type": "integer"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "reasoning_tokens": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "total_tokens": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "usage.Summary": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usage.Entry"
                    }
                }
            }
        },
        "webhook.Config": {
            "type": "object",
            "properties": {
                "dedupe": {
                    "$ref": "#/definitions/webhook.DedupeSpec"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook.EventConfig"
                    }
                },
                "method": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "verify": {
                    "$ref": "#/definitions/webhook.VerifySpec"
                }
            }
        },
        "webhook.DedupeSpec": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "ttl": {
                    "type": "string"
                }
            }
        },
        "webhook.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "webhook.EventConfig": {
            "type": "object",
            "properties": {
                "filter": {
                    "type": "string"
                },
                "input": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "schema": {
                    "$ref": "#/definitions/schema.Schema"
                }
            }
        },
        "webhook.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "webhook.VerifySpec": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "skew": {
                    "$ref": "#/definitions/time.Duration"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "wfrouter.AgentsOrDTOs": {
            "type": "object",
            "properties": {
                "expanded": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agentrouter.AgentDTO"
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "wfrouter.EventRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "payload": {
                    "$ref": "#/definitions/core.Input"
                }
            }
        },
        "wfrouter.EventResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "wfrouter.ExecuteWorkflowResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "exec_url": {
                    "type": "string",
                    "example": "https://api.compozy.dev/api/v0/executions/workflows/2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "workflow_id": {
                    "type": "string",
                    "example": "data-processing"
                }
            }
        },
        "wfrouter.SignalRequest": {
            "type": "object",
            "required": [
                "signal_name"
            ],
            "properties": {
                "payload": {
                    "description": "Payload contains the data to send with the signal",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Input"
                        }
                    ]
                },
                "signal_name": {
                    "description": "SignalName is the name of the signal to send to the workflow execution",
                    "type": "string",
                    "example": "ready_signal"
                }
            }
        },
        "wfrouter.SignalResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Signal sent successfully"
                }
            }
        },
        "wfrouter.TasksOrDTOs": {
            "type": "object",
            "properties": {
                "expanded": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tkrouter.TaskDTO"
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "wfrouter.ToolsOrDTOs": {
            "type": "object",
            "properties": {
                "expanded": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/toolrouter.ToolDTO"
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "wfrouter.WorkflowDTO": {
            "type": "object",
            "properties": {
                "agent_count": {
                    "type": "integer"
                },
                "agents": {
                    "$ref": "#/definitions/wfrouter.AgentsOrDTOs"
                },
                "author": {
                    "$ref": "#/definitions/core.Author"
                },
                "config": {
                    "$ref": "#/definitions/workflow.Opts"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mcp_count": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "outputs": {
                    "$ref": "#/definitions/core.Output"
                },
                "resource": {
                    "type": "string"
                },
                "schedule": {
                    "$ref": "#/definitions/workflow.Schedule"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Schema"
                    }
                },
                "task_count": {
                    "type": "integer"
                },
                "task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tasks": {
                    "description": "Expandable collections: marshaled as either []string or []\u003cDTO\u003e",
                    "allOf": [
                        {
                            "$ref": "#/definitions/wfrouter.TasksOrDTOs"
                        }
                    ]
                },
                "tool_count": {
                    "type": "integer"
                },
                "tools": {
                    "$ref": "#/definitions/wfrouter.ToolsOrDTOs"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workflow.Trigger"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "wfrouter.WorkflowExecutionDTO": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/core.Error"
                },
                "input": {
                    "$ref": "#/definitions/core.Input"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "status": {
                    "$ref": "#/definitions/core.StatusType"
                },
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/task.State"
                    }
                },
                "usage": {
                    "$ref": "#/definitions/router.UsageSummary"
                },
                "workflow_exec_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                }
            }
        },
        "wfrouter.WorkflowListItem": {
            "type": "object",
            "properties": {
                "agent_count": {
                    "type": "integer"
                },
                "agents": {
                    "$ref": "#/definitions/wfrouter.AgentsOrDTOs"
                },
                "author": {
                    "$ref": "#/definitions/core.Author"
                },
                "config": {
                    "$ref": "#/definitions/workflow.Opts"
                },
                "description": {
                    "type": "string"
                },
                "etag": {
                    "type": "string",
                    "example": "abc123"
                },
                "id": {
                    "type": "string"
                },
                "mcp_count": {
                    "type": "integer"
                },
                "mcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "outputs": {
                    "$ref": "#/definitions/core.Output"
                },
                "resource": {
                    "type": "string"
                },
                "schedule": {
                    "$ref": "#/definitions/workflow.Schedule"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Schema"
                    }
                },
                "task_count": {
                    "type": "integer"
                },
                "task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tasks": {
                    "description": "Expandable collections: marshaled as either []string or []\u003cDTO\u003e",
                    "allOf": [
                        {
                            "$ref": "#/definitions/wfrouter.TasksOrDTOs"
                        }
                    ]
                },
                "tool_count": {
                    "type": "integer"
                },
                "tools": {
                    "$ref": "#/definitions/wfrouter.ToolsOrDTOs"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workflow.Trigger"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "wfrouter.WorkflowSyncRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "$ref": "#/definitions/core.Input"
                },
                "task_id": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout in seconds for synchronous execution.",
                    "type": "integer"
                }
            }
        },
        "wfrouter.WorkflowSyncResponse": {
            "type": "object",
            "properties": {
                "exec_id": {
                    "type": "string",
                    "example": "2Z4PVTL6K27XVT4A3NPKMDD5BG"
                },
                "output": {
                    "$ref": "#/definitions/core.Output"
                },
                "workflow": {
                    "$ref": "#/definitions/wfrouter.WorkflowExecutionDTO"
                }
            }
        },
        "wfrouter.WorkflowsListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "$ref": "#/definitions/httpdto.PageInfoDTO"
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/wfrouter.WorkflowListItem"
                    }
                }
            }
        },
        "workflow.Config": {
            "type": "object",
            "properties": {
                "agents": {
                    "description": "AI agents with specific instructions and capabilities\nConfigure LLM-powered agents with custom prompts, tools access, and behavior\nAgents can be referenced by tasks using $use: agent(...) syntax\n$ref: schema://agents",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/agent.Config"
                    }
                },
                "author": {
                    "description": "Author information for workflow attribution\nHelps track ownership and responsibility for workflow maintenance",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Author"
                        }
                    ]
                },
                "config": {
                    "description": "Configuration options including input schema and environment variables\nControls workflow behavior, validation, and runtime environment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workflow.Opts"
                        }
                    ]
                },
                "cwd": {
                    "description": "Internal field for the current working directory context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PathCWD"
                        }
                    ]
                },
                "description": {
                    "description": "Human-readable description of the workflow's purpose\nShould clearly explain what the workflow does and when to use it",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the workflow (required)\nMust be unique within the project scope. Used for referencing and execution.\n- **Example**: \"customer-support\", \"data-processing\", \"content-generation\"",
                    "type": "string"
                },
                "knowledge": {
                    "description": "Knowledge defines the default knowledge binding for the workflow context.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.KnowledgeBinding"
                    }
                },
                "knowledge_bases": {
                    "description": "KnowledgeBases declares workflow-scoped knowledge definitions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/knowledge.BaseConfig"
                    }
                },
                "mcps": {
                    "description": "Model Context Protocol servers for extending AI capabilities\nMCP servers provide specialized tools and knowledge to agents\nEnable integration with external services and domain-specific functionality\n$ref: schema://mcp",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mcp.Config"
                    }
                },
                "outputs": {
                    "description": "Output mappings to structure the final workflow results\nUse template expressions to extract and transform task outputs\n- **Example**: ticket_id: \"{{ .tasks.create-ticket.output.id }}\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Output"
                        }
                    ]
                },
                "resource": {
                    "description": "Resource reference for external workflow definitions\nFormat: \"compozy:workflow:\u003cname\u003e\" - allows referencing pre-built workflows",
                    "type": "string"
                },
                "schedule": {
                    "description": "Schedule configuration for automated workflow execution\nEnable cron-based scheduling with timezone support and overlap policies",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workflow.Schedule"
                        }
                    ]
                },
                "schemas": {
                    "description": "JSON schemas for validating data structures used in the workflow\nDefine reusable schemas that can be referenced throughout the workflow\nusing $ref syntax (e.g., $ref: local::schemas.#(id=\"user_schema\"))",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.Schema"
                    }
                },
                "tasks": {
                    "description": "Sequential tasks that define the workflow execution plan (required)\nTasks are the core execution units, processed in order with conditional branching\nEach task uses either an agent or tool to perform its operation\n$ref: schema://tasks",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Config"
                    }
                },
                "tools": {
                    "description": "External tools that can be invoked by agents or tasks\nDefine executable scripts or programs that perform specific operations\nTools provide deterministic, non-AI functionality like API calls or data processing\n$ref: schema://tools",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tool.Config"
                    }
                },
                "triggers": {
                    "description": "Event triggers that can initiate workflow execution\nDefine external events (webhooks, signals) that can start the workflow\nEach trigger can have its own input schema for validation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workflow.Trigger"
                    }
                },
                "version": {
                    "description": "Version of the workflow for tracking changes\nFollows semantic versioning (e.g., \"1.0.0\", \"2.1.3\")\nUseful for managing workflow evolution and backwards compatibility",
                    "type": "string"
                }
            }
        },
        "workflow.Opts": {
            "type": "object",
            "properties": {
                "env": {
                    "description": "Environment variables available to the workflow and its components\nThese variables are accessible to all tasks, agents, and tools within the workflow",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvMap"
                        }
                    ]
                },
                "heartbeat_timeout": {
                    "description": "Interval for task heartbeat signals\nUsed for long-running tasks to indicate progress\n\n- **Example**: \"10s\", \"30s\", \"1m\"",
                    "type": "string"
                },
                "input": {
                    "description": "Input schema for validating workflow input parameters\nUses JSON Schema format to define expected input structure and validation rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "on_error": {
                    "description": "Error handler configuration\nDefines what happens when a task fails after all retries",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ErrorTransition"
                        }
                    ]
                },
                "retry_policy": {
                    "description": "Retry configuration for transient failures\nAutomatically retries failed tasks with exponential backoff",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.RetryPolicyConfig"
                        }
                    ]
                },
                "schedule_to_close_timeout": {
                    "description": "Total timeout from scheduling to completion\nDefault: \"6m\"\n\n- **Example**: \"1m\", \"15m\", \"2h\"",
                    "type": "string"
                },
                "schedule_to_start_timeout": {
                    "description": "Maximum time to wait for a task to start executing\nDefault: \"1m\"\n\n- **Example**: \"30s\", \"5m\", \"1h\"",
                    "type": "string"
                },
                "start_to_close_timeout": {
                    "description": "Maximum time for task execution once started\nDefault: \"5m\"\n\n- **Example**: \"30s\", \"10m\", \"1h\"",
                    "type": "string"
                }
            }
        },
        "workflow.OverlapPolicy": {
            "type": "string",
            "enum": [
                "skip",
                "allow",
                "buffer_one",
                "cancel_other"
            ],
            "x-enum-varnames": [
                "OverlapSkip",
                "OverlapAllow",
                "OverlapBufferOne",
                "OverlapCancelOther"
            ]
        },
        "workflow.Schedule": {
            "type": "object",
            "required": [
                "cron"
            ],
            "properties": {
                "cron": {
                    "description": "Cron expression for scheduling (required)\nSupports standard cron format: \"minute hour day month weekday\"\nSpecial strings: @yearly, @monthly, @weekly, @daily, @hourly",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the schedule is enabled (optional, default true)\nSet to false to temporarily disable scheduled runs without removing the configuration",
                    "type": "boolean"
                },
                "end_at": {
                    "description": "End date for the schedule (optional)\nSchedule will not run after this time",
                    "type": "string"
                },
                "input": {
                    "description": "Default input values for scheduled runs (optional)\nThese inputs are merged with any trigger inputs when the workflow executes",
                    "type": "object",
                    "additionalProperties": {}
                },
                "jitter": {
                    "description": "Random delay to add to execution time (optional)\nFormat: \"5m\", \"1h\", \"30s\" - helps distribute load when many workflows run at the same time",
                    "type": "string"
                },
                "overlap_policy": {
                    "description": "Policy for handling overlapping executions (optional, default skip)\nOptions: skip, allow, buffer_one, cancel_other",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workflow.OverlapPolicy"
                        }
                    ]
                },
                "start_at": {
                    "description": "Start date for the schedule (optional)\nSchedule will not run before this time",
                    "type": "string"
                },
                "timezone": {
                    "description": "Timezone for schedule execution (optional, default UTC)\nUses IANA timezone names (e.g., \"America/New_York\", \"Europe/London\")",
                    "type": "string"
                }
            }
        },
        "workflow.Trigger": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Unique name for identifying this trigger",
                    "type": "string"
                },
                "schema": {
                    "description": "Schema for validating trigger input data (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schema.Schema"
                        }
                    ]
                },
                "type": {
                    "description": "Type of trigger mechanism (e.g., \"signal\" for external signals)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/workflow.TriggerType"
                        }
                    ]
                },
                "webhook": {
                    "description": "Webhook holds configuration when Type==webhook",
                    "allOf": [
                        {
                            "$ref": "#/definitions/webhook.Config"
                        }
                    ]
                }
            }
        },
        "workflow.TriggerType": {
            "type": "string",
            "enum": [
                "signal",
                "webhook"
            ],
            "x-enum-varnames": [
                "TriggerTypeSignal",
                "TriggerTypeWebhook"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer token authentication (Optional - controlled by SERVER_AUTH_ENABLED environment variable. When enabled, all API endpoints require valid authentication. In development/testing, authentication may be disabled.)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Workflow management operations",
            "name": "workflows"
        },
        {
            "description": "Task management operations",
            "name": "tasks"
        },
        {
            "description": "Agent management operations",
            "name": "agents"
        },
        {
            "description": "Tool management operations",
            "name": "tools"
        },
        {
            "description": "Schedule management operations",
            "name": "schedules"
        },
        {
            "description": "Memory management operations",
            "name": "memory"
        },
        {
            "description": "Knowledge base management operations",
            "name": "knowledge"
        },
        {
            "description": "Authentication and API key management operations",
            "name": "auth"
        },
        {
            "description": "User management operations (admin only)",
            "name": "users"
        },
        {
            "description": "Operational endpoints for monitoring and health",
            "name": "Operations"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v0",
	Schemes:          []string{},
	Title:            "Compozy API",
	Description:      "Compozy is a Next-level Agentic Orchestration Platform, tasks, and tools. Authentication is configurable via the SERVER_AUTH_ENABLED environment variable. When enabled, all endpoints require Bearer token authentication. When disabled (typical for development), endpoints are accessible without authentication.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
