# Cursor Rules for Compozy

## ⚠️ CRITICAL CODE FORMATTING RULE - NEVER VIOLATE

### Line Spacing in Code Blocks

**ABSOLUTELY MANDATORY:** Never add blank lines inside function bodies, code blocks, or any enclosed scope.

```go
// ✅ CORRECT - No blank lines inside blocks
t.Run("Should work correctly", func(t *testing.T) {
    proxyHandlers := &ProxyHandlers{
        globalAuthTokens: []string{},
    }
    result := combineAuthTokens(proxyHandlers.globalAuthTokens, []string{})
    assert.Empty(t, result)
})

func processData() error {
    data := fetchData()
    processed := transform(data)
    return save(processed)
}

// ❌ WRONG - Never add blank lines inside blocks
t.Run("Should fail", func(t *testing.T) {
    proxyHandlers := &ProxyHandlers{
        globalAuthTokens: nil,
    }

    result := combineAuthTokens(proxyHandlers.globalAuthTokens, nil)

    assert.Nil(t, result)
})
```

**When blank lines ARE allowed:**
- Between separate function definitions
- Between separate `t.Run()` test cases
- Between separate struct definitions
- Between separate const/var blocks

**When blank lines are FORBIDDEN:**
- Inside function bodies
- Inside test cases (`t.Run` blocks)
- Inside struct definitions
- Inside if/for/switch blocks
- Even when adding comments

## Testing Standards

- All tests MUST use `t.Run("Should...")` pattern
- Use testify for assertions and mocks
- Place `*_test.go` files alongside implementation files
- Mock external dependencies

## Go Best Practices

- Max 80 lines or 50 statements per function
- Max 120 characters per line
- Max cyclomatic complexity of 15
- All errors must be checked
- Use `core.NewError()` for structured errors
- Use `pkg/logger` for structured logging

## Development Workflow

Before commits: `make fmt && make lint && make test`
