---
description:
globs:
alwaysApply: true
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD and its technical specification

## Task Implementation

<completion_protocol>
1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.
2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.
- Stop after each sub‑task and wait for the user's go‑ahead.
</completion_protocol>

<critical type="before_parent_task_completion">
Before completing the parent task (when ALL sub-tasks are [x]), you MUST:
1. Run `make lint` and `make test` to ensure the implementation is correct
2. Follow the @task-review.mdc workflow to ensure quality and review
3. **NEVER** mark complete if ANY lint errors exist or ANY tests are failing
4. **NEVER** mark complete without implementertions defined in the task
5. **NEVER IN ANY CIRCUMSTANCE** fix things doing workarounds, you need to delivery good quality code.

This comprehensive validation is required for parent tasks, not individual sub-tasks.
</critical>

## Task List Maintenance

<maintenance_rules>
1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one‑line description of its purpose.
</maintenance_rules>

## AI Instructions

<ai_workflow>
When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub‑task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep "Relevant Files" accurate and up to date.
5. Before starting work, check which sub‑task is next.
6. After implementing a sub‑task, update the file and then pause for user approval.
7. **ALWAYS** use the task.mdc file as the primary reference for implementation
8. **NEVER** skip test assertions defined in the task requirements
</ai_workflow>

<critical type="code_quality_enforcement">
**MANDATORY REQUIREnst PRD and tech specs - Ns
- **NEVER** use workarountests - implement prfollow all established prre patterns: @Architecture & Design Principles
  - Go coding standards: @Go Coding Standards
irements: @Testing Standards
  - API standards: @API Development Standards
  - Security & quality: @Quality and Security Standards
- **MUST** run `make lint` and `make test` before completing parent tasks
- **MUST** follow @task-review.mdc workflow for parent tasks
- **NEVER** finish tasks with ANY lint errors or failing tests
- **NEVER** finish tasks without implementing ALL test assertions defined in task.mdc
- **ALWAYS** use task.mdc as the primary reference for validation
**Enforcement:** Violating these standards results in immediate task rejection.
</critical>
