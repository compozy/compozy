---
description: "Guide for creating Product Requirements Documents (PRDs) with AI assistance, including clarifying questions and structured documentation process"
globs:
alwaysApply: false
---
# Rule: Generating a Product Requirements Document (PRD)

<goal>
To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be comprehensive, covering both functional requirements and implementation planning, suitable for developers and stakeholders to understand and execute the feature development.
</goal>

## Template Reference

<template_reference>
**ALWAYS use the standardized PRD template:** @_prd-template.md

This template provides a comprehensive structure that balances requirements gathering with implementation planning, ensuring consistency across all PRDs in the project.
</template_reference>

## Process

<process_workflow>
1. **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.
2. **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. Focus on understanding the "what" and "why" of the feature, user needs, and success criteria.
3. **Generate Comprehensive PRD:** Based on the initial prompt and the user's answers, generate a PRD using the template structure that covers both requirements and implementation planning.
4. **Create Feature Folder:** Create a feature folder `./tasks/prd-[feature-name]/`.
5. **Save PRD:** Save the generated document as `_prd.md` inside the feature folder.
</process_workflow>

## Clarifying Questions (Examples)

<clarifying_questions_guidance>
The AI should adapt its questions based on the prompt and template sections. Here are key areas to explore:

**Problem & Goals:**
- "What problem does this feature solve for the user?"
- "What are the specific, measurable goals we want to achieve?"
- "How will we measure success?"

**Users & Stories:**
- "Who is the primary user of this feature?"
- "Can you provide user stories? (As a [type of user], I want to [action] so that [benefit])"
- "What are the key user flows and interactions?"

**Core Functionality:**
- "What are the essential features that must be included in the MVP?"
- "Can you describe the key actions a user should be able to perform?"
- "What data does this feature need to display or manipulate?"

**Technical Considerations:**
- "Are there any existing systems this needs to integrate with?"
- "What are the performance or security requirements?"
- "Are there any technical constraints or dependencies?"

**Scope & Planning:**
- "What should this feature NOT do (non-goals)?"
- "How should development be phased for incremental delivery?"
- "What are the dependencies between different parts of this feature?"

**Risks & Challenges:**
- "What are the biggest risks or challenges you foresee?"
- "Are there any unknowns that need research before implementation?"
- "What could prevent this feature from being successful?"

**Design & Experience:**
- "Are there any design mockups or UI guidelines to follow?"
- "What accessibility requirements should be considered?"
- "How should this feature integrate with the existing user experience?"
</clarifying_questions_guidance>

## PRD Structure Requirements

<prd_structure_requirements>
The generated PRD MUST follow the template structure from @_prd-template.md:

1. **Overview:** Problem statement, target users, and value proposition
2. **Goals:** Specific, measurable objectives and business outcomes
3. **User Stories:** Detailed narratives covering primary and edge case scenarios
4. **Core Features:** Main functionality with detailed functional requirements
5. **User Experience:** User journeys, flows, UI/UX considerations, and accessibility
6. **Technical Architecture:** System components, data models, APIs, infrastructure
7. **Non-Goals (Out of Scope):** Clear boundaries and excluded features
8. **Development Roadmap:** Phased approach with MVP and enhancement stages
9. **Logical Dependency Chain:** Build order and incremental delivery strategy
10. **Success Metrics:** Measurable outcomes for user engagement and business impact
11. **Risks and Mitigations:** Potential challenges and response strategies
12. **Open Questions:** Unresolved items requiring further clarification
13. **Appendix:** Supporting materials, research, and reference documentation
</prd_structure_requirements>

## Content Guidelines

<content_guidelines>
**Target Audience:** Assume readers include both **junior developers** and **project stakeholders**. Requirements should be:
- Explicit and unambiguous
- Detailed enough for implementation
- Strategic enough for decision-making
- Avoid technical jargon without explanation

**Functional Requirements:** Use clear, actionable language:
- "The system must allow users to..."
- "Users should be able to..."
- Number requirements for easy reference

**Implementation Focus:** Balance user needs with practical development:
- Consider MVP vs. full feature scope
- Plan for incremental delivery
- Address technical dependencies
- Identify critical path features
</content_guidelines>

<output_specification>
- **Format:** Markdown (`.md`)
- **Location:** `./tasks/prd-[feature-name]/`
- **Filename:** `_prd.md`
- **Template:** Use @_prd-template.md structure
</output_specification>

## Workflow Instructions

<workflow_instructions>
1. **DO NOT** start implementing the PRD immediately
2. **ALWAYS** ask clarifying questions first to gather comprehensive information
3. **USE** the standardized template structure for consistency
4. **FOCUS** on both user requirements and implementation planning
5. **ENSURE** the PRD is actionable for both development and project management
6. **ITERATE** on the PRD based on user feedback and additional clarification
</workflow_instructions>

## Quality Checklist

<quality_checklist>
Before finalizing the PRD, ensure:
- [ ] All template sections are completed with relevant information
- [ ] User stories cover primary flows and edge cases
- [ ] Functional requirements are numbered and specific
- [ ] Technical considerations address integration and dependencies
- [ ] Development roadmap shows clear phases and dependencies
- [ ] Success metrics are measurable and relevant
- [ ] Risks are identified with mitigation strategies
- [ ] Open questions capture any remaining uncertainties
</quality_checklist>
