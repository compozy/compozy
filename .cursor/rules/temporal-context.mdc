---
description: Prevent converting workflow.Context to context.Context in Temporal Go workflows
globs: ["*.go"]
---

# Do not convert `workflow.Context` to `context.Context`

## Context
In Temporal Go SDK, you cannot reliably convert a `workflow.Context` (used inside workflows) into a standard Go `context.Context`, nor vice versa.
This limitation exists because Temporal ensures **deterministic workflow replay**, while Go‚Äôs `context.Context` is non-deterministic.

## Requirements
- üö´ Never assign a `workflow.Context` value into a variable of type `context.Context`.
- ‚úÖ Workflow code must remain orchestration-only: all I/O or non-deterministic work (HTTP, DB, gRPC, etc.) must be moved to Activities, which receive a `context.Context`.
- ‚úÖ For quick access to a real `context.Context` **within a workflow**, you may use a `workflow.ExecuteLocalActivity` that returns it ‚Äî since local activities run in the same process and can safely use `context.Context`.
- ‚ö†Ô∏è For cleanup tasks that must ignore workflow cancellation, use `workflow.NewDisconnectedContext()` (still a `workflow.Context`, not `context.Context`).
- ‚úÖ To propagate metadata (user IDs, tokens, etc.) between workflow and activity, use a **Context Propagator** instead of manual conversion.

## Example

```go
// ‚úÖ Correct approach:
func ExampleWorkflow(ctx workflow.Context) error {
  ao := workflow.ActivityOptions{
    StartToCloseTimeout: 10 * time.Second,
  }
  ctx = workflow.WithActivityOptions(ctx, ao)

  // Run an activity that uses context.Context
  var result string
  err := workflow.ExecuteActivity(ctx, YourActivity, "param").Get(ctx, &result)
  return err
}

// ‚úÖ Alternative: use a Local Activity if you just need a real context.Context
func ExampleWorkflowWithLocal(ctx workflow.Context) error {
  lao := workflow.LocalActivityOptions{
    StartToCloseTimeout: 1 * time.Second,
  }
  ctx = workflow.WithLocalActivityOptions(ctx, lao)

  var contextVal string
  _ = workflow.ExecuteLocalActivity(ctx, RetrieveContextActivity).Get(ctx, &contextVal)
  return nil
}

func RetrieveContextActivity(ctx context.Context) (string, error) {
  // Safe place to use standard context.Context
  return fmt.Sprintf("context: %v", ctx), nil
}

// ‚ùå Incorrect:
var stdCtx context.Context = workflowCtx  // do not do this
