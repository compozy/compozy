---
globs: *.go
alwaysApply: false
---

# Magic Numbers & Constants

## Purpose

Eliminate unexplained numeric literals from runtime code. A "magic number" is any numeric literal whose meaning is not self-evident: `5`, `10`, `0.75`, `30 * time.Second` embedded in logic for retries, timeouts, limits, sizes, or thresholds.

## Decision Framework

**1. Trivial/idiomatic literals** — Allowed inline: `0`, `1`, `-1` for loops/slices, `1 << 10` for KiB, `http.StatusOK`

**2. Fixed implementation constants** — Use named `const` with clear intent:
```go
const (
    defaultHTTPTimeout = 30 * time.Second  // Use time.Duration for time
    defaultMaxRetries  = 5
    highWatermark      = 0.85
)
```

**3. Operator-tunable values** — MUST use config (see @.cursor/rules/global-config.mdc):
```go
cfg := config.FromContext(ctx)
timeout := cfg.Runtime.HTTPClientTimeout
```

## Naming & Placement

- Intention-revealing names: `DefaultReconnectDelay`, `MaxConcurrentJobs`
- Group in `constants.go` with descriptive comments
- Use typed values: `time.Duration`, explicit sizes
- Keep close to usage unless widely shared

## When to Promote to Config

Values that operators may need to tune:
- Timeouts, deadlines, polling intervals
- Retry/backoff counts and factors
- Concurrency limits and queue sizes
- Buffer/payload limits
- Behavior thresholds (throttling, sampling)

## Tests

- Prefer local test constants: `const testTimeout = 5 * time.Second`
- Acceptable to inline trivial literals when intent is clear
- Don't duplicate production constants; import or assert relative behavior

<critical>
- **NEVER** introduce magic numbers in runtime code
- **MUST** promote tunable values to configuration via @.cursor/rules/global-config.mdc
- **MUST** fetch config via `config.FromContext(ctx)` — no global singletons
</critical>
