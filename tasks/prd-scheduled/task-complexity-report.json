{
    "metadata": {
        "generationTimestamp": "2025-01-19T11:30:00Z",
        "tasksAnalyzedCount": 7,
        "thresholdScore": 7,
        "projectName": "scheduled-workflows"
    },
    "tasks": [
        {
            "id": "1.0",
            "title": "Add Schedule Configuration to Workflow Schema",
            "complexityScore": 2,
            "reasoning": "Well-defined task involving creating a Go struct and validation logic. Uses established libraries (robfig/cron/v3) and is self-contained without complex external interactions.",
            "recommendedSubtasks": 4,
            "expansionPrompt": "Create the Schedule struct with all fields from tech spec, implement validation using cron parser and timezone validation, integrate with workflow config, and write unit tests.",
            "keyConsiderations": [
                "Ensure tzdata availability in server environment",
                "Handle Enabled pointer field correctly for default values"
            ]
        },
        {
            "id": "2.0",
            "title": "Implement Schedule Manager with Temporal Integration",
            "complexityScore": 9,
            "reasoning": "Most complex task - forms core logic between app config and Temporal. Requires idempotent reconciliation, performance optimization (1000 workflows in 30s), deep Temporal SDK expertise, and robust error handling.",
            "recommendedSubtasks": 7,
            "expansionPrompt": "Implement Manager interface, reconciliation algorithm, state comparison logic, Temporal SDK mapping, worker pool with rate limiting, error handling/retry, and comprehensive unit tests with mocked client.",
            "keyConsiderations": [
                "Idempotency of reconciliation logic",
                "Performance at scale with worker pool",
                "Correct state drift detection",
                "Temporal SDK mastery for schedule operations"
            ]
        },
        {
            "id": "3.0",
            "title": "Create REST API for Schedule Management",
            "complexityScore": 6,
            "reasoning": "Standard REST endpoints with moderate complexity in temporary override feature. Requires state comparison between Temporal and YAML to determine divergence, plus new authz scope implementation.",
            "recommendedSubtasks": 6,
            "expansionPrompt": "Define API models with IsOverride flag, implement GET endpoints with state comparison, PUT/DELETE handlers for temporary changes, integrate authz scopes, update router and OpenAPI docs.",
            "keyConsiderations": [
                "State comparison logic for is_override detection",
                "Clear communication of temporary override behavior",
                "Race condition handling with background reconciliation"
            ]
        },
        {
            "id": "4.0",
            "title": "Integrate Schedule Reconciliation into Server Startup",
            "complexityScore": 4,
            "reasoning": "Simple core action (calling reconciliation) with operational complexity. Requires background goroutine implementation, graceful failure handling, and readiness probe integration.",
            "recommendedSubtasks": 5,
            "expansionPrompt": "Initialize ScheduleManager in setupDependencies, launch reconciliation in background goroutine, implement retry with exponential backoff, integrate with readiness probe, handle context cancellation.",
            "keyConsiderations": [
                "Readiness probe integration",
                "Cold start behavior on reconciliation failure",
                "Non-blocking server startup"
            ]
        },
        {
            "id": "5.0",
            "title": "Add Monitoring and Observability for Schedules",
            "complexityScore": 5,
            "reasoning": "Goes beyond simple metrics - requires careful instrumentation of complex code paths throughout schedule manager and API handlers for meaningful system health insights.",
            "recommendedSubtasks": 5,
            "expansionPrompt": "Define and register Prometheus metrics, instrument reconciliation loop, add structured logging with context, instrument API handlers, create Grafana dashboard with alerts.",
            "keyConsiderations": [
                "Metric cardinality management",
                "Actionable logging without noise",
                "Holistic view combining app and Temporal metrics"
            ]
        },
        {
            "id": "6.0",
            "title": "Write Integration Tests and Documentation",
            "complexityScore": 7,
            "reasoning": "Feature success depends on user trust through reliability and clarity. Complex reconciliation logic and API override behavior demand rigorous testing and clear documentation. Time-based testing is inherently difficult.",
            "recommendedSubtasks": 5,
            "expansionPrompt": "Create integration tests with real Temporal, edge case tests for DST/overlaps, user documentation with examples, API documentation updates. Unit tests are handled in individual tasks.",
            "keyConsiderations": [
                "Test environment setup with Temporal",
                "Clear explanation of stateless reconciliation",
                "Testing time-based logic deterministically"
            ]
        },
        {
            "id": "7.0",
            "title": "Implement Override Tracking and Reload Hooks",
            "complexityScore": 5,
            "reasoning": "Critical for GitOps model - ensures API overrides persist correctly and YAML changes trigger reconciliation. Requires thread-safe cache design and integration with config reload events.",
            "recommendedSubtasks": 5,
            "expansionPrompt": "Design override cache, modify reconciliation to check overrides, integrate with config reload events, add periodic reconciliation option, write comprehensive tests.",
            "keyConsiderations": [
                "Thread-safe override cache implementation",
                "Clear override lifecycle management",
                "Efficient config reload event handling",
                "Avoiding reconciliation storms on rapid reloads"
            ]
        }
    ],
    "recommendations": {
        "highComplexityTasks": ["2.0", "6.0"],
        "criticalPath": ["1.0", "2.0", "4.0", "7.0"],
        "parallelizableTasks": ["3.0", "5.0"],
        "totalEstimatedSubtasks": 37
    }
}
