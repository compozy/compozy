// Code generated by optionsgen. DO NOT EDIT.

package project

import (
	autoload "github.com/compozy/compozy/engine/autoload"
	core "github.com/compozy/compozy/engine/core"
	monitoring "github.com/compozy/compozy/engine/infra/monitoring"
	knowledge "github.com/compozy/compozy/engine/knowledge"
	mcp "github.com/compozy/compozy/engine/mcp"
	memory "github.com/compozy/compozy/engine/memory"
	project "github.com/compozy/compozy/engine/project"
	projectschedule "github.com/compozy/compozy/engine/project/schedule"
	schema "github.com/compozy/compozy/engine/schema"
	tool "github.com/compozy/compozy/engine/tool"
)

type Option func(*project.Config)

// WithName sets the Name field
//
// Name is the unique identifier for this Compozy project.
// **Requirements**:
// - Must be unique within your Compozy installation
// - Alphanumeric characters, hyphens, and underscores only
// - Cannot start with a number
// - Maximum 63 characters
// - **Examples**: `"customer-support-ai"`, `"data-pipeline"`, `"content-generator"`
func WithName(name string) Option {
	return func(cfg *project.Config) {
		cfg.Name = name
	}
}

// WithVersion sets the Version field
//
// Version specifies the semantic version of this project configuration.
// **Format**: Follows [Semantic Versioning 2.0.0](https://semver.org/)
// - `MAJOR.MINOR.PATCH` (e.g., `1.2.3`)
// - Optional pre-release: `1.0.0-alpha.1`
// - Optional build metadata: `1.0.0+20230615`
func WithVersion(version string) Option {
	return func(cfg *project.Config) {
		cfg.Version = version
	}
}

// WithDescription sets the Description field
//
// Description provides a human-readable explanation of the project's purpose and capabilities.
// **Guidelines**:
// - Be specific about what the project does
// - Include primary use cases and benefits
// - Keep it concise (1-3 sentences)
// - Avoid technical jargon for broader understanding
// **Example**: `"Multi-agent customer support system with automated ticket routing"`
func WithDescription(description string) Option {
	return func(cfg *project.Config) {
		cfg.Description = description
	}
}

// WithAuthor sets the Author field
//
// Author information for the project.
// $ref: inline:#author
func WithAuthor(author core.Author) Option {
	return func(cfg *project.Config) {
		cfg.Author = author
	}
}

// WithWorkflows sets the Workflows field
//
// Workflows defines the list of workflow files that compose this project's AI capabilities.
func WithWorkflows(workflows []*project.WorkflowSourceConfig) Option {
	return func(cfg *project.Config) {
		cfg.Workflows = workflows
	}
}

// WithSchedules sets the Schedules field
//
// Schedules defines automated workflow executions managed by the SDK.
// Each schedule references a workflow by identifier and applies cron-based execution semantics.
func WithSchedules(schedules []*projectschedule.Config) Option {
	return func(cfg *project.Config) {
		cfg.Schedules = schedules
	}
}

// WithModels sets the Models field
//
// Models configures the LLM providers and model settings available to this project.
// $ref: schema://provider
// **Multi-Model Support**:
// - Configure multiple providers for redundancy
// - Different models for different tasks (cost/performance optimization)
// - Fallback chains for high availability
// **Supported Providers**:
// - OpenAI (GPT-4, GPT-3.5, etc.)
// - Anthropic (Claude models)
// - Google (Gemini models)
// - Groq (Fast inference)
// - Ollama (Local models)
// - Custom providers via API compatibility
// **Example**:
// ```yaml
// models:
// # Primary model for complex reasoning
// - provider: openai
// model: gpt-4-turbo
// api_key: "{{ .env.OPENAI_API_KEY }}"
// temperature: 0.7
// max_tokens: 4000
// # Fallback for cost optimization
// - provider: anthropic
// model: claude-3-haiku
// api_key: "{{ .env.ANTHROPIC_API_KEY }}"
// # Local model for sensitive data
// - provider: ollama
// model: llama2:13b
// api_url: http://localhost:11434
// ```
func WithModels(models []*core.ProviderConfig) Option {
	return func(cfg *project.Config) {
		cfg.Models = models
	}
}

// WithSchemas sets the Schemas field
//
// Schemas defines the data validation schemas used throughout the project workflows.
// **Schema Benefits**:
// - Type safety for workflow inputs/outputs
// - Early error detection and validation
// - Self-documenting data contracts
// - IDE autocomplete support
// **Example**:
// ```yaml
// schemas:
// - id: user-input
// schema:
// type: object
// properties:
// name:
// type: string
// minLength: 1
// age:
// type: integer
// minimum: 0
// required: ["name"]
// ```
func WithSchemas(schemas []schema.Schema) Option {
	return func(cfg *project.Config) {
		cfg.Schemas = schemas
	}
}

// WithOpts sets the Opts field
//
// Opts contains project-wide configuration options for performance tuning and behavior control.
// $ref: inline:#project-options
func WithOpts(opts project.Opts) Option {
	return func(cfg *project.Config) {
		cfg.Opts = opts
	}
}

// WithRuntime sets the Runtime field
//
// Runtime specifies the JavaScript/TypeScript execution environment for custom tools.
// NOTE: Runtime configuration has been moved to global config (pkg/config.RuntimeConfig)
// This field is kept for backwards compatibility and project-specific overrides.
// $ref: schema://application#runtime
func WithRuntime(runtime project.RuntimeConfig) Option {
	return func(cfg *project.Config) {
		cfg.Runtime = runtime
	}
}

// WithAutoLoad sets the AutoLoad field
//
// AutoLoad configures automatic loading and reloading of project resources during development.
// $ref: inline:#autoload
// **Development Benefits**:
// - Hot-reload agents and workflows without restart
// - Automatic discovery of new resources
// - Faster iteration cycles
// - Validation on file changes
// **Example**:
// ```yaml
// autoload:
// enabled: true
// strict: true              # Fail on validation errors
// watch_interval: 2s        # Check for changes every 2 seconds
// include:
// - "agents/**/*.yaml"
// - "workflows/**/*.yaml"
// - "memory/**/*.yaml"
// exclude:
// - "**/*.tmp"
// - "**/*~"
// ```
func WithAutoLoad(autoLoad *autoload.Config) Option {
	return func(cfg *project.Config) {
		cfg.AutoLoad = autoLoad
	}
}

// WithTools sets the Tools field
//
// Tools defines shared tool definitions available to all workflows and agents
// within this project. These tools are inherited unless explicitly overridden.
// **Inheritance Rules**:
// - Agent tools completely override inheritance when present
// - Workflow tools override project tools by ID
// - Tool ID collisions resolved by precedence: Agent > Workflow > Project
// **Location & autoload**:
// - Place reusable tool configuration files under the `tools/` directory (e.g., `tools/*.yaml`)
// - If autoload is enabled, files in `tools/` will be discovered and validated automatically
// **Example**:
// ```yaml
// tools:
// - id: code-analyzer
// description: Analyzes code quality and patterns
// timeout: 30s
// - id: data-processor
// description: Processes and transforms data
// ```
func WithTools(tools []tool.Config) Option {
	return func(cfg *project.Config) {
		cfg.Tools = tools
	}
}

// WithEmbedders sets the Embedders field
//
// Embedders declares project-level embedding providers that can be reused across workflows.
func WithEmbedders(embedders []knowledge.EmbedderConfig) Option {
	return func(cfg *project.Config) {
		cfg.Embedders = embedders
	}
}

// WithVectorDBs sets the VectorDBs field
//
// VectorDBs declares project-level vector database connections that knowledge bases can reference.
func WithVectorDBs(vectorDBs []knowledge.VectorDBConfig) Option {
	return func(cfg *project.Config) {
		cfg.VectorDBs = vectorDBs
	}
}

// WithKnowledgeBases sets the KnowledgeBases field
//
// KnowledgeBases declares reusable knowledge base definitions scoped to the project.
func WithKnowledgeBases(knowledgeBases []knowledge.BaseConfig) Option {
	return func(cfg *project.Config) {
		cfg.KnowledgeBases = knowledgeBases
	}
}

// WithKnowledge sets the Knowledge field
//
// Knowledge defines the default binding for tasks or agents within the project scope (MVP single binding).
func WithKnowledge(knowledge []core.KnowledgeBinding) Option {
	return func(cfg *project.Config) {
		cfg.Knowledge = knowledge
	}
}

// WithMCPs sets the MCPs field
//
// MCPs declares project-scoped MCP server definitions accessible to workflows and agents.
func WithMCPs(mCPs []mcp.Config) Option {
	return func(cfg *project.Config) {
		cfg.MCPs = mCPs
	}
}

// WithMemories sets the Memories field
//
// Memories declares project-scoped memory resources that agents and tasks can reference
// by ID. These are indexed into the ResourceStore under the current project and can be
// used across workflows for conversation and state sharing.
// Example:
// memories:
// - id: conversation
// type: buffer
// persistence:
// type: in_memory
// The Resource field on memory.Config is optional in project-level definitions and will
// default to "memory" during validation.
func WithMemories(memories []*memory.Config) Option {
	return func(cfg *project.Config) {
		cfg.Memories = memories
	}
}

// WithMonitoringConfig sets the MonitoringConfig field
//
// MonitoringConfig enables observability and metrics collection for performance tracking.
// $ref: inline:#monitoring
func WithMonitoringConfig(monitoringConfig *monitoring.Config) Option {
	return func(cfg *project.Config) {
		cfg.MonitoringConfig = monitoringConfig
	}
}
