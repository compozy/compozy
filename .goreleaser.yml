# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
# vim: set ts=2 sw=2 tw=0 fo=jcroql
version: 2

# Project configuration
project_name: compozy

# Metadata configuration
metadata:
  mod_timestamp: "{{ .CommitTimestamp }}"
  license: "BSL-1.1"
  homepage: "https://github.com/compozy/compozy"
  description: "A powerful Next-level Agentic Orchestration Platform, enabling intelligent automation through declarative YAML configuration."
  maintainers:
    - "Compozy Team <team@compozy.dev>"

# Environment variables
env:
  - GO111MODULE=on
  - CGO_ENABLED=0

# Git configuration
git:
  # What should be used to sort tags when gathering the current and previous
  # tags if there are more than one tag in the same commit.
  tag_sort: -version:refname

# Nightly builds configuration
nightly:
  publish_release: true
  keep_single_release: true
  version_template: "{{ incminor .Version }}-nightly"

# Build configuration
builds:
  - id: compozy
    main: ./cmd/compozy/main.go
    binary: compozy

    # Build for multiple platforms
    goos:
      - linux
      - darwin
      - windows
      - freebsd
      - openbsd
      - netbsd

    goarch:
      - amd64
      - arm64
      - "386"
      - arm

    goarm:
      - "7"

    # Build constraints
    ignore:
      # Skip unsupported combinations
      - goos: windows
        goarch: arm64
      - goos: darwin
        goarch: "386"
      - goos: darwin
        goarch: arm

    # Linker flags for version injection
    ldflags:
      - -s -w
      - -X github.com/compozy/compozy/pkg/version.Version={{.Version}}
      - -X github.com/compozy/compozy/pkg/version.CommitHash={{.ShortCommit}}
      - -X github.com/compozy/compozy/pkg/version.BuildDate={{.Date}}

    # Build environment
    env:
      - CGO_ENABLED=0

    # Build flags
    flags:
      - -trimpath

    # Build mode
    mod_timestamp: "{{ .CommitTimestamp }}"

# Archive configuration
archives:
  - id: compozy-archive
    builds:
      - compozy

    # Archive name template
    name_template:
      "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{\
      \ end }}"

    # Archive format
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip

    # Files to include in archive
    files:
      - README.md
      - LICENSE*
      - CHANGELOG.md
      - docs/README.md
      - src: completions/*
        dst: completions
        strip_parent: true
      - src: manpages/*
        dst: manpages
        strip_parent: true

    # Wrap in directory
    wrap_in_directory: true

# Checksum configuration
checksum:
  name_template: "checksums.txt"
  algorithm: sha256

# Signing configuration
signs:
  - cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: checksum
    output: true

# Snapshot configuration (for non-tagged builds)
snapshot:
  version_template: "0.0.0-{{ .Timestamp }}"

# Source archive configuration
source:
  enabled: true

# Changelog configuration
changelog:
  use: github
  sort: asc
  abbrev: 7

  # Changelog groups
  groups:
    - title: "üéâ New Features"
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: "üêõ Bug Fixes"
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: "‚ö° Performance Improvements"
      regexp: "^.*perf[(\\w)]*:+.*$"
      order: 2
    - title: "üîê Security Updates"
      regexp: "^.*security[(\\w)]*:+.*$"
      order: 3
    - title: "üìö Documentation"
      regexp: "^.*docs[(\\w)]*:+.*$"
      order: 4
    - title: "üîß Refactoring"
      regexp: "^.*refactor[(\\w)]*:+.*$"
      order: 5
    - title: "üì¶ Dependencies"
      regexp: "^.*deps[(\\w)]*:+.*$"
      order: 6
    - title: "üß™ Testing"
      regexp: "^.*test[(\\w)]*:+.*$"
      order: 7
    - title: "Other Changes"
      order: 999

  # Filters
  filters:
    exclude:
      - "^(build|ci): "
      - "^chore: auto-update generated files$"
      - "^chore: docs$"
      - "^chore: schema update$"
      - "^chore: typo$"
      - "^chore\\(legal\\): "
      - "^chore\\(deps\\): "
      - "^docs: update$"
      - "^test:"
      - "^test\\("
      - "merge conflict"
      - Merge branch
      - Merge pull request
      - Merge remote-tracking branch
      - go mod tidy
      - "^wip "
      - "^wip:"

# Release configuration
release:
  # GitHub repository
  github:
    owner: compozy
    name: compozy

  # Release name template
  name_template: "Release {{ .Version }}"

  # Release mode
  mode: replace

  # Draft release
  draft: false

  # Prerelease detection
  prerelease: auto

  # Release header and footer
  header: |
    ## Compozy {{ .Version }}

    Welcome to this new release of Compozy! üéâ

    ### Installation

    #### Binary Download
    Download the appropriate binary for your platform from the assets below.

    #### Go Install
    ```bash
    go install github.com/compozy/compozy@{{ .Tag }}
    ```

    #### Container Image
    ```bash
    docker pull ghcr.io/compozy/compozy:{{ .Version }}
    ```

  footer: |
    ### Verification

    All release artifacts are signed and can be verified:

    #### Checksums
    ```bash
    cosign verify-blob \
      --signature checksums.txt.sig \
      --certificate checksums.txt.pem \
      checksums.txt
    ```

    #### Container Images
    ```bash
    cosign verify ghcr.io/compozy/compozy:{{ .Version }}
    ```

    **Full Changelog**: https://github.com/compozy/compozy/compare/{{ .PreviousTag }}...{{ .Tag }}

    ---

    Thank you to all contributors who made this release possible! üôè

# Docker configuration
dockers:
  # Main Compozy application - AMD64
  - id: compozy-main-amd64
    ids:
      - compozy
    dockerfile: ./cluster/compozy.Dockerfile
    use: buildx
    goos: linux
    goarch: amd64
    image_templates:
      - "ghcr.io/compozy/compozy:{{ .Version }}-amd64"
      - "ghcr.io/compozy/compozy:latest-amd64"
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.description=Compozy Workflow Orchestration Engine"
      - "--label=org.opencontainers.image.url=https://github.com/compozy/compozy"
      - "--label=org.opencontainers.image.source=https://github.com/compozy/compozy"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.licenses=BSL-1.1"
      - "--label=org.opencontainers.image.vendor=Compozy"
    extra_files:
      - "README.md"
      - "LICENSE"

  # Main Compozy application - ARM64
  - id: compozy-main-arm64
    ids:
      - compozy
    dockerfile: ./cluster/compozy.Dockerfile
    use: buildx
    goos: linux
    goarch: arm64
    image_templates:
      - "ghcr.io/compozy/compozy:{{ .Version }}-arm64"
      - "ghcr.io/compozy/compozy:latest-arm64"
    build_flag_templates:
      - "--platform=linux/arm64"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.description=Compozy Workflow Orchestration Engine"
      - "--label=org.opencontainers.image.url=https://github.com/compozy/compozy"
      - "--label=org.opencontainers.image.source=https://github.com/compozy/compozy"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.licenses=BSL-1.1"
      - "--label=org.opencontainers.image.vendor=Compozy"
    extra_files:
      - "README.md"
      - "LICENSE"

# Docker manifest configuration for multi-arch images
docker_manifests:
  # Main Compozy application manifests
  - name_template: "ghcr.io/compozy/compozy:{{ .Version }}"
    image_templates:
      - "ghcr.io/compozy/compozy:{{ .Version }}-amd64"
      - "ghcr.io/compozy/compozy:{{ .Version }}-arm64"

  - name_template: "ghcr.io/compozy/compozy:latest"
    image_templates:
      - "ghcr.io/compozy/compozy:latest-amd64"
      - "ghcr.io/compozy/compozy:latest-arm64"

# Container image signing with cosign
docker_signs:
  - cmd: cosign
    args:
      - "sign"
      - "--yes"
      - "${artifact}@${digest}"
    artifacts: images
    output: true

# Homebrew tap configuration
brews:
  - name: compozy
    # GitHub repository to push the formula to
    repository:
      owner: compozy
      name: homebrew-compozy
      branch: main
      # Token for the repository
      # You need a personal access token with write access to the tap repository
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

    # Git author used to commit to the repository
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Directory inside the repository to put the formula
    directory: Formula

    # Caveats for the user of your binary
    caveats: |
      To get started with Compozy, you need to:

      1. Set up the required environment variables
      2. Configure your first workflow

      See https://github.com/compozy/compozy for more information.

    # Homepage for the project
    homepage: "https://github.com/compozy/compozy"

    # Short description of your project
    description: "Next-level Agentic Orchestration Platform"

    # License of your project
    license: "BSL-1.1"

    # Setting this will prevent goreleaser to publish the formula
    # in case there are no unix builds
    skip_upload: auto

    # Custom block for the brew formula
    # Can be used to add dependencies, conflicts, etc.
    dependencies:
      - name: git
        type: optional
      - name: docker
        type: optional

    # Install script
    install: |
      bin.install "compozy"

      # Install shell completions from pre-generated files
      bash_completion.install "completions/compozy.bash" => "compozy" if File.exist?("completions/compozy.bash")
      zsh_completion.install "completions/compozy.zsh" => "_compozy" if File.exist?("completions/compozy.zsh")
      fish_completion.install "completions/compozy.fish" if File.exist?("completions/compozy.fish")

      # Install man pages
      man1.install "manpages/compozy.1.gz" if File.exist?("manpages/compozy.1.gz")

    # Test block
    test: |
      system "#{bin}/compozy", "version"

# NPM publishing configuration
npms:
  - name: "compozy"
    repository: "git+https://github.com/compozy/compozy.git"
    bugs: https://github.com/compozy/compozy/issues
    homepage: https://github.com/compozy/compozy
    description: "Next-level Agentic Orchestration Platform - official CLI"
    license: BSL-1.1
    access: public

# NFPM packaging configuration
nfpms:
  - id: compozy-packages
    package_name: compozy
    file_name_template: "{{ .ConventionalFileName }}"

    vendor: "Compozy"
    homepage: "https://github.com/compozy/compozy"
    maintainer: "Compozy Team <team@compozy.dev>"
    description: "Next-level Agentic Orchestration Platform"
    license: "BSL-1.1"

    formats:
      - apk
      - deb
      - rpm
      - archlinux

    contents:
      - src: ./completions/compozy.bash
        dst: /etc/bash_completion.d/compozy
        file_info:
          mode: 0644
      - src: ./completions/compozy.fish
        dst: /usr/share/fish/vendor_completions.d/compozy.fish
        file_info:
          mode: 0644
      - src: ./completions/compozy.zsh
        dst: /usr/share/zsh/site-functions/_compozy
        file_info:
          mode: 0644
      - src: ./manpages/compozy.1.gz
        dst: /usr/share/man/man1/compozy.1.gz
        file_info:
          mode: 0644

    rpm:
      signature:
        key_file: '{{ if ne (index .Env "GPG_KEY_PATH") "" }}{{ .Env.GPG_KEY_PATH }}{{ else }}{{ end }}'

    deb:
      signature:
        key_file: '{{ if ne (index .Env "GPG_KEY_PATH") "" }}{{ .Env.GPG_KEY_PATH }}{{ else }}{{ end }}'

# Before hooks (run before building)
before:
  hooks:
    # Clean up any previous builds
    - go clean -cache
    # Download dependencies
    - go mod download
    # Verify dependencies
    - go mod verify
    # Run tests
    - make test
    # Generate documentation
    - make swagger || true
    - make schemagen || true
    # Generate shell completions
    - rm -rf completions
    - mkdir completions
    - sh -c 'go run . completion bash >./completions/compozy.bash || echo "Bash completions generation skipped"'
    - sh -c 'go run . completion zsh >./completions/compozy.zsh || echo "Zsh completions generation skipped"'
    - sh -c 'go run . completion fish >./completions/compozy.fish || echo "Fish completions generation skipped"'
    # Generate man pages
    - rm -rf manpages
    - mkdir manpages
    - sh -c 'go run . man | gzip -c >./manpages/compozy.1.gz || echo "Man page generation skipped"'

# Software Bill of Materials (SBOM) generation
sboms:
  - id: compozy-sbom
    artifacts: binary
    args: ["$artifact", "--file", "$sbom", "--output", "cyclonedx-json"]
    env:
      - COSIGN_EXPERIMENTAL=1

# Nix package configuration
nix:
  - name: compozy
    # GitHub repository to push the package to
    repository:
      owner: compozy
      name: nur
      branch: main
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

    # Git author used to commit to the repository
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string
    commit_msg_template: "compozy: {{ .Version }}"

    # Homepage for the project
    homepage: "https://github.com/compozy/compozy"

    # Short description of your project
    description: "Next-level Agentic Orchestration Platform"

    # License of your project
    license: "mit"

    # Skip upload in case there's no suitable binary
    skip_upload: auto

    # Dependencies
    dependencies:
      - git

    # Install script
    install: |
      mkdir -p $out/bin
      cp ./compozy $out/bin/compozy

      # Install man pages
      installManPage ./manpages/compozy.1.gz || true

      # Install shell completions
      installShellCompletion ./completions/compozy.{bash,zsh,fish} || true

# AUR (Arch User Repository) configuration
aurs:
  # Source package
  - name: compozy
    homepage: "https://github.com/compozy/compozy"
    description: "Next-level Agentic Orchestration Platform"
    maintainers:
      - "Compozy Team <team@compozy.dev>"
    license: BSL-1.1
    private_key: "{{ .Env.AUR_KEY }}"
    git_url: "ssh://aur@aur.archlinux.org/compozy.git"
    skip_upload: auto

    # Package build dependencies
    depends:
      - git

    # Package relations
    conflicts:
      - compozy-bin
      - compozy-git

    # PKGBUILD customization
    package: |
      # Install binary
      install -Dm755 compozy "$pkgdir/usr/bin/compozy"

      # Install man pages
      install -Dm644 manpages/compozy.1.gz "$pkgdir/usr/share/man/man1/compozy.1.gz"

      # Install shell completions
      install -Dm644 completions/compozy.bash "$pkgdir/usr/share/bash-completion/completions/compozy"
      install -Dm644 completions/compozy.zsh "$pkgdir/usr/share/zsh/site-functions/_compozy"
      install -Dm644 completions/compozy.fish "$pkgdir/usr/share/fish/vendor_completions.d/compozy.fish"

    # Commit settings
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    commit_msg_template: "Update to {{ .Version }}"

  # Binary package
  - name: compozy-bin
    homepage: "https://github.com/compozy/compozy"
    description: "Next-level Agentic Orchestration Platform (binary release)"
    maintainers:
      - "Compozy Team <team@compozy.dev>"
    license: BSL-1.1
    private_key: "{{ .Env.AUR_KEY }}"
    git_url: "ssh://aur@aur.archlinux.org/compozy-bin.git"
    skip_upload: auto

    # Package build dependencies
    depends:
      - git

    # Package relations
    provides:
      - compozy
    conflicts:
      - compozy
      - compozy-git

    # Binary PKGBUILD package
    package: |
      # Install binary
      install -Dm755 compozy "$pkgdir/usr/bin/compozy"

      # Install man pages
      install -Dm644 manpages/compozy.1.gz "$pkgdir/usr/share/man/man1/compozy.1.gz"

      # Install shell completions
      install -Dm644 completions/compozy.bash "$pkgdir/usr/share/bash-completion/completions/compozy"
      install -Dm644 completions/compozy.zsh "$pkgdir/usr/share/zsh/site-functions/_compozy"
      install -Dm644 completions/compozy.fish "$pkgdir/usr/share/fish/vendor_completions.d/compozy.fish"

    # Commit settings
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    commit_msg_template: "Update to {{ .Version }}"
