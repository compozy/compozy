package postgres

import "fmt"

const (
	defaultHost     = "localhost"
	defaultPort     = "5432"
	defaultUser     = "postgres"
	defaultPassword = ""
	defaultDB       = "postgres"
	defaultSSLMode  = "disable"
)

// dsn builds a pgx-compatible DSN string from Config when ConnString is empty.
func dsn(cfg *Config) string {
	if cfg == nil {
		cfg = &Config{}
	}
	if cfg.ConnString != "" {
		return cfg.ConnString
	}
	cfgWithDefaults := Config{
		Host:     defaultIfEmpty(cfg.Host, defaultHost),
		Port:     defaultIfEmpty(cfg.Port, defaultPort),
		User:     defaultIfEmpty(cfg.User, defaultUser),
		Password: defaultIfEmpty(cfg.Password, defaultPassword),
		DBName:   defaultIfEmpty(cfg.DBName, defaultDB),
		SSLMode:  defaultIfEmpty(cfg.SSLMode, defaultSSLMode),
	}
	return fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		cfgWithDefaults.Host,
		cfgWithDefaults.Port,
		cfgWithDefaults.User,
		cfgWithDefaults.Password,
		cfgWithDefaults.DBName,
		cfgWithDefaults.SSLMode,
	)
}

// DSNFor returns a DSN appropriate for database/sql with the pgx stdlib driver.
// It uses the same format generated by dsn(cfg).
func DSNFor(cfg *Config) string { return dsn(cfg) }

func defaultIfEmpty(v, def string) string {
	if v == "" {
		return def
	}
	return v
}
