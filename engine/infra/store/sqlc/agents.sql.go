// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package db

import (
	"context"
	"database/sql"
)

const getAgentExecutionByExecID = `-- name: GetAgentExecutionByExecID :one
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND agent_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetAgentExecutionByExecID(ctx context.Context, agentExecID sql.NullString) (Execution, error) {
	row := q.db.QueryRowContext(ctx, getAgentExecutionByExecID, agentExecID)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.ComponentType,
		&i.WorkflowID,
		&i.WorkflowExecID,
		&i.TaskID,
		&i.TaskExecID,
		&i.AgentID,
		&i.AgentExecID,
		&i.ToolID,
		&i.ToolExecID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAgentExecutionsByAgentID = `-- name: ListAgentExecutionsByAgentID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND agent_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByAgentID(ctx context.Context, agentID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByAgentID, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentExecutionsByStatus = `-- name: ListAgentExecutionsByStatus :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND status = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByStatus(ctx context.Context, status string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentExecutionsByTaskExecID = `-- name: ListAgentExecutionsByTaskExecID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND task_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByTaskExecID(ctx context.Context, taskExecID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByTaskExecID, taskExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentExecutionsByTaskID = `-- name: ListAgentExecutionsByTaskID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND task_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByTaskID(ctx context.Context, taskID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentExecutionsByWorkflowExecID = `-- name: ListAgentExecutionsByWorkflowExecID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND workflow_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByWorkflowExecID(ctx context.Context, workflowExecID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByWorkflowExecID, workflowExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentExecutionsByWorkflowID = `-- name: ListAgentExecutionsByWorkflowID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'agent' AND workflow_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentExecutionsByWorkflowID(ctx context.Context, workflowID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listAgentExecutionsByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
