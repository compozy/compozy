// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tool.sql

package db

import (
	"context"
	"database/sql"

	"github.com/compozy/compozy/engine/core"
)

const getToolExecutionByExecID = `-- name: GetToolExecutionByExecID :one
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND tool_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetToolExecutionByExecID(ctx context.Context, toolExecID core.ID) (Execution, error) {
	row := q.db.QueryRowContext(ctx, getToolExecutionByExecID, toolExecID)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.ComponentType,
		&i.WorkflowID,
		&i.WorkflowExecID,
		&i.TaskID,
		&i.TaskExecID,
		&i.AgentID,
		&i.AgentExecID,
		&i.ToolID,
		&i.ToolExecID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listToolExecutions = `-- name: ListToolExecutions :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool'
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutions(ctx context.Context) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByStatus = `-- name: ListToolExecutionsByStatus :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND status = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByStatus(ctx context.Context, status core.StatusType) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByTaskExecID = `-- name: ListToolExecutionsByTaskExecID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND task_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByTaskExecID(ctx context.Context, taskExecID core.ID) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByTaskExecID, taskExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByTaskID = `-- name: ListToolExecutionsByTaskID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND task_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByTaskID(ctx context.Context, taskID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByToolID = `-- name: ListToolExecutionsByToolID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND tool_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByToolID(ctx context.Context, toolID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByToolID, toolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByWorkflowExecID = `-- name: ListToolExecutionsByWorkflowExecID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND workflow_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByWorkflowExecID(ctx context.Context, workflowExecID core.ID) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByWorkflowExecID, workflowExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolExecutionsByWorkflowID = `-- name: ListToolExecutionsByWorkflowID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'tool' AND workflow_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListToolExecutionsByWorkflowID(ctx context.Context, workflowID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listToolExecutionsByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
