// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const getTaskExecutionByExecID = `-- name: GetTaskExecutionByExecID :one
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'task' AND task_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetTaskExecutionByExecID(ctx context.Context, taskExecID sql.NullString) (Execution, error) {
	row := q.db.QueryRowContext(ctx, getTaskExecutionByExecID, taskExecID)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.ComponentType,
		&i.WorkflowID,
		&i.WorkflowExecID,
		&i.TaskID,
		&i.TaskExecID,
		&i.AgentID,
		&i.AgentExecID,
		&i.ToolID,
		&i.ToolExecID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTaskExecutionsByStatus = `-- name: ListTaskExecutionsByStatus :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'task' AND status = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskExecutionsByStatus(ctx context.Context, status string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listTaskExecutionsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskExecutionsByTaskID = `-- name: ListTaskExecutionsByTaskID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'task' AND task_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskExecutionsByTaskID(ctx context.Context, taskID sql.NullString) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listTaskExecutionsByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskExecutionsByWorkflowExecID = `-- name: ListTaskExecutionsByWorkflowExecID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'task' AND workflow_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskExecutionsByWorkflowExecID(ctx context.Context, workflowExecID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listTaskExecutionsByWorkflowExecID, workflowExecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskExecutionsByWorkflowID = `-- name: ListTaskExecutionsByWorkflowID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'task' AND workflow_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskExecutionsByWorkflowID(ctx context.Context, workflowID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listTaskExecutionsByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
