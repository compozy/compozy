// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: executions.sql

package db

import (
	"context"
	"database/sql"
)

const deleteExecution = `-- name: DeleteExecution :exec
DELETE FROM executions WHERE key = ?1
`

func (q *Queries) DeleteExecution(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteExecution, key)
	return err
}

const getExecutionByKey = `-- name: GetExecutionByKey :one
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE key = ?1
`

func (q *Queries) GetExecutionByKey(ctx context.Context, key string) (Execution, error) {
	row := q.db.QueryRowContext(ctx, getExecutionByKey, key)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.ComponentType,
		&i.WorkflowID,
		&i.WorkflowExecID,
		&i.TaskID,
		&i.TaskExecID,
		&i.AgentID,
		&i.AgentExecID,
		&i.ToolID,
		&i.ToolExecID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertExecution = `-- name: UpsertExecution :exec
INSERT INTO executions (
    component_type,
    workflow_id,
    workflow_exec_id,
    task_id,
    task_exec_id,
    agent_id,
    agent_exec_id,
    tool_id,
    tool_exec_id,
    key,
    status,
    data,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9,
    ?10,
    ?11,
    ?12,
    CURRENT_TIMESTAMP
) ON CONFLICT(key) DO UPDATE SET
    status = excluded.status,
    data = excluded.data,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertExecutionParams struct {
	ComponentType  string         `db:"component_type" json:"component_type"`
	WorkflowID     string         `db:"workflow_id" json:"workflow_id"`
	WorkflowExecID string         `db:"workflow_exec_id" json:"workflow_exec_id"`
	TaskID         sql.NullString `db:"task_id" json:"task_id"`
	TaskExecID     sql.NullString `db:"task_exec_id" json:"task_exec_id"`
	AgentID        sql.NullString `db:"agent_id" json:"agent_id"`
	AgentExecID    sql.NullString `db:"agent_exec_id" json:"agent_exec_id"`
	ToolID         sql.NullString `db:"tool_id" json:"tool_id"`
	ToolExecID     sql.NullString `db:"tool_exec_id" json:"tool_exec_id"`
	Key            string         `db:"key" json:"key"`
	Status         string         `db:"status" json:"status"`
	Data           interface{}    `db:"data" json:"data"`
}

func (q *Queries) UpsertExecution(ctx context.Context, arg UpsertExecutionParams) error {
	_, err := q.db.ExecContext(ctx, upsertExecution,
		arg.ComponentType,
		arg.WorkflowID,
		arg.WorkflowExecID,
		arg.TaskID,
		arg.TaskExecID,
		arg.AgentID,
		arg.AgentExecID,
		arg.ToolID,
		arg.ToolExecID,
		arg.Key,
		arg.Status,
		arg.Data,
	)
	return err
}
