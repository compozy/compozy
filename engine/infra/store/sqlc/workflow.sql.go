// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow.sql

package db

import (
	"context"
)

const getWorkflowExecutionByExecID = `-- name: GetWorkflowExecutionByExecID :one
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'workflow' AND workflow_exec_id = ?1
ORDER BY created_at DESC
`

func (q *Queries) GetWorkflowExecutionByExecID(ctx context.Context, workflowExecID string) (Execution, error) {
	row := q.db.QueryRowContext(ctx, getWorkflowExecutionByExecID, workflowExecID)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.ComponentType,
		&i.WorkflowID,
		&i.WorkflowExecID,
		&i.TaskID,
		&i.TaskExecID,
		&i.AgentID,
		&i.AgentExecID,
		&i.ToolID,
		&i.ToolExecID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWorkflowExecutions = `-- name: ListWorkflowExecutions :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'workflow'
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflowExecutions(ctx context.Context) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflowExecutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowExecutionsByStatus = `-- name: ListWorkflowExecutionsByStatus :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE component_type = 'workflow' AND status = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflowExecutionsByStatus(ctx context.Context, status string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflowExecutionsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowExecutionsByWorkflowID = `-- name: ListWorkflowExecutionsByWorkflowID :many
SELECT id, "key", component_type, workflow_id, workflow_exec_id, task_id, task_exec_id, agent_id, agent_exec_id, tool_id, tool_exec_id, status, data, created_at, updated_at
FROM executions
WHERE workflow_id = ?1 AND component_type = 'workflow'
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflowExecutionsByWorkflowID(ctx context.Context, workflowID string) ([]Execution, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflowExecutionsByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.ComponentType,
			&i.WorkflowID,
			&i.WorkflowExecID,
			&i.TaskID,
			&i.TaskExecID,
			&i.AgentID,
			&i.AgentExecID,
			&i.ToolID,
			&i.ToolExecID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
