name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  # Validate release prerequisites
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # Extract version (remove 'v' prefix if present)
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease
          if echo "$VERSION" | grep -qE '-(alpha|beta|rc|pre)'; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Release Information:"
          echo "- Tag: $TAG"
          echo "- Version: $VERSION"
          echo "- Prerelease: $(echo "$VERSION" | grep -qE '-(alpha|beta|rc|pre)' && echo "true" || echo "false")"

      - name: Validate tag format
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          VERSION="${{ steps.version.outputs.version }}"

          # Validate semantic versioning format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi

          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag exists
        run: |
          TAG="${{ steps.version.outputs.tag }}"

          if ! git tag -l | grep -q "^$TAG$"; then
            echo "❌ Tag $TAG does not exist"
            exit 1
          fi

          echo "✅ Tag $TAG exists"

  # Main release job using GoReleaser
  release:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs:
      - validate-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific tag for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "Checking out tag: $TAG"
          git checkout "refs/tags/$TAG"

      - name: Set up Go with caching
        uses: ./.github/actions/setup-go
        with:
          go-version: "1.24.x"
          install-tools: "false"

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.2.4"

      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0
        with:
          syft-version: latest

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: v2.11.2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          AUR_KEY: ${{ secrets.AUR_KEY }}
          COSIGN_EXPERIMENTAL: 1
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Release ${{ needs.validate-release.outputs.version }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease:** ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Multi-platform binaries (Linux, macOS, Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Container images (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Checksums and signatures" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Release notes and changelog" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Container Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- `ghcr.io/compozy/compozy:${{ needs.validate-release.outputs.version }}`" >> $GITHUB_STEP_SUMMARY
          echo "- `ghcr.io/compozy/compozy:latest`" >> $GITHUB_STEP_SUMMARY

  # Post-release validation
  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - validate-release
      - release
    if: always() && needs.release.result == 'success'

    steps:
      - name: Validate GitHub release
        run: |
          echo "Validating GitHub release..."

          # Check if release exists
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.validate-release.outputs.tag }}"

          if curl -s -f -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$RELEASE_URL" > /dev/null; then
            echo "✅ GitHub release exists"
          else
            echo "❌ GitHub release not found"
            exit 1
          fi

      - name: Validate container images
        run: |
          echo "Validating container images..."

          # Check if container images exist
          VERSION="${{ needs.validate-release.outputs.version }}"

          for arch in amd64 arm64; do
            IMAGE="ghcr.io/compozy/compozy:${VERSION}-${arch}"
            if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
              echo "✅ Container image exists: $IMAGE"
            else
              echo "❌ Container image not found: $IMAGE"
              exit 1
            fi
          done

          # Check multi-arch manifest
          MANIFEST_IMAGE="ghcr.io/compozy/compozy:${VERSION}"
          if docker manifest inspect "$MANIFEST_IMAGE" > /dev/null 2>&1; then
            echo "✅ Multi-arch manifest exists: $MANIFEST_IMAGE"
          else
            echo "❌ Multi-arch manifest not found: $MANIFEST_IMAGE"
            exit 1
          fi

      - name: Create validation summary
        run: |-
          echo "## Post-Release Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All release artifacts validated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Validated:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container images published" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-architecture manifests created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Release ${{ needs.validate-release.outputs.version }} is ready for use!*
