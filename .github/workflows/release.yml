name: Release

on:
  # Trigger on push to main for Release PR creation/update
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE/**"

  # Trigger on PR events for dry-run checks
  pull_request:
    types:
      - synchronize  # Only on updates to existing PRs
    branches:
      - main

  # Manual trigger for emergency releases
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force a release even if no changes"
        required: false
        type: boolean
        default: false

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.24.x"
  NODE_VERSION: "22"
  INITIAL_VERSION: "v0.0.5"

permissions:
  contents: write
  packages: write
  pull-requests: write
  id-token: write
  attestations: write

jobs:
  # Job 1: Create or update Release PR
  release-pr:
    name: Create/Update Release PR
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: ./.github/actions/setup-git-cliff

      - name: Run PR Release Orchestrator
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          INITIAL_VERSION: ${{ env.INITIAL_VERSION }}
        run: |
          if [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            go run ./pkg/release pr-release --force --enable-rollback --ci-output
          else
            go run ./pkg/release pr-release --enable-rollback --ci-output
          fi

  # Job 2: Dry-run checks on Release PR
  dry-run:
    name: Dry-Run Release Check
    if: |
      github.event_name == 'pull_request' &&
      startsWith(github.event.pull_request.title, 'ci(release): Release ')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Release Tools
        uses: ./.github/actions/setup-release
        with:
          goreleaser-distribution: goreleaser-pro
          setup-docker: false
          setup-docker-login: false

      - name: Run Dry-Run Orchestrator
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_ISSUE_NUMBER: ${{ github.event.pull_request.number }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
        run: go run ./pkg/release dry-run --ci-output

  # Job 3: Production release on merge
  release:
    name: Production Release
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      contains(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Setup Release Tools
        uses: ./.github/actions/setup-release
        with:
          goreleaser-distribution: goreleaser-pro
          setup-docker: true
          setup-docker-login: true
          setup-qemu: true
          docker-registry: ghcr.io
          docker-username: ${{ github.actor }}
          docker-token: ${{ secrets.RELEASE_TOKEN }}
          cosign-version: "v2.2.4"

      - name: Run Release Orchestrator
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          INITIAL_VERSION: ${{ env.INITIAL_VERSION }}
        run: go run ./pkg/release release --skip-npm --ci-output

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: latest
          args: release --clean --release-notes=RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          AUR_KEY: ${{ secrets.AUR_KEY }}
          COSIGN_EXPERIMENTAL: 1
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
