name: Development Container Images

on:
  # Build on pull requests for testing
  pull_request:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile*"
      - "cluster/*.Dockerfile"
      - ".github/workflows/dev-containers.yml"

  # Build on pushes to feature branches
  push:
    branches-ignore:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile*"
      - "cluster/*.Dockerfile"
      - ".github/workflows/dev-containers.yml"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build containers for"
        required: false
        default: ""
        type: string

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  # Determine what to build based on changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      main-app: ${{ steps.changes.outputs.main-app }}
      mcp-proxy: ${{ steps.changes.outputs.mcp-proxy }}
      branch-name: ${{ steps.branch.outputs.branch-name }}
      container-tag: ${{ steps.branch.outputs.container-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            main-app:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'Dockerfile*'
              - '!cluster/**'
            mcp-proxy:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'cluster/*.Dockerfile'
              - 'pkg/mcp-proxy/**'

      - name: Determine branch and tag
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.branch }}" ]; then
            BRANCH="${{ github.event.inputs.branch }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH="pr-${{ github.event.number }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi

          # Sanitize branch name for container tag
          CONTAINER_TAG=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')

          echo "branch-name=$BRANCH" >> $GITHUB_OUTPUT
          echo "container-tag=$CONTAINER_TAG" >> $GITHUB_OUTPUT

          echo "Branch: $BRANCH"
          echo "Container tag: $CONTAINER_TAG"

  # Build main application development container
  build-main-app:
    name: Build Main App Dev Container
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: changes
    if: needs.changes.outputs.main-app == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push development image
        id: build
        uses: ./.github/actions/docker-build
        with:
          dockerfile: ./cluster/Dockerfile.release
          context: .
          image-name: ghcr.io/compozy/compozy
          platforms: linux/amd64,linux/arm64
          push: 'true'
          labels: |
            org.opencontainers.image.title=Compozy (Development)
            org.opencontainers.image.description=Development build of Compozy Workflow Orchestration Engine
            org.opencontainers.image.url=https://github.com/compozy/compozy
            org.opencontainers.image.source=https://github.com/compozy/compozy
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            dev.compozy.branch=${{ needs.changes.outputs.branch-name }}
            dev.compozy.pr=${{ github.event.number }}

      - name: Test development container
        run: |
          echo "Testing development container..."

          # Get the built image tag from composite action metadata
          IMAGE_TAG=$(echo "${{ steps.build.outputs.metadata }}" | jq -r '.tags[0]')

          # Pull the built image
          docker pull "$IMAGE_TAG"

          # Test basic functionality
          if timeout 30s docker run --rm "$IMAGE_TAG" --version; then
            echo "✅ Development container test passed"
          else
            echo "❌ Development container test failed"
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const metadata = JSON.parse('${{ steps.build.outputs.metadata }}');
            const tags = metadata.tags || [];
            const primaryTag = tags[0] || 'ghcr.io/compozy/compozy:${{ needs.changes.outputs.container-tag }}';

            const comment = `## 🐳 Development Container Built

            A development container image has been built for this PR:

            **Main Application:**
            \`\`\`bash
            docker pull ${primaryTag}
            \`\`\`

            **Usage:**
            \`\`\`bash
            docker run --rm ${primaryTag} --help
            \`\`\`

            This image will be automatically cleaned up after the PR is merged or closed.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Build MCP Proxy development container
  build-mcp-proxy:
    name: Build MCP Proxy Dev Container
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: changes
    if: needs.changes.outputs.mcp-proxy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push MCP Proxy development image
        id: build
        uses: ./.github/actions/docker-build
        with:
          dockerfile: cluster/mcpproxy.release.Dockerfile
          context: .
          image-name: ghcr.io/compozy/mcp-proxy
          platforms: linux/amd64,linux/arm64
          push: 'true'
          labels: |
            org.opencontainers.image.title=Compozy MCP Proxy (Development)
            org.opencontainers.image.description=Development build of Model Context Protocol Proxy for Compozy
            org.opencontainers.image.url=https://github.com/compozy/compozy
            org.opencontainers.image.source=https://github.com/compozy/compozy
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            dev.compozy.branch=${{ needs.changes.outputs.branch-name }}
            dev.compozy.pr=${{ github.event.number }}

      - name: Test MCP Proxy development container
        run: |
          echo "Testing MCP Proxy development container..."

          # Get the built image tag from composite action metadata
          IMAGE_TAG=$(echo "${{ steps.build.outputs.metadata }}" | jq -r '.tags[0]')

          # Pull the built image
          docker pull "$IMAGE_TAG"

          # Test basic functionality
          if timeout 30s docker run --rm "$IMAGE_TAG" --version; then
            echo "✅ MCP Proxy development container test passed"
          else
            echo "❌ MCP Proxy development container test failed"
            exit 1
          fi

      - name: Update PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const metadata = JSON.parse('${{ steps.build.outputs.metadata }}');
            const tags = metadata.tags || [];
            const mcpProxyTag = tags[0] || 'ghcr.io/compozy/mcp-proxy:${{ needs.changes.outputs.container-tag }}';

            // Check if main app job was successful
            const mainAppSuccess = "${{ needs.build-main-app.result }}" === "success";
            const mainAppTag = 'ghcr.io/compozy/compozy:${{ needs.changes.outputs.container-tag }}';

            let comment = `## 🐳 Development Containers Built

            Development container images have been built for this PR:

            `;

            if (mainAppSuccess) {
              comment += `**Main Application:**
            \`\`\`bash
            docker pull ${mainAppTag}
            \`\`\`

            `;
            }

            comment += `**MCP Proxy:**
            \`\`\`bash
            docker pull ${mcpProxyTag}
            \`\`\`

            **Usage Examples:**
            \`\`\`bash`;

            if (mainAppSuccess) {
              comment += `
            # Run main application
            docker run --rm ${mainAppTag} --help`;
            }

            comment += `
            # Run MCP Proxy
            docker run --rm -p 8081:8081 ${mcpProxyTag}
            \`\`\`

            These images will be automatically cleaned up after the PR is merged or closed.`;

            // Try to find existing comment and update it
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('🐳 Development Container') && comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Validate development containers
  validate-containers:
    name: Validate Development Containers
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - changes
      - build-main-app
      - build-mcp-proxy
    if: always() && (needs.build-main-app.result == 'success' || needs.build-mcp-proxy.result == 'success')

    steps:
      - name: Validate container security
        run: |
          echo "Validating development container security..."

          # Install Trivy for security scanning
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          # Scan containers if they were built
          if [ "${{ needs.build-main-app.result }}" = "success" ]; then
            echo "Scanning main application container..."
            trivy image --severity HIGH,CRITICAL ghcr.io/compozy/compozy:${{ needs.changes.outputs.container-tag }} || echo "Security scan completed with findings"
          fi

          if [ "${{ needs.build-mcp-proxy.result }}" = "success" ]; then
            echo "Scanning MCP Proxy container..."
            trivy image --severity HIGH,CRITICAL ghcr.io/compozy/mcp-proxy:${{ needs.changes.outputs.container-tag }} || echo "Security scan completed with findings"
          fi

      - name: Create validation summary
        run: |-
          echo "## Development Container Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ needs.changes.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Container Tag:** ${{ needs.changes.outputs.container-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-main-app.result }}" = "success" ]; then
            echo "- ✅ Main application container built and tested" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-mcp-proxy.result }}" = "success" ]; then
            echo "- ✅ MCP Proxy container built and tested" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 🔒 Security scanning completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Ephemeral tags created for testing" >> $GITHUB_STEP_SUMMARY
