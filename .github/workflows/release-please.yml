name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  actions: write
  id-token: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      releases-created: ${{ steps.release.outputs.releases_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr-created: ${{ steps.release.outputs.pr_created }}
      pr-number: ${{ steps.release.outputs.pr_number }}
      paths-released: ${{ steps.release.outputs.paths_released }}

    steps:
      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Show Release Please outputs
        if: always()
        run: |
          echo "Release Please Results:"
          echo "- Releases created: ${{ steps.release.outputs.releases_created }}"
          echo "- Release created (main): ${{ steps.release.outputs.release_created }}"
          echo "- Tag name: ${{ steps.release.outputs.tag_name }}"
          echo "- Version: ${{ steps.release.outputs.version }}"
          echo "- PR created: ${{ steps.release.outputs.pr_created }}"
          echo "- PR number: ${{ steps.release.outputs.pr_number }}"
          echo "- Paths released: ${{ steps.release.outputs.paths_released }}"

          # Add to job summary
          echo "## Release Please Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.release.outputs.releases_created }}" = "true" ]; then
            echo "üéâ **Releases Created!**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.release.outputs.release_created }}" = "true" ]; then
              echo "### Main Package" >> $GITHUB_STEP_SUMMARY
              echo "- **Version:** ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Tag:** ${{ steps.release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "${{ steps.release.outputs.paths_released }}" ]; then
              echo "### Released Paths" >> $GITHUB_STEP_SUMMARY
              echo "${{ steps.release.outputs.paths_released }}" | tr ',' '\n' | while read -r path; do
                echo "- $path" >> $GITHUB_STEP_SUMMARY
              done
            fi
          elif [ "${{ steps.release.outputs.pr_created }}" = "true" ]; then
            echo "üìù **Release PR Created**" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number:**  #${{ steps.release.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è **No Release Action Needed**" >> $GITHUB_STEP_SUMMARY
            echo "No conventional commits found that warrant a release." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout code for release validation
        if: steps.release.outputs.release_created == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release tag
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "Validating release tag: ${{ steps.release.outputs.tag_name }}"

          # Check if tag exists
          if git tag -l | grep -q "^${{ steps.release.outputs.tag_name }}$"; then
            echo "‚úÖ Tag ${{ steps.release.outputs.tag_name }} exists"
          else
            echo "‚ùå Tag ${{ steps.release.outputs.tag_name }} not found"
            exit 1
          fi

          # Validate semantic versioning format
          if echo "${{ steps.release.outputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚úÖ Version ${{ steps.release.outputs.version }} follows semantic versioning"
          else
            echo "‚ùå Version ${{ steps.release.outputs.version }} does not follow semantic versioning"
            exit 1
          fi

      - name: Trigger release workflow
        if: steps.release.outputs.release_created == 'true'
        run: |-
          echo "üöÄ Release created - triggering release workflow"
          echo "The release workflow will be triggered by the tag push event"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Version: ${{ steps.release.outputs.version }}"

  # Publish npm packages job
  # This job runs when release-please creates a new release tag for the main package
  # It synchronizes all tool package versions to match the main version and publishes them
  npm-publish:
    name: Publish npm packages
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: ./.github/actions/setup-bun
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Sync tool versions
        run: |
          echo "Synchronizing tool versions to ${{ needs.release-please.outputs.version }}"
          ./scripts/sync-tool-versions.sh "${{ needs.release-please.outputs.version }}"

          # Check if there are changes to commit
          if ! git diff --quiet tools/*/package.json; then
            echo "Committing version updates..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add tools/*/package.json
            git commit -m "chore(tools): sync tool versions to v${{ needs.release-please.outputs.version }}"
            git push
          else
            echo "No version changes needed"
          fi

      - name: Publish npm packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: ./scripts/publish.sh
