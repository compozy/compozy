name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write
  actions: write
  id-token: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      releases-created: ${{ steps.release.outputs.releases_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr-created: ${{ steps.release.outputs.pr_created }}
      pr-number: ${{ steps.release.outputs.pr_number }}
      paths-released: ${{ steps.release.outputs.paths_released }}

    steps:
      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          # Release Please configuration
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

          # Token with appropriate permissions
          # Using PAT for creating pull requests
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Show Release Please outputs
        if: always()
        run: |
          echo "Release Please Results:"
          echo "- Releases created: ${{ steps.release.outputs.releases_created }}"
          echo "- Release created (main): ${{ steps.release.outputs.release_created }}"
          echo "- Tag name: ${{ steps.release.outputs.tag_name }}"
          echo "- Version: ${{ steps.release.outputs.version }}"
          echo "- PR created: ${{ steps.release.outputs.pr_created }}"
          echo "- PR number: ${{ steps.release.outputs.pr_number }}"
          echo "- Paths released: ${{ steps.release.outputs.paths_released }}"

          # Add to job summary with grouped commands to reduce shellcheck warnings
          # shellcheck disable=SC2086,SC2129
          {
            echo "## Release Please Results"
            echo ""
          } >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.release.outputs.releases_created }}" = "true" ]; then
            # shellcheck disable=SC2086
            echo "üéâ **Releases Created!**" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.release.outputs.release_created }}" = "true" ]; then
              # shellcheck disable=SC2086,SC2129
              {
                echo "### Main Package"
                echo "- **Version:** ${{ steps.release.outputs.version }}"
                echo "- **Tag:** ${{ steps.release.outputs.tag_name }}"
              } >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "${{ steps.release.outputs.paths_released }}" ]; then
              # shellcheck disable=SC2086
              echo "### Released Paths" >> $GITHUB_STEP_SUMMARY
              echo "${{ steps.release.outputs.paths_released }}" | tr ',' '\n' | while read -r path; do
                # shellcheck disable=SC2086
                echo "- $path" >> $GITHUB_STEP_SUMMARY
              done
            fi
          elif [ "${{ steps.release.outputs.pr_created }}" = "true" ]; then
            # shellcheck disable=SC2086,SC2129
            {
              echo "üìù **Release PR Created**"
              echo "- **PR Number:**  #${{ steps.release.outputs.pr_number }}"
            } >> $GITHUB_STEP_SUMMARY
          else
            # shellcheck disable=SC2086,SC2129
            {
              echo "‚ÑπÔ∏è **No Release Action Needed**"
              echo "No conventional commits found that warrant a release."
            } >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout code for release validation
        if: steps.release.outputs.release_created == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release tag
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "Validating release tag: ${{ steps.release.outputs.tag_name }}"

          # Check if tag exists
          if git tag -l | grep -q "^${{ steps.release.outputs.tag_name }}$"; then
            echo "‚úÖ Tag ${{ steps.release.outputs.tag_name }} exists"
          else
            echo "‚ùå Tag ${{ steps.release.outputs.tag_name }} not found"
            exit 1
          fi

          # Validate semantic versioning format
          if echo "${{ steps.release.outputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚úÖ Version ${{ steps.release.outputs.version }} follows semantic versioning"
          else
            echo "‚ùå Version ${{ steps.release.outputs.version }} does not follow semantic versioning"
            exit 1
          fi

      - name: Checkout Release PR branch for formatting
        if: steps.release.outputs.pr_created == 'true'
        uses: actions/checkout@v4
        with:
          # Check out the branch created by release-please
          ref: release-please-main
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Bun
        if: steps.release.outputs.pr_created == 'true'
        uses: ./.github/actions/setup-bun
        with:
          bun-version: latest

      - name: Format CHANGELOG.md in Release PR
        if: steps.release.outputs.pr_created == 'true'
        run: |
          echo "üìù Formatting CHANGELOG.md in PR #${{ steps.release.outputs.pr_number }}"

          # Format CHANGELOG.md and any related YAML files
          bun run format:yaml
          bunx prettier --write "CHANGELOG.md"

          # Commit and push if formatting made changes
          if ! git diff --quiet; then
            echo "üìù Files have been formatted. Committing changes..."
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "style: format generated files with prettier" -m "Automated formatting for release PR."
            git push
            echo "‚úÖ Pushed formatting changes to the release PR branch"
          else
            echo "‚úÖ All files are already formatted"
          fi

      - name: Trigger release workflow
        if: steps.release.outputs.release_created == 'true'
        run: |-
          echo "üöÄ Release created - triggering release workflow"
          echo "The release workflow will be triggered by the tag push event"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Version: ${{ steps.release.outputs.version }}"
