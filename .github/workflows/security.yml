name: Security Scanning

on:
  # Run on pull requests
  pull_request:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile*"
      - ".github/workflows/security.yml"

  # Run on pushes to main
  push:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile*"
      - ".github/workflows/security.yml"

  # Run daily at 2 AM UTC
  schedule:
    - cron: "0 2 * * *"

  # Allow manual triggering
  workflow_dispatch:

# Minimal permissions for security
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job matrix for different security scan types
  security-matrix:
    name: Security Scan Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      go-scan: ${{ steps.changes.outputs.go }}
      container-scan: ${{ steps.changes.outputs.container }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            container:
              - 'Dockerfile*'
              - 'cluster/*.Dockerfile'

  # Go vulnerability scanning with govulncheck
  go-vulnerability-scan:
    name: Go Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-matrix
    if: needs.security-matrix.outputs.go-scan == 'true' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go with caching
        uses: ./.github/actions/setup-go
        with:
          go-version: "1.24.x"
          install-tools: 'false'

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Update vulnerability database
        run: |
          echo "Updating Go vulnerability database..."
          govulncheck -version

      - name: Run govulncheck scan
        id: govulncheck
        run: |
          echo "Running Go vulnerability scan..."
          # Create reports directory
          mkdir -p security-reports

          # Run govulncheck with JSON output for parsing
          if govulncheck -json ./... > security-reports/govulncheck-report.json 2>&1; then
            echo "scan-result=success" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found"
          else
            echo "scan-result=vulnerabilities-found" >> $GITHUB_OUTPUT
            echo "Vulnerabilities detected - see report for details"
          fi

          # Also create human-readable report
          govulncheck ./... > security-reports/govulncheck-report.txt 2>&1 || true

      - name: Parse vulnerability results
        if: steps.govulncheck.outputs.scan-result == 'vulnerabilities-found'
        run: |
          echo "Parsing vulnerability scan results..."

          # Count vulnerabilities by severity (govulncheck doesn't provide severity levels directly)
          # We'll treat all findings as potentially critical since govulncheck only reports actionable vulnerabilities
          VULN_COUNT=$(grep -c "Vulnerability" security-reports/govulncheck-report.txt || echo "0")

          echo "Found $VULN_COUNT potential vulnerabilities"
          echo "vuln-count=$VULN_COUNT" >> $GITHUB_OUTPUT

          # Set failure threshold - fail on any vulnerability since govulncheck is conservative
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "CRITICAL: Vulnerabilities found that require immediate attention"
            echo "failure-threshold-exceeded=true" >> $GITHUB_OUTPUT
          else
            echo "failure-threshold-exceeded=false" >> $GITHUB_OUTPUT
          fi
        id: parse-results

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: go-vulnerability-reports
          path: security-reports/
          retention-days: 30

      - name: Create vulnerability summary
        if: always()
        run: |
          echo "## Go Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.govulncheck.outputs.scan-result }}" = "success" ]; then
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Vulnerability Count:** ${{ steps.parse-results.outputs.vuln-count || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the uploaded vulnerability reports for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail on critical vulnerabilities
        if: steps.parse-results.outputs.failure-threshold-exceeded == 'true'
        run: |
          echo "❌ Critical vulnerabilities found - failing the build"
          echo "Please review and address the vulnerabilities before proceeding"
          exit 1
  # Container image security scanning with Trivy
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-matrix
    if: needs.security-matrix.outputs.container-scan == 'true' || github.event_name == 'schedule'

    strategy:
      matrix:
        target:
          - dockerfile: "Dockerfile"
            context: "."
            image: "compozy-main"
          - dockerfile: "cluster/mcpproxy.Dockerfile"
            context: "."
            image: "compozy-mcpproxy"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.target.context }}
          file: ${{ matrix.target.dockerfile }}
          tags: ${{ matrix.target.image }}:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ matrix.target.image }}:scan
          format: "sarif"
          output: "trivy-results-${{ matrix.target.image }}.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0"  # Don't fail here, we'll handle it in next step

      - name: Run Trivy for human-readable report
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ matrix.target.image }}:scan
          format: "table"
          output: "trivy-results-${{ matrix.target.image }}.txt"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0"

      - name: Parse Trivy results
        id: parse-trivy
        run: |
          echo "Parsing Trivy scan results for ${{ matrix.target.image }}..."

          # Count vulnerabilities by severity
          CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results-${{ matrix.target.image }}.txt || echo "0")
          HIGH_COUNT=$(grep -c "HIGH" trivy-results-${{ matrix.target.image }}.txt || echo "0")
          MEDIUM_COUNT=$(grep -c "MEDIUM" trivy-results-${{ matrix.target.image }}.txt || echo "0")

          echo "Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT"
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium-count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT

          # Set failure threshold - fail on critical vulnerabilities
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "CRITICAL: Critical vulnerabilities found in ${{ matrix.target.image }}"
            echo "critical-failure=true" >> $GITHUB_OUTPUT
          else
            echo "critical-failure=false" >> $GITHUB_OUTPUT
          fi

          # Calculate total vulnerability count
          TOTAL_COUNT=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT))
          echo "total-count=$TOTAL_COUNT" >> $GITHUB_OUTPUT

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-${{ matrix.target.image }}.sarif"
          category: "container-${{ matrix.target.image }}"

      - name: Upload Trivy scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-reports-${{ matrix.target.image }}
          path: |
            trivy-results-${{ matrix.target.image }}.sarif
            trivy-results-${{ matrix.target.image }}.txt
          retention-days: 30

      - name: Create container security summary
        if: always()
        run: |
          echo "## Container Security Scan Results - ${{ matrix.target.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ matrix.target.image }}:scan" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** ${{ matrix.target.dockerfile }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Vulnerability Summary:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Critical: ${{ steps.parse-trivy.outputs.critical-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🟠 High: ${{ steps.parse-trivy.outputs.high-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Medium: ${{ steps.parse-trivy.outputs.medium-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total: ${{ steps.parse-trivy.outputs.total-count }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.parse-trivy.outputs.critical-failure }}" = "true" ]; then
            echo "⚠️ **Action Required:** Critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Block release on critical vulnerabilities
        if: steps.parse-trivy.outputs.critical-failure == 'true'
        run: |
          echo "❌ Critical vulnerabilities found in ${{ matrix.target.image }} - blocking release"
          echo "Please address critical vulnerabilities before proceeding with release"
          exit 1
  # Dependabot auto-merge for non-breaking updates
  dependabot-auto-merge:
    name: Dependabot Auto-merge
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge patch updates only
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          echo "Auto-merging ${{ steps.metadata.outputs.update-type }} update"
          echo "Dependency: ${{ steps.metadata.outputs.dependency-names }}"
          echo "Update type: ${{ steps.metadata.outputs.update-type }}"

          # Wait for CI checks to complete
          gh pr checks --watch

          # Enable auto-merge
          gh pr merge --auto --squash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on security updates
        if: steps.metadata.outputs.alert-state == 'FIXED'
        run: |
          gh pr comment --body "🔒 **Security Update Detected**

          This PR fixes a security vulnerability:
          - **Package:** ${{ steps.metadata.outputs.dependency-names }}
          - **Alert State:** ${{ steps.metadata.outputs.alert-state }}
          - **Severity:** ${{ steps.metadata.outputs.cvss }}

          This update will be prioritized for review and merge."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Label security updates
        if: steps.metadata.outputs.alert-state == 'FIXED'
        run: |
          gh pr edit --add-label "security" --add-label "priority-high"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # SBOM generation for supply chain transparency
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go with caching
        uses: ./.github/actions/setup-go
        with:
          go-version: "1.24.x"
          install-tools: 'false'

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version

      - name: Generate SBOM for source code
        run: |
          echo "Generating SBOM for source code..."
          mkdir -p sbom-reports

          # Generate SPDX SBOM for source
          syft . -o spdx-json=sbom-reports/compozy-source.spdx.json
          syft . -o spdx-tag=sbom-reports/compozy-source.spdx

          # Generate CycloneDX SBOM for broader compatibility
          syft . -o cyclonedx-json=sbom-reports/compozy-source.cyclonedx.json

          echo "Source SBOM generation completed"

      - name: Build binary for SBOM analysis
        run: |
          echo "Building binary for SBOM analysis..."
          go build -o compozy-binary ./main.go

      - name: Generate SBOM for binary
        run: |
          echo "Generating SBOM for binary..."

          # Generate SPDX SBOM for binary
          syft compozy-binary -o spdx-json=sbom-reports/compozy-binary.spdx.json
          syft compozy-binary -o spdx-tag=sbom-reports/compozy-binary.spdx

          # Generate CycloneDX SBOM for binary
          syft compozy-binary -o cyclonedx-json=sbom-reports/compozy-binary.cyclonedx.json

          echo "Binary SBOM generation completed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container images for SBOM
        run: |
          echo "Building container images for SBOM analysis..."

          # Build main application image
          docker build -t compozy-main:sbom -f Dockerfile .

          # Build MCP proxy image if Dockerfile exists
          if [ -f "cluster/mcpproxy.Dockerfile" ]; then
            docker build -t compozy-mcpproxy:sbom -f cluster/mcpproxy.Dockerfile .
          fi

      - name: Generate SBOM for container images
        run: |
          echo "Generating SBOM for container images..."

          # Generate SBOM for main application container
          syft compozy-main:sbom -o spdx-json=sbom-reports/compozy-main-container.spdx.json
          syft compozy-main:sbom -o spdx-tag=sbom-reports/compozy-main-container.spdx
          syft compozy-main:sbom -o cyclonedx-json=sbom-reports/compozy-main-container.cyclonedx.json

          # Generate SBOM for MCP proxy container if it exists
          if docker image inspect compozy-mcpproxy:sbom >/dev/null 2>&1; then
            syft compozy-mcpproxy:sbom -o spdx-json=sbom-reports/compozy-mcpproxy-container.spdx.json
            syft compozy-mcpproxy:sbom -o spdx-tag=sbom-reports/compozy-mcpproxy-container.spdx
            syft compozy-mcpproxy:sbom -o cyclonedx-json=sbom-reports/compozy-mcpproxy-container.cyclonedx.json
          fi

          echo "Container SBOM generation completed"

      - name: Validate SBOM files
        run: |
          echo "Validating generated SBOM files..."

          # Check that SBOM files were created and are not empty
          for sbom_file in sbom-reports/*.spdx.json sbom-reports/*.cyclonedx.json; do
            if [ -f "$sbom_file" ]; then
              size=$(stat -c%s "$sbom_file")
              if [ "$size" -gt 100 ]; then
                echo "✅ $sbom_file: Valid (${size} bytes)"
              else
                echo "❌ $sbom_file: Too small (${size} bytes)"
                exit 1
              fi
            else
              echo "❌ $sbom_file: Not found"
              exit 1
            fi
          done

          echo "All SBOM files validated successfully"

      - name: Generate SBOM compliance report
        run: |
          echo "Generating SBOM compliance report..."

          # Create a summary report
          cat > sbom-reports/sbom-summary.md << 'EOF'
          # Software Bill of Materials (SBOM) Summary

          Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Commit: ${{ github.sha }}

          ## Generated SBOMs

          ### Source Code
          - SPDX JSON: compozy-source.spdx.json
          - SPDX Tag-Value: compozy-source.spdx
          - CycloneDX JSON: compozy-source.cyclonedx.json

          ### Binary Artifacts
          - SPDX JSON: compozy-binary.spdx.json
          - SPDX Tag-Value: compozy-binary.spdx
          - CycloneDX JSON: compozy-binary.cyclonedx.json

          ### Container Images
          - Main Application: compozy-main-container.spdx.json, compozy-main-container.cyclonedx.json
          - MCP Proxy: compozy-mcpproxy-container.spdx.json, compozy-mcpproxy-container.cyclonedx.json

          ## Compliance

          - ✅ SPDX 2.3 compliant
          - ✅ CycloneDX 1.4 compliant
          - ✅ NTIA minimum elements included
          - ✅ Supply chain transparency enabled

          EOF

          # Replace variables in the markdown
          sed -i "s/\$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")/$(date -u +"%Y-%m-%d %H:%M:%S UTC")/g" sbom-reports/sbom-summary.md

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: sbom-reports/
          retention-days: 90

      - name: Create SBOM summary
        run: |
          echo "## SBOM Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SBOM generation completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated SBOMs:**" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Source code SBOMs (SPDX, CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Binary artifact SBOMs (SPDX, CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Container image SBOMs (SPDX, CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SPDX 2.3 compliant" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CycloneDX 1.4 compliant" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ NTIA minimum elements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 All SBOM files have been uploaded as workflow artifacts."

  # Secret scanning with GitLeaks
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    needs: security-matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comprehensive scanning
      - name: Run GitLeaks secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 7

      - name: Create secret scan summary
        if: always()
        run: |-
          echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f results.sarif ]; then
            echo "⚠️ **Secrets detected!** Please review the security tab for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review detected secrets in the Security tab" >> $GITHUB_STEP_SUMMARY
            echo "2. Remove or invalidate any exposed credentials" >> $GITHUB_STEP_SUMMARY
            echo "3. Update secrets management practices" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No secrets detected in the repository**" >> $GITHUB_STEP_SUMMARY
          fi
