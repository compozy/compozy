id: pokemon
version: 0.2.0
description: Analyze media about a Pokémon using unified attachments and a router

schemas:
  - id: media_input
    type: object
    properties:
      kind:
        type: string
        enum:
          - image
          - audio
          - video
      ref:
        type: string
        description: URL or relative path depending on kind
    required:
      - kind
      - ref

config:
  input: media_input

agents:
  - id: image_analyzer
    model:
      provider: openai
      model: gpt-4o-mini
      api_key: "{{ .env.OPENAI_API_KEY }}"
    instructions: |
      You are a precise Pokémon image analysis assistant. Analyze provided images and extract Pokémon names.
    actions:
      - id: analyze_image
        prompt: |
          Identify the Pokémon in the provided image and return JSON only with:
          - pokemon (string)
          - confidence (0-1)
        output:
          type: object
          properties:
            pokemon: {type: string}
            confidence: {type: number}
          required:
            - pokemon
            - confidence

  - id: media_analyzer
    model:
      provider: google
      model: gemini-2.5-flash
      api_key: "{{ .env.GOOGLE_API_KEY }}"
    instructions: |
      You are a precise Pokémon media analysis assistant. Analyze provided audio and video content and extract Pokémon names.
    actions:
      - id: analyze_audio
        prompt: |
          Given an audio clip related to a Pokémon, return JSON with the likely pokemon (string) and confidence (0-1).
        output:
          type: object
          properties:
            pokemon: {type: string}
            confidence: {type: number}
          required:
            - pokemon
            - confidence
      - id: analyze_video
        prompt: |
          Given a short video related to a Pokémon, return JSON with the likely pokemon (string) and confidence (0-1).
        output:
          type:
          properties:
            pokemon: {type: string}
            confidence: {type: number}
          required:
            - pokemon
            - confidence

tasks:
  - id: route-by-kind
    type: router
    action: route_media
    condition: 'workflow.input.kind'
    routes:
      image: analyze_image
      audio: analyze_audio
      video: analyze_video

  - id: analyze_image
    type: basic
    agent: image_analyzer
    action: analyze_image
    attachments:
      - type: image
        path: "{{ .workflow.input.ref }}"
    final: true

  - id: analyze_audio
    type: basic
    agent: media_analyzer
    action: analyze_audio
    attachments:
      - type: audio
        path: "{{ .workflow.input.ref }}"
    final: true

  - id: analyze_video
    type: basic
    agent: media_analyzer
    action: analyze_video
    attachments:
      - type: video
        path: "{{ .workflow.input.ref }}"
    final: true

outputs:
  kind: "{{ .workflow.input.kind }}"
  # Select the pokemon from the route that actually ran
  pokemon: |
    {{- if eq .workflow.input.kind "image" -}}
      {{ .tasks.analyze_image.output.pokemon }}
    {{- else if eq .workflow.input.kind "audio" -}}
      {{ .tasks.analyze_audio.output.pokemon }}
    {{- else -}}
      {{ .tasks.analyze_video.output.pokemon }}
    {{- end -}}
  # Confidence is optional in the agent schema; guard for missing key
  confidence: |-
    {{- if eq .workflow.input.kind "image" -}}
      {{- if hasKey .tasks.analyze_image.output "confidence" -}}{{ .tasks.analyze_image.output.confidence }}{{- else -}}0{{- end -}}
    {{- else if eq .workflow.input.kind "audio" -}}
      {{- if hasKey .tasks.analyze_audio.output "confidence" -}}{{ .tasks.analyze_audio.output.confidence }}{{- else -}}0{{- end -}}
    {{- else -}}
      {{- if hasKey .tasks.analyze_video.output "confidence" -}}{{ .tasks.analyze_video.output.confidence }}{{- else -}}0{{- end -}}
    {{- end -}}
