id: github_mcp
version: 0.1.0
description: Fetch the most recent pull request from a GitHub repository using MCP

schemas:
  - id: repo_input
    type: object
    properties:
      repository:
        type: string
        description: GitHub repository in the format owner/repo
        examples:
          - "vercel/next.js"
          - "compozy/compozy"
    required:
      - repository

config:
  input:
    $ref: local::schemas.#(id=="repo_input")

mcps:
  - id: github-mcp
    transport: streamable-http
    url: "https://api.githubcopilot.com/mcp"
    headers:
      Authorization: "Bearer {{ .env.GITHUB_TOKEN }}"

agents:
  - id: github_assistant
    instructions: |
      You are a GitHub assistant. Given an input repository string like "owner/repo",
      split it into `owner` and `repo`, then use only readâ€‘only MCP tools to fetch
      pull requests (prefer `list_pull_requests`). Request open PRs, sorted by last
      update in descending order, limited to the first page. After selecting the latest
      PR, retrieve how many files were edited in that PR. Prefer `get_pull_request`
      if it returns `changed_files`; otherwise call `get_pull_request_files` and count.
      Also capture the PR author's login (e.g., `user.login` or `author.login`). Do NOT
      call tools that are not present in request.tools; only use tools explicitly listed.

      Pick the most recently updated PR and respond with JSON only containing at
      least {"number", "title", "state", "html_url", "changed_files", "author"}.
      If the API uses different casing, pass through what it returns and include
      stable aliases: `changed_files` (number), `author` (login). On any failure, return
      {"error":"reason"}.
    json_mode: true
    actions:
      - id: get_last_pull_request
        json_mode: true
        prompt: |
          Repository: {{ .input.repository }}
          Use an available GitHub MCP tool to list pull requests for the repository above.
          Use ONLY read-only tools; do not use any tool that creates, updates, or comments on pull requests.
          If the tool requires separate fields, set owner and repo by splitting the repository on '/':
          owner = part before '/', repo = part after '/'.
          When calling list_pull_requests, set (if supported): sort="updated", direction="desc", state="open", perPage=10.
          If parameter names differ, map to the tool's exact names.
          After the tool response, pick the single most recently updated PR. Then fetch the number of files changed:
          - Prefer a detail call like get_pull_request to read a numeric changed_files value.
          - If unavailable, list PR files and count them locally.
          Also capture the PR author's login (e.g., user.login). Only use tools present in request.tools.
          Return JSON only with at least {"number", "title", "state", "html_url", "changed_files", "author"}.
          If no suitable tool exists or any call fails, return {"error": "reason"}.

tasks:
  - id: latest_pr
    type: basic
    $use: agent(local::agents.#(id="github_assistant"))
    action: get_last_pull_request
    with:
      repository: "{{ .workflow.input.repository }}"
    final: true

outputs:
  repository: "{{ .workflow.input.repository }}"
  latest_pull_request: "{{ .tasks.latest_pr.output }}"
