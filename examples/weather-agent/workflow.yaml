id: weather-agent
version: 0.1.0
description: A simple weather agent that provides weather information based on location

schemas:
  - id: cities_input
    type: object
    properties:
      cities:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: The city name to get weather information for
            priority:
              type: string
              enum: ["high", "medium", "low"]
              description: Priority level for processing this city
              default: "medium"
            skip_if_weather:
              type: array
              items:
                type: string
              description: Skip this city if weather contains any of these conditions
              default: []
          required:
            - name
        description: List of cities to get weather information for
        minItems: 1
      max_parallel:
        type: integer
        minimum: 1
        maximum: 10
        default: 3
        description: Maximum number of cities to process in parallel
      filter_priority:
        type: string
        enum: ["high", "medium", "low", "all"]
        default: "all"
        description: Only process cities with this priority level or higher
    required:
      - cities

  - id: city_input
    type: object
    properties:
      city:
        type: string
        description: The city to get weather information for
    required:
      - city

config:
  input:
    $ref: local::schemas.#(id=="cities_input")

tools:
  - id: weather_tool
    description: Get the current weather for a specific location
    execute: ./weather_tool.ts
    input:
      $ref: local::schemas.#(id=="city_input")

  - id: save_data
    description: Save the weather data to a file
    execute: ./save_tool.ts

agents:
  - id: tourist_guide
    config:
      $ref: global::models.#(provider=="groq")
    instructions: |
      You are a helpful tourist guide assistant specialized in providing weather information and travel recommendations.
      In this context, you are working with the city: {{ .city.name }}
      That's your capabilities:
      - You can use the `weather_tool` to fetch weather data (just when necessary and asked about it)
      - You can provide thoughtful recommendations for activities based on weather data.
      - You can suggest clothing to use for specific activities and weather
      Always respond in valid JSON format.
    actions:
      - id: get_weather
        prompt: |
          What is the current weather in {{ .city.name }}?
        tools:
          - $ref: local::tools.#(id=="weather_tool")
      - id: suggest_activities
        json_mode: true
        prompt: |
          Given the current conditions in {{ .city.name }}: {{ .weather.output | toJson }}
          Suggest appropriate activities specifically for {{ .city.name }} for these weather conditions
          Return a list of activities as an array of strings in JSON format.
      - id: suggest_clothing
        prompt: |
          Given the current conditions in {{ .city.name }}:
          - Weather: {{ .weather.output | toJson }}
          - Activities: {{ .activities.output | toJson }}
          Suggest appropriate clothing items based on the information above.
        output:
          type: object
          properties:
            clothings:
              type: array
              items:
                type: string
              description: List of recommending clothing items
          required:
            - clothings

tasks:
  - id: process_cities
    type: collection
    items: "{{ .input.cities }}"
    mode: parallel
    max_workers: 2
    strategy: best_effort
    continue_on_error: true
    item_var: city
    index_var: city_index
    timeout: 60s
    task:
      id: weather_for_city
      type: basic
      $use: tool(local::tools.#(id=="weather_tool"))
      with:
        city: "{{ .workflow.input.city.name }}"
      outputs:
        temperature: "{{ .output.temperature }}"
        humidity: "{{ .output.humidity }}"
        weather: "{{ .output.weather }}"
        timestamp: "{{ now }}"
    final: true
