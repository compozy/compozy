id: weather-agent
version: 0.1.0
description: A simple weather agent that provides weather information based on location

schemas:
  - id: city_input
    type: object
    properties:
      city:
        type: string
        description: The city to get weather information for
    required: [city]

  - id: weather_output
    type: object
    properties:
      temperature:
        type: number
        description: Current temperature
      humidity:
        type: number
        description: Current humidity percentage
      weather:
        type: string
        description: Weather condition description

config:
  input:
    $ref: local::schemas.#(id=="city_input")

tools:
  - id: weather_tool
    description: Get the current weather for a specific location
    execute: ./weather_tool.ts
    input:
      $ref: local::schemas.#(id=="city_input")
    output:
      $ref: local::schemas.#(id=="weather_output")

  - id: save_data
    description: Save the weather data to a file
    execute: ./save_tool.ts
    output:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the weather data was saved successfully

agents:
  - id: inline_agent
    config:
      $ref: global::models.#(provider=="groq")
    instructions: |
      You are a helpful weather assistant that provides accurate weather information.
      Your primary function is to help users get weather details for specific locations.
      When responding:
        - Keep responses concise but informative
        - Format temperature according in Celsius
        - Provide weather information and clothing suggestions based on conditions
      Use the weather_tool to fetch current weather data.
    tools:
      - $use: tool(local::tools.#(id=="weather_tool"))
    actions:
      - id: get_current_weather
        prompt: What is the weather in {{ .parent.input.city }}?
        output:
          type: object
          properties:
            $merge:
              - $ref: local::schemas.#(id=="city_input")
              - $ref: local::schemas.#(id=="weather_output")

      - id: suggest_activities
        prompt: |
          Given the current conditions in {{ .parent.input.city }}:
          - Weather: {{ .parent.input.weather }}
          - Temperature: {{ .parent.input.temperature }}°C
          Suggest appropriate activities specifically from {{ .parent.input.city }} for these weather conditions
        output:
          type: object
          properties:
            activities:
              type: array
              items:
                type: string
              description: List of suggested activities based on the weather conditions

      - id: suggest_clothing
        prompt: |
          Given the current conditions in {{ .parent.input.city }}:
          - Weather: {{ .parent.input.weather }} at {{ .parent.input.temperature }}°C
          - Planned activities: {{ .parent.input.activities }}
        output:
          type: object
          properties:
            clothing:
              type: array
              items:
                type: string
              description: List of recommended clothing items

tasks:
  - id: get_current_weather
    type: basic
    $use: agent(local::agents.#(id="inline_agent"))
    action: get_current_weather
    with:
      city: "{{ .workflow.input.city }}"
    on_success:
      next: suggest_activities

  - id: suggest_activities
    type: basic
    $use: agent(local::agents.#(id="inline_agent"))
    action: suggest_activities
    with:
      city: "{{ .workflow.input.city }}"
      temperature: "{{ .tasks.get_current_weather.output.temperature }}"
      weather: "{{ .tasks.get_current_weather.output.weather }}"
    on_success:
      next: suggest_clothing

  - id: suggest_clothing
    type: basic
    $use: agent(local::agents.#(id="inline_agent"))
    action: suggest_clothing
    with:
      city: "{{ .workflow.input.city }}"
      temperature: "{{ .tasks.get_current_weather.output.temperature }}"
      weather: "{{ .tasks.get_current_weather.output.weather }}"
      activities: "{{ .tasks.suggest_activities.output.activities }}"
    on_success:
      next: save_weather_data

  - id: save_weather_data
    type: basic
    $use: tool(local::tools.#(id="save_data"))
    final: true
    with:
      city: "{{ .workflow.input.city }}"
      temperature: "{{ .tasks.get_current_weather.output.temperature }}"
      weather: "{{ .tasks.get_current_weather.output.weather }}"
      clothing: "{{ .tasks.suggest_clothing.output.clothing }}"
      activities: "{{ .tasks.suggest_activities.output.activities }}"
