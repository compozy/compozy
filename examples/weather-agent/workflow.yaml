id: weather-agent
version: 0.1.0
description: A simple weather agent that provides weather information based on location

schemas:
  - id: city_input
    type: object
    properties:
      city:
        type: string
        description: The city to get weather information for
    required:
      - city

config:
  input:
    $ref: local::schemas.#(id=="city_input")

tools:
  - id: weather_tool
    description: Get the current weather for a specific location
    execute: ./weather_tool.ts
    input:
      $ref: local::schemas.#(id=="city_input")

  - id: save_data
    description: Save the weather data to a file
    execute: ./save_tool.ts

agents:
  - id: tourist_guide
    config:
      $ref: global::models.#(provider=="groq")
    instructions: |
      You are a helpful tourist guide assistant specialized in the city {{ .workflow.input.city }}
      That's is your capabilities:
      - You can use the `weather_tool` to fetch weather data (just when necessary and asked about it)
      - You can provide thoughtful recommendations for activities based on some weather data.
      - You can suggest clothing to use for specific activities and weather
      Always respond in valid JSON format.
    actions:
      - id: get_weather
        prompt: |
          What is the current weather in {{ .workflow.input.city }}?
        tools:
          - $ref: local::tools.#(id=="weather_tool")
      - id: suggest_activities
        json_mode: true
        prompt: |
          Given the current conditions in {{ .workflow.input.city }}: {{ .tasks.weather.output | toJson }}
          Suggest appropriate activities specifically from {{ .workflow.input.city }} for these weather conditions
        output:
          type: object
          properties:
            activities:
              type: array
              items:
                type: string
              description: List of recommending activities
          required:
            - activities
      - id: suggest_clothing
        json_mode: true
        prompt: |
          Given the current in {{ .workflow.input.city }}:
          - Weather: {{ .tasks.weather.output | toJson }}
          - Activities: {{ .tasks.activities.output | toJson }}
          Suggest appropriate clothing items based on the information above.
        output:
          type: object
          properties:
            clothings:
              type: array
              items:
                type: string
              description: List of recommending clothings items
          required:
            - clothings
      - id: analyze_activity
        json_mode: true
        prompt: |
          Analyze the activity "{{ .item }}" in {{ .workflow.input.city }} given the current weather conditions:
          - Weather: {{ .tasks.weather.output | toJson }}

          Provide detailed recommendations including:
          - Best time of day for this activity
          - Weather-specific tips
          - Required equipment or preparation
          - Safety considerations

          Return your analysis in JSON format with the fields: best_time, tips, equipment, safety_notes.

tasks:
  - id: weather
    type: basic
    $use: agent(local::agents.#(id="tourist_guide"))
    action: get_weather
    outputs:
      temperature: "{{ .output.temperature }}"
      humidity: "{{ .output.humidity }}"
      description: "{{ .output.weather }}"
      city: "{{ .workflow.input.city }}"
      timestamp: "{{ now }}"
    on_success:
      next: activities

  - id: activities
    type: basic
    $use: agent(local::agents.#(id="tourist_guide"))
    action: suggest_activities
    on_success:
      next: activity_analysis

  - id: activity_analysis
    type: collection
    items: "{{ .tasks.activities.output.activities }}"
    mode: sequential
    task:
      id: "analyze-activity-{{ .index }}"
      type: basic
      $use: agent(local::agents.#(id="tourist_guide"))
      action: analyze_activity
      outputs:
        activity: "{{ .item }}"
        analysis: "{{ .output }}"
        city: "{{ .workflow.input.city }}"
    outputs:
      detailed_recommendations: "{{ .output }}"
      analyzed_count: "{{ len .output }}"
    on_success:
      next: clothing

  - id: clothing
    type: basic
    $use: agent(local::agents.#(id="tourist_guide"))
    action: suggest_clothing
    outputs:
      save_data:
        city: "{{ .workflow.input.city }}"
        weather: "{{ .tasks.weather.output }}"
        clothing: "{{ .output.clothings }}"
        activities: "{{ .tasks.activities.output }}"
        detailed_analysis: "{{ .tasks.activity_analysis.output }}"
    on_success:
      next: clothing_check

  - id: clothing_check
    type: router
    condition: '{{ .tasks.clothing.output.save_data.clothing | empty | ternary "no_clothes" "has_clothes" }}'
    routes:
      has_clothes:
        $ref: local::tasks.#(id="save_results")
      no_clothes:
        $ref: local::tasks.#(id="no_results")

  - id: no_results
    type: basic
    $use: tool(local::tools.#(id="save_data"))
    final: true
    with:
      payload:
        city: "{{ .tasks.clothing.output.save_data.city }}"
        weather: "{{ .tasks.clothing.output.save_data.weather }}"
        clothing: "[]"
        activities: "{{ .tasks.clothing.output.save_data.activities }}"
        detailed_analysis: "{{ .tasks.clothing.output.save_data.detailed_analysis }}"
        format: "json"

  - id: save_results
    type: parallel
    strategy: wait_all
    max_workers: 2
    timeout: 30s
    final: true
    tasks:
      - id: save_json
        type: basic
        $use: tool(local::tools.#(id="save_data"))
        with:
          payload:
            city: "{{ .tasks.clothing.output.save_data.city }}"
            weather: "{{ .tasks.clothing.output.save_data.weather }}"
            clothing: "{{ .tasks.clothing.output.save_data.clothing }}"
            activities: "{{ .tasks.clothing.output.save_data.activities }}"
            detailed_analysis: "{{ .tasks.clothing.output.save_data.detailed_analysis }}"
            format: "json"

      - id: save_csv
        type: basic
        $use: tool(local::tools.#(id="save_data"))
        with:
          payload:
            city: "{{ .tasks.clothing.output.save_data.city }}"
            weather: "{{ .tasks.clothing.output.save_data.weather }}"
            clothing: "{{ .tasks.clothing.output.save_data.clothing }}"
            activities: "{{ .tasks.clothing.output.save_data.activities }}"
            detailed_analysis: "{{ .tasks.clothing.output.save_data.detailed_analysis }}"
            format: "csv"
