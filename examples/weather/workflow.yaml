id: weather
version: 0.1.0
description: A simple weather agent that provides weather information based on location

schemas:
  - id: city_input
    type: object
    properties:
      city:
        type: string
        description: The city to get weather information for
    required:
      - city

config:
  input: city_input

tools:
  - id: weather_tool
    description: Get the current weather for a specific location
    input: city_input
  - id: save_data
    description: Save the weather data to a file

agents:
  - id: tourist_guide
    instructions: |
      You are a helpful tourist guide assistant.
      That's is your capabilities:
      - You can use weather tools to fetch weather data (just when necessary and asked about it)
      - You can provide thoughtful recommendations for activities based on some weather data.
      - You can suggest clothing to use for specific activities and weather
      Always respond in valid JSON format.
    actions:
      - id: get_weather
        prompt: |
          What is the current weather in {{ .input.city }}?
        output:
          type: object
          properties:
            weather:
              type: string
            temperature:
              type: number
            humidity:
              type: number
          required:
            - weather
            - temperature
            - humidity
      - id: suggest_activities
        prompt: |
          Given the current conditions in {{ .workflow.input.city }}: {{ .tasks.weather.output | toJson }}
          Suggest appropriate activities specifically from {{ .workflow.input.city }} for these weather conditions
        output:
          type: object
          properties:
            activities:
              type: array
              items:
                type: string
              description: List of recommending activities
          required:
            - activities
      - id: suggest_clothing
        prompt: |
          Given the current in {{ .workflow.input.city }}:
          - Weather: {{ .tasks.weather.output | toJson }}
          - Activities: {{ .tasks.activities.output | toJson }}
          Suggest appropriate clothing items based on the information above.
        output:
          type: object
          properties:
            clothings:
              type: array
              items:
                type: string
              description: List of recommending clothings items
          required:
            - clothings
      - id: analyze_activity
        prompt: |
          Analyze the activity "{{ .item }}" in {{ .workflow.input.city }} given the current weather conditions:
          - Weather: {{ .tasks.weather.output | toJson }}
          Provide detailed recommendations including:
          - Best time of day for this activity
          - Weather-specific tips
          - Required equipment or preparation
          - Safety considerations
          Return your analysis in JSON format with the fields: best_time, tips, equipment, safety_notes.
        output:
          type: object
          properties:
            best_time:
              type: string
              description: Recommended time of day for the activity
            tips:
              type: string
              description: Weather-specific guidance and considerations
            equipment:
              type: string
              description: Required equipment or preparation details
            safety_notes:
              type: string
              description: Safety considerations for current conditions
          required:
            - best_time
            - tips
            - equipment
            - safety_notes
      - id: validate_clothing
        prompt: |
          Validate the clothing item "{{ .item }}" for {{ .workflow.input.city }} given the current weather conditions:
          - Weather: {{ .tasks.weather.output | toJson }}
          - Temperature: {{ .tasks.weather.output.temperature }}
          - Humidity: {{ .tasks.weather.output.humidity }}
          Determine if this clothing item is appropriate for the current conditions and provide:
          - Suitability score (1-10)
          - Reasoning for the score
          - Any modifications or additions needed
          Return your validation in JSON format with the fields: item, suitability_score, reasoning, modifications.
        output:
          type: object
          properties:
            item:
              type: string
              description: Clothing item being evaluated
            suitability_score:
              type: integer
              description: Score from 1 (poor fit) to 10 (ideal fit)
            reasoning:
              type: string
              description: Explanation supporting the suitability score
            modifications:
              type: string
              description: Suggested adjustments or additional items
          required:
            - item
            - suitability_score
            - reasoning

tasks:
  - id: weather
    type: basic
    agent: tourist_guide
    action: get_weather
    with:
      city: "{{ .workflow.input.city }}"
    outputs:
      temperature: "{{ .output.temperature }}"
      humidity: "{{ .output.humidity }}"
      description: "{{ .output.weather }}"
      city: "{{ .workflow.input.city }}"
      timestamp: "{{ now }}"
    on_success:
      next: activities

  - id: activities
    type: basic
    agent: tourist_guide
    action: suggest_activities
    on_success:
      next: activity_analysis

  - id: activity_analysis
    type: collection
    items: "{{ .tasks.activities.output.activities }}"
    mode: parallel
    task:
      id: "analyze-activity-{{ .index }}"
      type: basic
      agent: tourist_guide
      action: analyze_activity
      outputs:
        activity: "{{ .item }}"
        analysis: "{{ .output }}"
    outputs:
      detailed_recommendations: "{{ .output }}"
      analyzed_count: "{{ len .output }}"
    on_success:
      next: clothing

  - id: clothing
    type: basic
    agent: tourist_guide
    action: suggest_clothing
    outputs:
      save_data:
        city: "{{ .workflow.input.city }}"
        weather: "{{ .tasks.weather.output }}"
        clothing: "{{ .output.clothings }}"
        activities: "{{ .tasks.activities.output }}"
        detailed_analysis: "{{ .tasks.activity_analysis.output }}"
    on_success:
      next: clothing_validation

  - id: clothing_validation
    type: collection
    items: "{{ .tasks.clothing.output.save_data.clothing }}"
    mode: parallel  # can be sequencial
    task:
      id: "validate-clothing-{{ .index }}"
      type: basic
      agent: tourist_guide
      action: validate_clothing
      outputs:
        clothing_item: "{{ .item }}"
        validation: "{{ .output }}"
    outputs:
      validated_items: "{{ .output }}"
      validation_count: "{{ len .output }}"
    on_success:
      next: aggr

  - id: aggr
    type: aggregate
    outputs:
      city: "{{ .workflow.input.city }}"
      weather: "{{ .tasks.weather.output }}"
      clothing: "{{ .tasks.clothing.output.save_data.clothing }}"
      activities: "{{ .tasks.activities.output }}"
      detailed_analysis: "{{ .tasks.activity_analysis.output }}"
      validated_items: "{{ .tasks.clothing_validation.output }}"
    on_success:
      next: clothing_check

  - id: clothing_check
    type: router
    condition: '{{ .tasks.clothing.output.save_data.clothing | empty | ternary "no_clothes" "has_clothes" }}'
    routes:
      has_clothes: save_results
      no_clothes: no_results

  - id: save_results
    type: composite
    final: true
    tasks:
      - id: save_json
        type: basic
        tool: save_data
        with:
          payload: "{{ .tasks.aggr.output }}"
          format: "json"
      - id: save_txt
        type: basic
        tool: save_data
        with:
          payload: "{{ .tasks.aggr.output }}"
          format: "txt"

  - id: no_results
    type: basic
    tool: save_data
    final: true
    with:
      payload: "{{ .tasks.aggr.output }}"
      format: "txt"

outputs:
  city: "{{ .workflow.input.city }}"
  weather_summary:
    temperature: "{{ .tasks.weather.output.temperature }}"
    humidity: "{{ .tasks.weather.output.humidity }}"
    description: "{{ .tasks.weather.output.description }}"
    timestamp: "{{ .tasks.weather.output.timestamp }}"
  recommendations:
    activities: "{{ .tasks.activities.output.activities }}"
    clothing: "{{ .tasks.clothing.output.save_data.clothing }}"
  analysis:
    activity_children: "{{ .tasks.activity_analysis.children }}"
    clothing_children: "{{ .tasks.clothing_validation.children }}"
    first_activity_analysis: '{{ if .tasks.activity_analysis.children }}{{ if index .tasks.activity_analysis.children
      "analyze-activity-0" }}{{ (index .tasks.activity_analysis.children "analyze-activity-0").output
      | toJson }}{{ else }}null{{ end }}{{ else }}null{{ end }}'
    first_clothing_validation: '{{ if .tasks.clothing_validation.children }}{{ if index .tasks.clothing_validation.children
      "validate-clothing-0" }}{{ (index .tasks.clothing_validation.children "validate-clothing-0").output
      | toJson }}{{ else }}null{{ end }}{{ else }}null{{ end }}'
  data_persistence:
    files_saved: "{{ .tasks.save_results.output | toJson }}"
    save_tasks_children: "{{ .tasks.save_results.children | toJson }}"
  execution_summary:
    total_tasks_completed: "{{ len .tasks }}"
    workflow_status: '{{ .status | default "completed" }}'
    collections_with_children:
      activity_analysis_child_count: "{{ if .tasks.activity_analysis.children }}{{ len .tasks.activity_analysis.children\
        \ }}{{ else }}0{{ end }}"
      clothing_validation_child_count: "{{ if .tasks.clothing_validation.children }}{{ len .tasks.clothing_validation.children\
        \ }}{{ else }}0{{ end }}"
      composite_child_count: "{{ if .tasks.save_results.children }}{{ len .tasks.save_results.children\
        \ }}{{ else }}0{{ end }}"
