# {{ .Name }}

{{ .Description }}

## Getting Started

This project was initialized with [Compozy](https://github.com/compozy/compozy), a next-level agentic orchestration platform for building AI-powered applications.

## Prerequisites

- [Bun](https://bun.sh) runtime (recommended)
- [Docker](https://docker.com) (for infrastructure services)

## Installation

1. **Navigate to your project directory:**
   ```bash
   cd "{{ .Name }}"
   ```

2. **Set up environment variables:**
   ```bash
   cp env.example .env
   # Edit .env with your API keys and configuration
   ```

3. **Install dependencies:**
   ```bash
   bun install
   ```

## Development

### Start Infrastructure Services

If using Docker setup:

```bash
# Start all services (PostgreSQL, Redis, etc.)
docker-compose up -d
```

### Start Development Server

```bash
# Start with hot reload
compozy dev
```

### Run Workflow (HTTP)

Execute the generated workflow (`id: greeter`) and fetch its result via the REST API.

```bash
# 1) Trigger execution (returns exec_id)
EXEC_ID=$(curl -s \
  -X POST http://localhost:5001/api/v0/workflows/greeter/executions \
  -H 'Content-Type: application/json' \
  -d '{"input": {"name": "World", "style": "friendly"}}' \
| jq -r '.data.exec_id')

echo "Execution ID: $EXEC_ID"

# 2) Get execution status and output
curl -s \
  http://localhost:5001/api/v0/executions/workflows/$EXEC_ID \
| jq '.data | {status, output}'
```

Tip: You can also use the generated `api.http` file to run these requests from an HTTP client (see the variables and request flow inside the file).

## Project Structure

```
{{ .Name }}/
├── compozy.yaml          # Project configuration
├── env.example           # Environment variables template
├── api.http              # API test requests
├── workflows/            # Workflow definitions
│   └── main.yaml         # Example workflow (id: greeter)
├── entrypoint.ts         # Runtime entry point
├── greeting_tool.ts      # Example tool
└── .gitignore           # Git ignore rules
```

## Configuration

### Environment Variables

Copy `env.example` to `.env` and configure:

- **LLM Providers**: Add your API keys for OpenAI, Anthropic, etc.
- **Database**: Configure database connections
- **Runtime**: Set up runtime-specific options

### Project Configuration

Edit `compozy.yaml` to customize:

- Model providers and settings
- Workflow definitions
- Runtime configuration
- Autoload patterns for agents and tools

## Usage

1. **Define your workflows** in the `workflows/` directory
2. **Create tools** for specific tasks
3. **Configure agents** for autonomous execution
4. **Run workflows** using the Compozy CLI or API

### Example Commands

```bash
# List available workflows
compozy workflow list --server-url http://localhost:5001

# Get details about the generated workflow
compozy workflow get greeter --server-url http://localhost:5001

# Execute the generated workflow (JSON input)
compozy workflow execute greeter \
  --json='{"name":"World","style":"friendly"}' \
  --server-url http://localhost:5001

# Execute with key=value params (alternative)
compozy workflow execute greeter \
  --param name=World --param style=friendly \
  --server-url http://localhost:5001

# Execute using an input file
# echo '{"name":"World","style":"friendly"}' > input.json
compozy workflow execute greeter \
  --input-file=input.json \
  --server-url http://localhost:5001
```

## Docker Support

If Docker setup was included during initialization:

```bash
# Start infrastructure services
docker-compose up -d

# Stop services
docker-compose down

# View service logs
docker-compose logs -f
```

## Documentation

- [Compozy Documentation](https://docs.compozy.dev)
- [Workflow Examples](https://github.com/compozy/compozy/tree/main/examples)
- [Agent Configuration](https://docs.compozy.dev/agents)
- [Tool Development](https://docs.compozy.dev/tools)

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

**Generated by Compozy** - A next-level agentic orchestration platform
